<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MonoGame.Extended</name>
    </assembly>
    <members>
        <member name="T:MonoGame.Extended.Collections.BitVector32">
            <summary>
                Defines a bit vector with easy integer or boolean access to a 32 bit storage.
            </summary>
            <remarks>
                <para>
                    <see cref="T:MonoGame.Extended.Collections.BitVector32" /> is more efficient than <see cref="!:BitVector" /> for boolean values and small integers
                    that are used internally. A <see cref="!:BitVector" /> can grow indefinitely as needed, but it has the memory and
                    performance overhead that a class instance requires. In contrast, a <see cref="T:MonoGame.Extended.Collections.BitVector32" /> uses only 32
                    bits.
                </para>
                <para>
                    A <see cref="T:MonoGame.Extended.Collections.BitVector32" /> structure can be set up to contain either sections for small integers or bit
                    flags for booleans, but not both. A <see cref="T:MonoGame.Extended.Collections.BitVector32.Section" /> is a window into the <see cref="T:MonoGame.Extended.Collections.BitVector32" /> and
                    is composed of the smallest number of consecutive bits that can contain the maximum value specified in
                    <see cref="M:MonoGame.Extended.Collections.BitVector32.CreateSection(System.Int16,MonoGame.Extended.Collections.BitVector32.Section)" />. For example, a section with a maximum value of 1 is composed of
                    only one bit, whereas a section with a maximum value of 5 is composed of three bits. You can create a
                    <see cref="T:MonoGame.Extended.Collections.BitVector32.Section" /> with a maximum value of 1 to serve as a <see cref="T:System.Boolean" />, thereby allowing you to
                    store integers and booleans in the same <see cref="T:MonoGame.Extended.Collections.BitVector32" />.
                </para>
                <para>
                    Some members can be used for a <see cref="T:MonoGame.Extended.Collections.BitVector32" /> that is set up as sections, while other members can
                    be used for one that is set up as bit flags. For example, the <see cref="!:Item(Section)" /> property is the
                    indexer for a <see cref="T:MonoGame.Extended.Collections.BitVector32" /> that is set up as sections, and the <see cref="!:Item(uint)" /> property
                    is the indexer for a <see cref="T:MonoGame.Extended.Collections.BitVector32" /> that is set up as bit flags. <see cref="!:CreateMask(int)" />
                    creates a series of masks that can be used to access individual bits in a <see cref="T:MonoGame.Extended.Collections.BitVector32" /> that is
                    set up as bit flags.
                </para>
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Collections.BitVector32.#ctor(System.UInt32)">
            <summary>
                Initializes a new instance of the <see cref="T:MonoGame.Extended.Collections.BitVector32" /> structure with the specified internal data.
            </summary>
            <param name="data">An integer representing the data of the new <see cref="T:MonoGame.Extended.Collections.BitVector32" />.</param>
            <remarks>
                <para>This constructor is an O(1) operation.</para>
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Collections.BitVector32.#ctor(System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:MonoGame.Extended.Collections.BitVector32" /> structure with the specified internal data.
            </summary>
            <param name="data">An integer representing the data of the new <see cref="T:MonoGame.Extended.Collections.BitVector32" />.</param>
            <remarks>
                <para>This constructor is an O(1) operation.</para>
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Collections.BitVector32.#ctor(MonoGame.Extended.Collections.BitVector32)">
            <summary>
                Initializes a new instance of the <see cref="T:MonoGame.Extended.Collections.BitVector32" /> structure containing the data represented in an
                existing <see cref="T:MonoGame.Extended.Collections.BitVector32" /> structure.
            </summary>
            <param name="value">A <see cref="T:MonoGame.Extended.Collections.BitVector32" /> structure that contains the data to copy.</param>
            <remarks>
                <para>This constructor is an O(1) operation.</para>
            </remarks>
        </member>
        <member name="P:MonoGame.Extended.Collections.BitVector32.Item(System.UInt32)">
            <summary>
                Gets or sets the state of the bit flag indicated by the specified mask.
            </summary>
            <param name="bitMask">A bit mask that indicates the bit flag to get or set.</param>
            <returns><c>true</c> if the specified bit flag is on (1); otherwise, <c>false</c>.</returns>
            <remarks>
                <para>
                    The <see cref="!:Item(Section)" /> property is the indexer for a <see cref="T:MonoGame.Extended.Collections.BitVector32" /> that is set up as
                    sections, and the <see cref="!:Item(uint)" /> property is the indexer for a <see cref="T:MonoGame.Extended.Collections.BitVector32" /> that is
                    set up as bit flags.
                </para>
                <para>
                    Using this property on a <see cref="T:MonoGame.Extended.Collections.BitVector32" /> that is set up as sections might cause unexpected
                    results.
                </para>
                <para>Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.</para>
            </remarks>
        </member>
        <member name="P:MonoGame.Extended.Collections.BitVector32.Item(MonoGame.Extended.Collections.BitVector32.Section)">
            <summary>
                Gets or sets the value stored in the specified <see cref="T:MonoGame.Extended.Collections.BitVector32.Section" />.
            </summary>
            <param name="section">A <see cref="T:MonoGame.Extended.Collections.BitVector32.Section" /> that contains the value to get or set.</param>
            <returns>The value stored in the specified <see cref="T:MonoGame.Extended.Collections.BitVector32.Section" />.</returns>
            <remarks>
                <para>
                    The <see cref="!:Item(Section)" /> property is the indexer for a <see cref="T:MonoGame.Extended.Collections.BitVector32" /> that is set up as
                    sections, and the <see cref="!:Item(uint)" /> property is the indexer for a <see cref="T:MonoGame.Extended.Collections.BitVector32" /> that is
                    set up as bit flags.
                </para>
                <para>
                    A <see cref="T:MonoGame.Extended.Collections.BitVector32.Section" /> is a window into the <see cref="T:MonoGame.Extended.Collections.BitVector32" /> and is composed of the smallest
                    number of consecutive bits that can contain the maximum value specified in <see cref="M:MonoGame.Extended.Collections.BitVector32.CreateSection(System.Int16)" />.
                    For example, a section with a maximum value of 1 is composed of only one bit, whereas a section with a maximum
                    value of 5 is composed of three bits. You can create a <see cref="T:MonoGame.Extended.Collections.BitVector32.Section" /> with a maximum value of 1 to
                    serve as a <see cref="T:System.Boolean" />, thereby allowing you to store integers and booleans in the same
                    <see cref="T:MonoGame.Extended.Collections.BitVector32" />.
                </para>
                <para>Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.</para>
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Collections.BitVector32.op_Implicit(MonoGame.Extended.Collections.BitVector32)~System.UInt32">
            <summary>
                Converts a <see cref="T:MonoGame.Extended.Collections.BitVector32" /> to an <see cref="T:System.UInt32" />.
            </summary>
            <param name="bitVector">The <see cref="T:MonoGame.Extended.Collections.BitVector32" /> to convert into a <see cref="T:System.UInt32" />.</param>
        </member>
        <member name="M:MonoGame.Extended.Collections.BitVector32.op_Implicit(System.UInt32)~MonoGame.Extended.Collections.BitVector32">
            <summary>
                Converts a <see cref="T:System.UInt32" /> to a <see cref="T:MonoGame.Extended.Collections.BitVector32" />.
            </summary>
            <param name="data">The <see cref="T:System.UInt32" /> to convert into a <see cref="T:MonoGame.Extended.Collections.BitVector32" />.</param>
        </member>
        <member name="M:MonoGame.Extended.Collections.BitVector32.op_Implicit(MonoGame.Extended.Collections.BitVector32)~System.Int32">
            <summary>
                Converts a <see cref="T:MonoGame.Extended.Collections.BitVector32" /> to an <see cref="T:System.UInt32" />.
            </summary>
            <param name="bitVector">The <see cref="T:MonoGame.Extended.Collections.BitVector32" /> to convert into a <see cref="T:System.UInt32" />.</param>
        </member>
        <member name="M:MonoGame.Extended.Collections.BitVector32.op_Implicit(System.Int32)~MonoGame.Extended.Collections.BitVector32">
            <summary>
                Converts a <see cref="T:System.Int32" /> to a <see cref="T:MonoGame.Extended.Collections.BitVector32" />.
            </summary>
            <param name="data">The <see cref="T:System.Int32" /> to convert into a <see cref="T:MonoGame.Extended.Collections.BitVector32" />.</param>
        </member>
        <member name="M:MonoGame.Extended.Collections.BitVector32.CreateMask">
            <summary>
                Creates the first mask in a series of masks that can be used to retrieve individual bits in a
                <see cref="T:MonoGame.Extended.Collections.BitVector32" /> that is set up as bit flags.
            </summary>
            <returns>A mask that isolates the first bit flag in the <see cref="T:MonoGame.Extended.Collections.BitVector32" />.</returns>
            <remarks>
                <para>
                    Use <see cref="M:MonoGame.Extended.Collections.BitVector32.CreateMask" /> to create the first mask in a series and <see cref="!:CreateMask(int)" /> for
                    all subsequent masks.
                </para>
                <para>Multiple masks can be created to refer to the same bit flag.</para>
                <para>
                    The resulting mask isolates only one bit flag in the <see cref="T:MonoGame.Extended.Collections.BitVector32" />. You can combine masks using
                    the bitwise OR operation to create a mask that isolates multiple bit flags in the <see cref="T:MonoGame.Extended.Collections.BitVector32" />.
                </para>
                <para>Using a mask on a <see cref="T:MonoGame.Extended.Collections.BitVector32" /> that is set up as sections might cause unexpected results.</para>
                <para>This method is an O(1) operation.</para>
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Collections.BitVector32.CreateMask(System.UInt32)">
            <summary>
                Creates an additional mask following the specified mask in a series of masks that can be used to retrieve
                individual bits in a <see cref="T:MonoGame.Extended.Collections.BitVector32" /> that is set up as bit flags.
            </summary>
            <param name="previous">The mask that indicates the previous bit flag.</param>
            <returns>
                A mask that isolates the bit flag following the one that <paramref name="previous" /> points to in
                <see cref="T:MonoGame.Extended.Collections.BitVector32" />.
            </returns>
            <exception cref="T:System.InvalidOperationException">
                <paramref name="previous" /> indicates the last bit flag in the
                <see cref="T:MonoGame.Extended.Collections.BitVector32" />.
            </exception>
            <remarks>
                <para>
                    Use <see cref="M:MonoGame.Extended.Collections.BitVector32.CreateMask" /> to create the first mask in a series and <see cref="!:CreateMask(int)" /> for
                    all subsequent masks.
                </para>
                <para>Multiple masks can be created to refer to the same bit flag.</para>
                <para>
                    The resulting mask isolates only one bit flag in the <see cref="T:MonoGame.Extended.Collections.BitVector32" />. You can combine masks using
                    the bitwise OR operation to create a mask that isolates multiple bit flags in the <see cref="T:MonoGame.Extended.Collections.BitVector32" />.
                </para>
                <para>Using a mask on a <see cref="T:MonoGame.Extended.Collections.BitVector32" /> that is set up as sections might cause unexpected results.</para>
                <para>This method is an O(1) operation.</para>
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Collections.BitVector32.CreateSection(System.Int16)">
            <summary>
                Creates the first <see cref="T:MonoGame.Extended.Collections.BitVector32.Section" /> in a series of sections that contain small integers.
            </summary>
            <param name="maxValue">A 16-bit signed integer that specifies the maximum value for the new <see cref="T:MonoGame.Extended.Collections.BitVector32.Section" />.</param>
            <returns>A <see cref="T:MonoGame.Extended.Collections.BitVector32.Section" /> that can hold a number from zero to <paramref name="maxValue" />.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="maxValue" /> is less than 1.</exception>
            <remarks>
                <para>
                    A <see cref="T:MonoGame.Extended.Collections.BitVector32.Section" /> is a window into the <see cref="T:MonoGame.Extended.Collections.BitVector32" /> and is composed of the smallest
                    number of consecutive bits that can contain the maximum value specified in
                    <see cref="M:MonoGame.Extended.Collections.BitVector32.CreateSection(System.Int16,MonoGame.Extended.Collections.BitVector32.Section)" />.
                    For example, a section with a maximum value of 1 is composed of only one bit, whereas a section with a maximum
                    value of 5 is composed of three bits. You can create a <see cref="T:MonoGame.Extended.Collections.BitVector32.Section" /> with a maximum value of 1 to
                    serve as a <see cref="T:System.Boolean" />, thereby allowing you to store integers and booleans in the same
                    <see cref="T:MonoGame.Extended.Collections.BitVector32" />.
                </para>
                <para>
                    If sections already exist in the <see cref="T:MonoGame.Extended.Collections.BitVector32" />, those sections are still accessible; however,
                    overlapping sections might cause unexpected results.
                </para>
                <para>This method is an O(1) operation.</para>
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Collections.BitVector32.CreateSection(System.Int16,MonoGame.Extended.Collections.BitVector32.Section)">
            <summary>
                Creates a new <see cref="T:MonoGame.Extended.Collections.BitVector32.Section" /> following the specified <see cref="T:MonoGame.Extended.Collections.BitVector32.Section" /> in a series of sections that
                contain small integers.
            </summary>
            <param name="maxValue">A 16-bit signed integer that specifies the maximum value for the new <see cref="T:MonoGame.Extended.Collections.BitVector32.Section" />.</param>
            <param name="previous">The previous <see cref="T:MonoGame.Extended.Collections.BitVector32.Section" /> in the <see cref="T:MonoGame.Extended.Collections.BitVector32" />.</param>
            <returns>A <see cref="T:MonoGame.Extended.Collections.BitVector32.Section" /> that can hold a number from zero to <paramref name="maxValue" />.</returns>
            <exception cref="T:System.ArgumentException">
                <param name="maxValue"> is less than 1.</param>
            </exception>
            <exception cref="T:System.InvalidOperationException">
                <paramref name="previous" /> includes the final bit in the
                <see cref="T:MonoGame.Extended.Collections.BitVector32" />.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                <param name="maxValue"></param>
                is greater than the highest value that can be represented by the number of bits after <paramref name="previous" />.
            </exception>
            <remarks>
                <para>
                    A <see cref="T:MonoGame.Extended.Collections.BitVector32.Section" /> is a window into the <see cref="T:MonoGame.Extended.Collections.BitVector32" /> and is composed of the smallest
                    number of consecutive bits that can contain the maximum value specified in
                    <see cref="M:MonoGame.Extended.Collections.BitVector32.CreateSection(System.Int16,MonoGame.Extended.Collections.BitVector32.Section)" />. For example, a section with a maximum value of 1 is composed of
                    only one bit, whereas a section with a maximum value of 5 is composed of three bits. You can create a
                    BitVector32.Section with a maximum value of 1 to serve as a Boolean, thereby allowing you to store integers and
                    Booleans in the same BitVector32.
                </para>
                <para>
                    If sections already exist after previous in the <see cref="T:MonoGame.Extended.Collections.BitVector32" />, those sections are still
                    accessible; however, overlapping sections might cause unexpected results.
                </para>
                <para>This method is an O(1) operation.</para>
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Collections.BitVector32.Equals(System.Object)">
            <summary>
                Determines whether the specified object is equal to the <see cref="T:MonoGame.Extended.Collections.BitVector32" />.
            </summary>
            <param name="obj">The object to compare with the <see cref="T:MonoGame.Extended.Collections.BitVector32" />.</param>
            <returns><c>true</c> if the specified object is equal to the <see cref="T:MonoGame.Extended.Collections.BitVector32" />; otherwise, <c>false</c>.</returns>
            <remarks>
                <para>
                    The object <paramref name="obj" /> is considered equal to the <see cref="T:MonoGame.Extended.Collections.BitVector32" /> if the type of
                    <paramref name="obj" /> is compatible with the <see cref="T:MonoGame.Extended.Collections.BitVector32" /> type and if the value of
                    <paramref name="obj" /> is equal to the value of <see cref="T:MonoGame.Extended.Collections.BitVector32" />.
                </para>
                <para>This method is an O(1) operation.</para>
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Collections.BitVector32.Equals(MonoGame.Extended.Collections.BitVector32)">
            <summary>
                Determines whether the specified <see cref="T:MonoGame.Extended.Collections.BitVector32" /> is equal to the <see cref="T:MonoGame.Extended.Collections.BitVector32" />.
            </summary>
            <param name="other">The <see cref="T:MonoGame.Extended.Collections.BitVector32" /> to compare with the <see cref="T:MonoGame.Extended.Collections.BitVector32" />.</param>
            <returns>
                <c>true</c> if <paramref name="other" /> is the same as the <see cref="T:MonoGame.Extended.Collections.BitVector32" />; otherwise,
                <c>false</c>.
            </returns>
            <remarks>
                <para>This method is an O(1) operation.</para>
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Collections.BitVector32.op_Equality(MonoGame.Extended.Collections.BitVector32,MonoGame.Extended.Collections.BitVector32)">
            <summary>
                Determines whether two specified <see cref="T:MonoGame.Extended.Collections.BitVector32" /> values are equal.
            </summary>
            <param name="a">The first <see cref="T:MonoGame.Extended.Collections.BitVector32" />.</param>
            <param name="b">The second <see cref="T:MonoGame.Extended.Collections.BitVector32" /></param>
            <returns>
                <c>true</c> if <paramref name="a" /> and <paramref name="b" /> represent the same <see cref="T:MonoGame.Extended.Collections.BitVector32" />,
                otherwise, <c>false</c>.
            </returns>
            <remarks>
                <para>This method is an O(1) operation.</para>
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Collections.BitVector32.op_Inequality(MonoGame.Extended.Collections.BitVector32,MonoGame.Extended.Collections.BitVector32)">
            <summary>
                Determines whether two <see cref="T:MonoGame.Extended.Collections.BitVector32" /> values have different values.
            </summary>
            <param name="a">The first <see cref="T:MonoGame.Extended.Collections.BitVector32" />.</param>
            <param name="b">The second <see cref="T:MonoGame.Extended.Collections.BitVector32" /></param>
            <returns>
                <c>true</c> if <paramref name="a" /> and <paramref name="b" /> do not represent the same <see cref="T:MonoGame.Extended.Collections.BitVector32" />
                ,
                otherwise, <c>false</c>.
            </returns>
            <remarks>
                <para>This method is an O(1) operation.</para>
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Collections.BitVector32.GetHashCode">
            <summary>
                Serves as a hash function for the <see cref="T:MonoGame.Extended.Collections.BitVector32" />.
            </summary>
            <returns>A hash code for the <see cref="T:MonoGame.Extended.Collections.BitVector32" />.</returns>
            <remarks>
                <para>This method overrides <see cref="M:System.Object.GetHashCode" />.</para>
                <para>
                    The hash code of a <see cref="T:MonoGame.Extended.Collections.BitVector32" /> is based on the value of <see cref="T:MonoGame.Extended.Collections.BitVector32" />. Two
                    instances of <see cref="T:MonoGame.Extended.Collections.BitVector32" /> with the same values also generate the same hash code.
                </para>
                <para>This method is an O(1) operation.</para>
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Collections.BitVector32.ToString(MonoGame.Extended.Collections.BitVector32)">
            <summary>
                Returns a string that represents the specified <see cref="T:MonoGame.Extended.Collections.BitVector32" />.
            </summary>
            <param name="value">The <see cref="T:MonoGame.Extended.Collections.BitVector32" /> to represent.</param>
            <returns>A string that represents the specified <see cref="T:MonoGame.Extended.Collections.BitVector32" />.</returns>
            <remarks>
                <para>This method is an O(1) operation.</para>
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Collections.BitVector32.ToString">
            <summary>
                Returns a string that represents the current <see cref="T:MonoGame.Extended.Collections.BitVector32" />.
            </summary>
            <returns>A string that represents the current <see cref="T:MonoGame.Extended.Collections.BitVector32" />.</returns>
            <remarks>
                <para>This method overrides <see cref="M:System.Object.ToString" />.</para>
                <para>This method is an O(1) operation.</para>
            </remarks>
        </member>
        <member name="T:MonoGame.Extended.Collections.BitVector32.Section">
            <summary>
                Represents a section of a <see cref="T:MonoGame.Extended.Collections.BitVector32" /> that can contain an integer number.
            </summary>
            <remarks>
                <para>
                    Use <see cref="M:MonoGame.Extended.Collections.BitVector32.CreateSection(System.Int16)" /> to define a new section. A <see cref="T:MonoGame.Extended.Collections.BitVector32.Section" /> is a window into the
                    <see cref="T:MonoGame.Extended.Collections.BitVector32" /> and is composed of the smallest number of consecutive bits that can contain the
                    maximum value specified in <see cref="M:MonoGame.Extended.Collections.BitVector32.CreateSection(System.Int16,MonoGame.Extended.Collections.BitVector32.Section)" />. For example, a section with a maximum
                    value of 1 is composed of only one bit, whereas a section with a maximum value of 5 is composed of three bits.
                    You can create a <see cref="T:MonoGame.Extended.Collections.BitVector32.Section" /> with a maximum value of 1 to serve as a <see cref="T:System.Boolean" />, thereby
                    allowing you to store integers and booleans in the same <see cref="T:MonoGame.Extended.Collections.BitVector32" />.
                </para>
            </remarks>
        </member>
        <member name="F:MonoGame.Extended.Collections.BitVector32.Section.Mask">
            <summary>
                The mask that isolates the <see cref="T:MonoGame.Extended.Collections.BitVector32.Section" /> within the <see cref="T:MonoGame.Extended.Collections.BitVector32" />.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Collections.BitVector32.Section.Offset">
            <summary>
                Gets the offset of the <see cref="T:MonoGame.Extended.Collections.BitVector32.Section" /> from the start of the <see cref="T:MonoGame.Extended.Collections.BitVector32" />.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Collections.BitVector32.Section.Equals(System.Object)">
            <summary>
                Determines whether the specified object is equal to the <see cref="T:MonoGame.Extended.Collections.BitVector32.Section" />.
            </summary>
            <param name="obj">The object to compare with the <see cref="T:MonoGame.Extended.Collections.BitVector32.Section" />.</param>
            <returns><c>true</c> if <paramref name="obj" /> is the same as the <see cref="T:MonoGame.Extended.Collections.BitVector32.Section" />; otherwise, <c>false</c>.</returns>
            <remarks>
                <para>This method overrides <see cref="M:System.Object.ToString" />.</para>
                <para>
                    Two <see cref="T:MonoGame.Extended.Collections.BitVector32.Section" /> values are considered equal if both sections are of the same length and are in the
                    same location within a <see cref="T:MonoGame.Extended.Collections.BitVector32" />.
                </para>
                <para>This method is an O(1) operation.</para>
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Collections.BitVector32.Section.Equals(MonoGame.Extended.Collections.BitVector32.Section)">
            <summary>
                Determines whether the specified <see cref="T:MonoGame.Extended.Collections.BitVector32.Section" /> is equal to the <see cref="T:MonoGame.Extended.Collections.BitVector32.Section" />.
            </summary>
            <param name="other">The <see cref="T:MonoGame.Extended.Collections.BitVector32.Section" /> to compare with the <see cref="T:MonoGame.Extended.Collections.BitVector32.Section" />.</param>
            <returns><c>true</c> if <paramref name="other" /> is the same as the <see cref="T:MonoGame.Extended.Collections.BitVector32.Section" />; otherwise, <c>false</c>.</returns>
            <remarks>
                <para>
                    Two <see cref="T:MonoGame.Extended.Collections.BitVector32.Section" /> values are considered equal if both sections are of the same length and are in the
                    same location within a <see cref="T:MonoGame.Extended.Collections.BitVector32" />.
                </para>
                <para>This method is an O(1) operation.</para>
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Collections.BitVector32.Section.op_Equality(MonoGame.Extended.Collections.BitVector32.Section,MonoGame.Extended.Collections.BitVector32.Section)">
            <summary>
                Determines whether two specified <see cref="T:MonoGame.Extended.Collections.BitVector32.Section" /> values are equal.
            </summary>
            <param name="a">The first <see cref="T:MonoGame.Extended.Collections.BitVector32.Section" />.</param>
            <param name="b">The second <see cref="T:MonoGame.Extended.Collections.BitVector32.Section" /></param>
            <returns>
                <c>true</c> if <paramref name="a" /> and <paramref name="b" /> represent the same <see cref="T:MonoGame.Extended.Collections.BitVector32.Section" />,
                otherwise, <c>false</c>.
            </returns>
            <remarks>
                <para>
                    Two <see cref="T:MonoGame.Extended.Collections.BitVector32.Section" /> values are considered equal if both sections are of the same length and are in the
                    same location within a <see cref="T:MonoGame.Extended.Collections.BitVector32" />.
                </para>
                <para>This method is an O(1) operation.</para>
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Collections.BitVector32.Section.op_Inequality(MonoGame.Extended.Collections.BitVector32.Section,MonoGame.Extended.Collections.BitVector32.Section)">
            <summary>
                Determines whether two <see cref="T:MonoGame.Extended.Collections.BitVector32.Section" /> values have different values.
            </summary>
            <param name="a">The first <see cref="T:MonoGame.Extended.Collections.BitVector32.Section" />.</param>
            <param name="b">The second <see cref="T:MonoGame.Extended.Collections.BitVector32.Section" /></param>
            <returns>
                <c>true</c> if <paramref name="a" /> and <paramref name="b" /> do not represent the same <see cref="T:MonoGame.Extended.Collections.BitVector32.Section" />,
                otherwise, <c>false</c>.
            </returns>
            <remarks>
                <para>
                    Two <see cref="T:MonoGame.Extended.Collections.BitVector32.Section" /> values are considered equal if both sections are of the same length and are in the
                    same location within a <see cref="T:MonoGame.Extended.Collections.BitVector32" />.
                </para>
                <para>This method is an O(1) operation.</para>
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Collections.BitVector32.Section.GetHashCode">
            <summary>
                Serves as a hash function for the <see cref="T:MonoGame.Extended.Collections.BitVector32.Section" />, suitable for hashing algorithms and data structures, such
                as a hash table.
            </summary>
            <returns>A hash code for the current <see cref="T:MonoGame.Extended.Collections.BitVector32.Section" />.</returns>
            <remarks>
                <para>This method overrides <see cref="M:System.Object.GetHashCode" />.</para>
                <para>
                    This method generates the same hash code for two objects that are equal according to the
                    <see cref="M:MonoGame.Extended.Collections.BitVector32.Section.Equals(MonoGame.Extended.Collections.BitVector32.Section)" /> method.
                </para>
                <para>This method is an O(1) operation.</para>
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Collections.BitVector32.Section.ToString(MonoGame.Extended.Collections.BitVector32.Section)">
            <summary>
                Returns a string that represents the specified <see cref="T:MonoGame.Extended.Collections.BitVector32.Section" />.
            </summary>
            <param name="value">The <see cref="T:MonoGame.Extended.Collections.BitVector32.Section" /> to represent.</param>
            <returns>A string that represents the specified <see cref="T:MonoGame.Extended.Collections.BitVector32.Section" />.</returns>
            <remarks>
                <para>This method is an O(1) operation.</para>
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Collections.BitVector32.Section.ToString">
            <summary>
                Returns a string that represents the <see cref="T:MonoGame.Extended.Collections.BitVector32.Section" />.
            </summary>
            <returns>A string that represents the <see cref="T:MonoGame.Extended.Collections.BitVector32.Section" />.</returns>
            <remarks>
                <para>This method overrides <see cref="M:System.Object.ToString" />.</para>
                <para>This method is an O(1) operation.</para>
            </remarks>
        </member>
        <member name="T:MonoGame.Extended.Collections.Deque`1">
            <summary>
                Represents a collection of objects which elements can added to or removed either from the front or back; a
                <a href="https://en.wikipedia.org/wiki/Double-ended_queue">double ended queue</a> (deque).
            </summary>
            <remarks>
                <a href="https://en.wikipedia.org/wiki/Circular_buffer">circular array</a> is used as the internal data
                structure for the <see cref="T:MonoGame.Extended.Collections.Deque`1" />.
            </remarks>
            <typeparam name="T">The type of the elements in the deque.</typeparam>
        </member>
        <member name="M:MonoGame.Extended.Collections.Deque`1.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:MonoGame.Extended.Collections.Deque`1" /> class that is empty and has the default initial capacity.
            </summary>
            <remarks>
                <para>
                    The capacity of a <see cref="T:MonoGame.Extended.Collections.Deque`1" /> is the number of elements that the <see cref="T:MonoGame.Extended.Collections.Deque`1" /> can
                    hold. As elements are added to a <see cref="T:MonoGame.Extended.Collections.Deque`1" />, <see cref="P:MonoGame.Extended.Collections.Deque`1.Capacity" /> is automatically increased by
                    <see cref="P:MonoGame.Extended.Collections.Deque`1.ResizeFunction" /> as required by reallocating the internal array.
                </para>
                <para>
                    If the size of the collection can be estimated, using the <see cref="M:MonoGame.Extended.Collections.Deque`1.#ctor(System.Int32)" /> constructor and
                    specifying the initial capacity eliminates the need to perform a number of resizing operations while adding
                    elements to the <see cref="T:MonoGame.Extended.Collections.Deque`1" />.
                </para>
                <para>
                    The capacity can be decreased by calling the <see cref="M:MonoGame.Extended.Collections.Deque`1.TrimExcess" /> method or by setting the
                    <see cref="P:MonoGame.Extended.Collections.Deque`1.Capacity" /> property explicitly. Decreasing, or increasing, the capacity reallocates memory and
                    copies all the
                    elements in the <see cref="T:MonoGame.Extended.Collections.Deque`1" />.
                </para>
                <para>This constructor is an O(1) operation.</para>
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Collections.Deque`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Initializes a new instance of the <see cref="T:MonoGame.Extended.Collections.Deque`1" /> class that contains elements copied from the specified
                collection and has sufficient capacity to accommodate the number of elements copied.
            </summary>
            <param name="collection">The collection whose elements are copied to the new deque.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection" /> is null.</exception>
            <remarks>
                <para>
                    The elements are copied onto the <see cref="T:MonoGame.Extended.Collections.Deque`1" /> in the same order they are read by the enumerator of
                    <paramref name="collection" />.
                </para>
                <para>This constructor is an O(n) operation, where n is the number of elements in <paramref name="collection" />.</para>
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Collections.Deque`1.#ctor(System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:MonoGame.Extended.Collections.Deque`1" /> class that is empty and has the specified initial
                capacity.
            </summary>
            <param name="capacity">The number of elements that the new <see cref="T:MonoGame.Extended.Collections.Deque`1" /> can initially store.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity" /> is less than 0.</exception>
            <remarks>
                <para>
                    The capacity of a <see cref="T:MonoGame.Extended.Collections.Deque`1" /> is the number of elements that the <see cref="T:MonoGame.Extended.Collections.Deque`1" /> can
                    hold. As elements are added to a <see cref="T:MonoGame.Extended.Collections.Deque`1" />, <see cref="P:MonoGame.Extended.Collections.Deque`1.Capacity" /> is automatically increased by
                    <see cref="P:MonoGame.Extended.Collections.Deque`1.ResizeFunction" /> as required by reallocating the internal array.
                </para>
                <para>
                    If the size of the collection can be estimated, specifying the initial capacity eliminates the need to
                    perform a number of resizing operations while adding elements to the <see cref="T:MonoGame.Extended.Collections.Deque`1" />.
                </para>
                <para>
                    The capacity can be decreased by calling the <see cref="M:MonoGame.Extended.Collections.Deque`1.TrimExcess" /> method or by setting the
                    <see cref="P:MonoGame.Extended.Collections.Deque`1.Capacity" /> property explicitly. Decreasing, or increasing, the capacity reallocates memory and
                    copies all the elements in the <see cref="T:MonoGame.Extended.Collections.Deque`1" />.
                </para>
                <para>This constructor is an O(n) operation, where n is <paramref name="capacity" />.</para>
            </remarks>
        </member>
        <member name="P:MonoGame.Extended.Collections.Deque`1.ResizeFunction">
            <summary>
                Gets or sets the resize function used to calculate and set <see cref="P:MonoGame.Extended.Collections.Deque`1.Capacity" /> when a greater capacity is
                required.
            </summary>
            <returns>
                The <see cref="T:System.Func`2" /> used to calculate and set <see cref="P:MonoGame.Extended.Collections.Deque`1.Capacity" /> when a greater capacity
                is required.
            </returns>
            <remarks>
                The default resize function is twice the <see cref="P:MonoGame.Extended.Collections.Deque`1.Capacity" />. Setting
                <see cref="P:MonoGame.Extended.Collections.Deque`1.ResizeFunction" /> to <c>null</c> will set it back to the default.
            </remarks>
        </member>
        <member name="P:MonoGame.Extended.Collections.Deque`1.Capacity">
            <summary>
                Gets or sets the total number of elements the internal data structure can hold without resizing.
            </summary>
            <returns>The number of elements that the <see cref="T:MonoGame.Extended.Collections.Deque`1" /> can contain before resizing is required.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <see cref="P:MonoGame.Extended.Collections.Deque`1.Capacity" /> cannot be set to a value less than <see cref="P:MonoGame.Extended.Collections.Deque`1.Count" />.
            </exception>
            <remarks>
                Changing <see cref="P:MonoGame.Extended.Collections.Deque`1.Capacity" /> reallocates memory and copies all the
                elements in the <see cref="T:MonoGame.Extended.Collections.Deque`1" />.
            </remarks>
        </member>
        <member name="P:MonoGame.Extended.Collections.Deque`1.Item(System.Int32)">
            <summary>
                Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Index was out of range. Must be non-negative and less than <see cref="P:MonoGame.Extended.Collections.Deque`1.Count" />.
            </exception>
            <remarks>
                <para></para>
                <para>
                    Use <c>0</c> for the <paramref name="index" /> to get or set the element at the beginning of the
                    <see cref="T:MonoGame.Extended.Collections.Deque`1" />, and use <c><see cref="P:MonoGame.Extended.Collections.Deque`1.Count" /> - 1</c> for the <paramref name="index" /> to get the
                    element at the end of the <see cref="T:MonoGame.Extended.Collections.Deque`1" />.
                </para>
            </remarks>
        </member>
        <member name="P:MonoGame.Extended.Collections.Deque`1.Count">
            <summary>
                Gets the number of elements contained in the <see cref="T:MonoGame.Extended.Collections.Deque`1" />.
            </summary>
            <returns>The number of elements contained in the <see cref="T:MonoGame.Extended.Collections.Deque`1" />.</returns>
        </member>
        <member name="M:MonoGame.Extended.Collections.Deque`1.GetEnumerator">
            <summary>
                Returns an enumerator that iterates through the <see cref="T:MonoGame.Extended.Collections.Deque`1" />.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the <see cref="T:MonoGame.Extended.Collections.Deque`1" />.</returns>
        </member>
        <member name="M:MonoGame.Extended.Collections.Deque`1.IndexOf(`0)">
            <summary>
                Searches for the specified element and returns the zero-based index of the first occurrence within the entire
                <see cref="T:MonoGame.Extended.Collections.Deque`1" />.
            </summary>
            <param name="item">
                The element to locate in the <see cref="T:MonoGame.Extended.Collections.Deque`1" />. The value can be <c>null</c> for reference
                types.
            </param>
            <returns>
                The zero-based index of the first occurrence of <paramref name="item" /> within the entire
                <see cref="T:MonoGame.Extended.Collections.Deque`1" />, if found; otherwise, <c>-1</c>.
            </returns>
            <remarks>
                <para>
                    This method is an O(1) operation if <paramref name="item" /> is at the front or back of the
                    <see cref="T:MonoGame.Extended.Collections.Deque`1" />; otherwise, this method is an O(n) operation where n is <see cref="P:MonoGame.Extended.Collections.Deque`1.Count" />.
                </para>
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Collections.Deque`1.Remove(`0)">
            <summary>
                Removes the first occurrence of a specific element from the <see cref="T:MonoGame.Extended.Collections.Deque`1" />.
            </summary>
            <param name="item">
                The element to remove from the <see cref="T:MonoGame.Extended.Collections.Deque`1" />. The value can be <c>null</c> for reference
                types.
            </param>
            <returns>
                <c>true</c> if <paramref name="item" /> was successfully removed; otherwise, false. This method also returns false
                if <paramref name="item" /> is not found in the <see cref="T:MonoGame.Extended.Collections.Deque`1" />.
            </returns>
            <remarks>
                <para>
                    This method is an O(1) operation if <paramref name="item" /> is at the front or back of the
                    <see cref="T:MonoGame.Extended.Collections.Deque`1" />; otherwise, this method is an O(n) operation where n is <see cref="P:MonoGame.Extended.Collections.Deque`1.Count" />.
                </para>
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Collections.Deque`1.RemoveAt(System.Int32)">
            <summary>
                Removes the element at the specified index of the <see cref="T:MonoGame.Extended.Collections.Deque`1" />.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="index" /> is less than 0.</para>
                <para>-or-</para>
                <para><paramref name="index" /> is equal to or greater than <see cref="P:MonoGame.Extended.Collections.Deque`1.Count" />.</para>
            </exception>
        </member>
        <member name="M:MonoGame.Extended.Collections.Deque`1.Clear">
            <summary>
                Removes all elements from the <see cref="T:MonoGame.Extended.Collections.Deque`1" />.
            </summary>
            <remarks>
                <para>
                    <see cref="P:MonoGame.Extended.Collections.Deque`1.Count" /> is set to <c>0</c>, and references to other objects from elements of the collection are
                    also released.
                </para>
                <para>
                    <see cref="P:MonoGame.Extended.Collections.Deque`1.Capacity" /> remains unchanged. To reset the capacity of the <see cref="T:MonoGame.Extended.Collections.Deque`1" />, call the
                    <see cref="M:MonoGame.Extended.Collections.Deque`1.TrimExcess" /> method or set the <see cref="P:MonoGame.Extended.Collections.Deque`1.Capacity" /> property explictly. Decreasing, or
                    increasing, the capacity reallocates memory and copies all the elements in the <see cref="T:MonoGame.Extended.Collections.Deque`1" />.
                    Trimming an empty <see cref="T:MonoGame.Extended.Collections.Deque`1" /> sets <see cref="P:MonoGame.Extended.Collections.Deque`1.Capacity" /> to the default capacity.
                </para>
                <para>This method is an O(n) operation, where n is <see cref="P:MonoGame.Extended.Collections.Deque`1.Count" />.</para>
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Collections.Deque`1.Contains(`0)">
            <summary>
                Determines whether an element is in the <see cref="T:MonoGame.Extended.Collections.Deque`1" />.
            </summary>
            <param name="item">
                The element to locate in the <see cref="T:MonoGame.Extended.Collections.Deque`1" />. The value can be <c>null</c> for reference
                types.
            </param>
            <returns><c>true</c> if <paramref name="item" /> is found in the <see cref="T:MonoGame.Extended.Collections.Deque`1" />; otherwise, false.</returns>
            <remarks>
                <para>
                    This method determines equality by using the default equality comparer, as defined by the object's
                    implementation
                    of the <see cref="M:System.IEquatable`1.Equals(`0)" /> method for the type of values in the list.
                </para>
                <para>
                    This method performs a linear search; therefore, this method is an O(n) operation, where n is
                    <see cref="P:MonoGame.Extended.Collections.Deque`1.Count" />.
                </para>
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Collections.Deque`1.CopyTo(`0[],System.Int32)">
            <summary>
                Copies the entire <see cref="T:MonoGame.Extended.Collections.Deque`1" /> to a compatible one-dimensional array, starting at the specified index of
                the target array.
            </summary>
            <param name="array">
                The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from
                <see cref="T:MonoGame.Extended.Collections.Deque`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array" /> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex" /> is less than 0.</exception>
            <exception cref="T:System.ArgumentException">
                The number of elements in the source <see cref="T:MonoGame.Extended.Collections.Deque`1" /> is greater than the
                available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.
            </exception>
            <remarks>
                This method uses <see cref="M:System.Array.Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)" /> to copy the elements. The elements are
                copied to the <see cref="T:System.Array" /> in the same order in which the enumerator iterates
                through the <see cref="T:MonoGame.Extended.Collections.Deque`1" />. This method is an O(n) operation, where n is <see cref="P:MonoGame.Extended.Collections.Deque`1.Count" />.
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Collections.Deque`1.TrimExcess">
            <summary>
                Sets the capacity to the actual number of elements in the <see cref="T:MonoGame.Extended.Collections.Deque`1" />, if that number is less than a
                threshold value.
            </summary>
            <remarks>
                <para>
                    This method can be used to minimize the <see cref="T:MonoGame.Extended.Collections.Deque`1" />'s memory overhead if no new elements will be
                    added. The cost of reallocating and copying the elements of a <see cref="T:MonoGame.Extended.Collections.Deque`1" /> can be considerable.
                    However, the <see cref="M:MonoGame.Extended.Collections.Deque`1.TrimExcess" /> method does nothing if the <see cref="P:MonoGame.Extended.Collections.Deque`1.Count" /> is more than 90% of
                    <see cref="P:MonoGame.Extended.Collections.Deque`1.Capacity" />. This avoids incurring a large reallocation cost for a relatively small gain.
                </para>
                <para>
                    If <see cref="P:MonoGame.Extended.Collections.Deque`1.Count" /> is more than 90% of <see cref="P:MonoGame.Extended.Collections.Deque`1.Capacity" />, this method is an O(1) operation; O(n)
                    otherwise, where n is <see cref="P:MonoGame.Extended.Collections.Deque`1.Count" />.
                </para>
                <para>
                    To reset a <see cref="T:MonoGame.Extended.Collections.Deque`1" /> to its initial state, call the <see cref="M:MonoGame.Extended.Collections.Deque`1.Clear" /> method before calling
                    the <see cref="M:MonoGame.Extended.Collections.Deque`1.TrimExcess" /> method. Trimming an empty <see cref="T:MonoGame.Extended.Collections.Deque`1" /> sets <see cref="P:MonoGame.Extended.Collections.Deque`1.Capacity" /> to
                    the default capacity.
                </para>
                <para>The capacity can also be set using the <see cref="P:MonoGame.Extended.Collections.Deque`1.Capacity" /> property.</para>
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Collections.Deque`1.AddToFront(`0)">
            <summary>
                Adds an element to the beginning of the <see cref="T:MonoGame.Extended.Collections.Deque`1" />.
            </summary>
            <param name="item">The element to add to the <see cref="T:MonoGame.Extended.Collections.Deque`1" />. The value can be <c>null</c>.</param>
            <remarks>
                <para>
                    As elements are added to a <see cref="T:MonoGame.Extended.Collections.Deque`1" />, <see cref="P:MonoGame.Extended.Collections.Deque`1.Capacity" /> is automatically increased by
                    <see cref="P:MonoGame.Extended.Collections.Deque`1.ResizeFunction" /> as required by reallocating the internal circular array.
                </para>
                <para>
                    If <see cref="P:MonoGame.Extended.Collections.Deque`1.Count" /> is less than <see cref="P:MonoGame.Extended.Collections.Deque`1.Capacity" />, this method is an O(1) operation. Otherwise the
                    internal circular array needs to be resized to accommodate the new element and this method becomes an O(n)
                    operation, where n is <see cref="P:MonoGame.Extended.Collections.Deque`1.Count" />.
                </para>
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Collections.Deque`1.AddToBack(`0)">
            <summary>
                Adds an element to the end of the <see cref="T:MonoGame.Extended.Collections.Deque`1" />.
            </summary>
            <param name="item">The element to add to the <see cref="T:MonoGame.Extended.Collections.Deque`1" />. The value can be <c>null</c>.</param>
            <remarks>
                <para>
                    As elements are added to a <see cref="T:MonoGame.Extended.Collections.Deque`1" />, <see cref="P:MonoGame.Extended.Collections.Deque`1.Capacity" /> is automatically increased by
                    <see cref="P:MonoGame.Extended.Collections.Deque`1.ResizeFunction" /> as required by reallocating the internal circular array.
                </para>
                <para>
                    If <see cref="P:MonoGame.Extended.Collections.Deque`1.Count" /> is less than <see cref="P:MonoGame.Extended.Collections.Deque`1.Capacity" />, this method is an O(1) operation. Otherwise the
                    internal circular array needs to be resized to accommodate the new element and this method becomes an O(n)
                    operation, where n is <see cref="P:MonoGame.Extended.Collections.Deque`1.Count" />.
                </para>
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Collections.Deque`1.Get(System.Int32,`0@)">
            <summary>
                Returns the element at the specified index of the <see cref="T:MonoGame.Extended.Collections.Deque`1" />.
            </summary>
            <param name="index">The zero-based index of the element to get.</param>
            <param name="item">
                When this method returns, contains the element at the specified index of the
                <see cref="T:MonoGame.Extended.Collections.Deque`1" />, if <paramref name="index" /> was non-negative and less than <see cref="P:MonoGame.Extended.Collections.Deque`1.Count" />;
                otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.
            </param>
            <returns>
                <c>true</c> if <paramref name="item" /> was successfully retrieved at <paramref name="index" /> from the of the
                <see cref="T:MonoGame.Extended.Collections.Deque`1" />;
                otherwise, <c>false</c> if <paramref name="index" /> was non-negative and less than <see cref="P:MonoGame.Extended.Collections.Deque`1.Count" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Collections.Deque`1.GetFront(`0@)">
            <summary>
                Returns the element at the beginning of the <see cref="T:MonoGame.Extended.Collections.Deque`1" />.
            </summary>
            <param name="item">
                When this method returns, contains the element at the beginning of the <see cref="T:MonoGame.Extended.Collections.Deque`1" />, if
                <see cref="T:MonoGame.Extended.Collections.Deque`1" /> was not empty; otherwise, the default value for the type of the value parameter. This
                parameter is passed uninitialized.
            </param>
            <returns>
                <c>true</c> if <paramref name="item" /> was successfully from the beginning of the <see cref="T:MonoGame.Extended.Collections.Deque`1" />;
                otherwise, <c>false</c> if the <see cref="T:MonoGame.Extended.Collections.Deque`1" /> is empty.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Collections.Deque`1.GetBack(`0@)">
            <summary>
                Returns the element at the end of the <see cref="T:MonoGame.Extended.Collections.Deque`1" />.
            </summary>
            <param name="item">
                When this method returns, contains the element at the end of the <see cref="T:MonoGame.Extended.Collections.Deque`1" />, if
                <see cref="T:MonoGame.Extended.Collections.Deque`1" /> was not empty; otherwise, the default value for the type of the value parameter. This
                parameter is passed uninitialized.
            </param>
            <returns>
                <c>true</c> if <paramref name="item" /> was successfully from the end of the <see cref="T:MonoGame.Extended.Collections.Deque`1" />;
                otherwise, <c>false</c> if the <see cref="T:MonoGame.Extended.Collections.Deque`1" /> is empty.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Collections.Deque`1.RemoveFromFront(`0@)">
            <summary>
                Removes the element at the beginning of the <see cref="T:MonoGame.Extended.Collections.Deque`1" />.
            </summary>
            <param name="item">
                When this method returns, contains the element removed from the beginning of the
                <see cref="T:MonoGame.Extended.Collections.Deque`1" />, if the <see cref="T:MonoGame.Extended.Collections.Deque`1" /> was not empty; otherwise, the default value for the type of
                the value parameter. This parameter is passed uninitialized.
            </param>
            <returns>
                <c>true</c> if <paramref name="item" /> was successfully removed from the beginning of the <see cref="T:MonoGame.Extended.Collections.Deque`1" />;
                otherwise, <c>false</c> if the <see cref="T:MonoGame.Extended.Collections.Deque`1" /> is empty.
            </returns>
            <remarks>
                <para>
                    This method is similar to the <see cref="M:MonoGame.Extended.Collections.Deque`1.GetFront(`0@)" /> method, but <see cref="M:MonoGame.Extended.Collections.Deque`1.GetFront(`0@)" /> does not
                    modify the <see cref="T:MonoGame.Extended.Collections.Deque`1" />.
                </para>
                <para>
                    <c>null</c> can be added to the <see cref="T:MonoGame.Extended.Collections.Deque`1" /> as a value. To distinguish between a null value and
                    the end of the <see cref="T:MonoGame.Extended.Collections.Deque`1" />, check whether the return value of <see cref="M:MonoGame.Extended.Collections.Deque`1.RemoveFromFront(`0@)" />
                    is
                    <c>false</c> or
                    <see cref="P:MonoGame.Extended.Collections.Deque`1.Count" /> is <c>0</c>.
                </para>
                <para>
                    This method is an O(1) operation.
                </para>
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Collections.Deque`1.RemoveFromFront">
            <summary>
                Removes the element at the beginning of the <see cref="T:MonoGame.Extended.Collections.Deque`1" />.
            </summary>
            <returns>
                <c>true</c> if the element was successfully removed from the beginning of the <see cref="T:MonoGame.Extended.Collections.Deque`1" />;
                otherwise, <c>false</c> if the <see cref="T:MonoGame.Extended.Collections.Deque`1" /> is empty.
            </returns>
            <remarks>
                <para>
                    This method is similar to the <see cref="M:MonoGame.Extended.Collections.Deque`1.GetFront(`0@)" /> method, but <see cref="M:MonoGame.Extended.Collections.Deque`1.GetFront(`0@)" /> does not
                    modify the <see cref="T:MonoGame.Extended.Collections.Deque`1" />.
                </para>
                <para>
                    <c>null</c> can be added to the <see cref="T:MonoGame.Extended.Collections.Deque`1" /> as a value. To distinguish between a null value and
                    the end of the <see cref="T:MonoGame.Extended.Collections.Deque`1" />, check whether the return value of <see cref="M:MonoGame.Extended.Collections.Deque`1.RemoveFromFront" /> is
                    <c>false</c> or
                    <see cref="P:MonoGame.Extended.Collections.Deque`1.Count" /> is <c>0</c>.
                </para>
                <para>
                    This method is an O(1) operation.
                </para>
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Collections.Deque`1.RemoveFromBack(`0@)">
            <summary>
                Removes the element at the end of the <see cref="T:MonoGame.Extended.Collections.Deque`1" />.
            </summary>
            <param name="item">
                When this method returns, contains the element removed from the end of the
                <see cref="T:MonoGame.Extended.Collections.Deque`1" />, if the <see cref="T:MonoGame.Extended.Collections.Deque`1" /> was not empty; otherwise, the default value for the type of
                the value parameter. This parameter is passed uninitialized.
            </param>
            <returns>
                <c>true</c> if <paramref name="item" /> was successfully removed from the end of the <see cref="T:MonoGame.Extended.Collections.Deque`1" />;
                otherwise, <c>false</c> if the <see cref="T:MonoGame.Extended.Collections.Deque`1" /> is empty.
            </returns>
            <remarks>
                <para>
                    This method is similar to the <see cref="M:MonoGame.Extended.Collections.Deque`1.GetBack(`0@)" /> method, but <see cref="M:MonoGame.Extended.Collections.Deque`1.GetBack(`0@)" /> does not
                    modify the <see cref="T:MonoGame.Extended.Collections.Deque`1" />.
                </para>
                <para>
                    <c>null</c> can be added to the <see cref="T:MonoGame.Extended.Collections.Deque`1" /> as a value. To distinguish between a null value and
                    the end of the <see cref="T:MonoGame.Extended.Collections.Deque`1" />, check whether the return value of <see cref="M:MonoGame.Extended.Collections.Deque`1.RemoveFromBack(`0@)" />
                    is
                    <c>false</c> or
                    <see cref="P:MonoGame.Extended.Collections.Deque`1.Count" /> is <c>0</c>.
                </para>
                <para>
                    This method is an O(1) operation.
                </para>
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Collections.Deque`1.RemoveFromBack">
            <summary>
                Removes the element at the end of the <see cref="T:MonoGame.Extended.Collections.Deque`1" />.
            </summary>
            <returns>
                <c>true</c> if the element was successfully removed from the end of the <see cref="T:MonoGame.Extended.Collections.Deque`1" />;
                otherwise, <c>false</c> if the <see cref="T:MonoGame.Extended.Collections.Deque`1" /> is empty.
            </returns>
            <remarks>
                <para>
                    This method is similar to the <see cref="M:MonoGame.Extended.Collections.Deque`1.GetBack(`0@)" /> method, but <see cref="M:MonoGame.Extended.Collections.Deque`1.GetBack(`0@)" /> does not
                    modify the <see cref="T:MonoGame.Extended.Collections.Deque`1" />.
                </para>
                <para>
                    <c>null</c> can be added to the <see cref="T:MonoGame.Extended.Collections.Deque`1" /> as a value. To distinguish between a null value and
                    the end of the <see cref="T:MonoGame.Extended.Collections.Deque`1" />, check whether the return value of <see cref="M:MonoGame.Extended.Collections.Deque`1.RemoveFromBack" /> is
                    <c>false</c> or
                    <see cref="P:MonoGame.Extended.Collections.Deque`1.Count" /> is <c>0</c>.
                </para>
                <para>
                    This method is an O(1) operation.
                </para>
            </remarks>
        </member>
        <member name="T:MonoGame.Extended.Collections.IObservableCollection`1">
            <summary>Interface for collections that can be observed</summary>
            <typeparam name="T">Type of items managed in the collection</typeparam>
        </member>
        <member name="E:MonoGame.Extended.Collections.IObservableCollection`1.ItemAdded">
            <summary>Raised when an item has been added to the collection</summary>
        </member>
        <member name="E:MonoGame.Extended.Collections.IObservableCollection`1.ItemRemoved">
            <summary>Raised when an item is removed from the collection</summary>
        </member>
        <member name="E:MonoGame.Extended.Collections.IObservableCollection`1.Clearing">
            <summary>Raised when the collection is about to be cleared</summary>
            <remarks>
                This could be covered by calling ItemRemoved for each item currently
                contained in the collection, but it is often simpler and more efficient
                to process the clearing of the entire collection as a special operation.
            </remarks>
        </member>
        <member name="E:MonoGame.Extended.Collections.IObservableCollection`1.Cleared">
            <summary>Raised when the collection has been cleared of its items</summary>
        </member>
        <member name="T:MonoGame.Extended.Collections.ItemEventArgs`1">
            <summary>
                Arguments class for collections wanting to hand over an item in an event
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Collections.ItemEventArgs`1.#ctor(`0)">
            <summary>Initializes a new event arguments supplier</summary>
            <param name="item">Item to be supplied to the event handler</param>
        </member>
        <member name="P:MonoGame.Extended.Collections.ItemEventArgs`1.Item">
            <summary>Obtains the collection item the event arguments are carrying</summary>
        </member>
        <member name="M:MonoGame.Extended.Collections.ObservableCollection`1.#ctor">
            <summary>
                Initializes a new instance of the ObservableCollection class that is empty.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Collections.ObservableCollection`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
                Initializes a new instance of the ObservableCollection class as a wrapper
                for the specified list.
            </summary>
            <param name="list">The list that is wrapped by the new collection.</param>
            <exception cref="T:System.ArgumentNullException">
                List is null.
            </exception>
        </member>
        <member name="E:MonoGame.Extended.Collections.ObservableCollection`1.ItemAdded">
            <summary>Raised when an item has been added to the collection</summary>
        </member>
        <member name="E:MonoGame.Extended.Collections.ObservableCollection`1.ItemRemoved">
            <summary>Raised when an item is removed from the collection</summary>
        </member>
        <member name="E:MonoGame.Extended.Collections.ObservableCollection`1.Clearing">
            <summary>Raised when the collection is about to be cleared</summary>
            <remarks>
                This could be covered by calling ItemRemoved for each item currently
                contained in the collection, but it is often simpler and more efficient
                to process the clearing of the entire collection as a special operation.
            </remarks>
        </member>
        <member name="E:MonoGame.Extended.Collections.ObservableCollection`1.Cleared">
            <summary>Raised when the collection has been cleared</summary>
        </member>
        <member name="M:MonoGame.Extended.Collections.ObservableCollection`1.ClearItems">
            <summary>Removes all elements from the Collection</summary>
        </member>
        <member name="M:MonoGame.Extended.Collections.ObservableCollection`1.InsertItem(System.Int32,`0)">
            <summary>
                Inserts an element into the ObservableCollection at the specified index
            </summary>
            <param name="index">
                The object to insert. The value can be null for reference types.
            </param>
            <param name="item">The zero-based index at which item should be inserted</param>
        </member>
        <member name="M:MonoGame.Extended.Collections.ObservableCollection`1.RemoveItem(System.Int32)">
            <summary>
                Removes the element at the specified index of the ObservableCollection
            </summary>
            <param name="index">The zero-based index of the element to remove</param>
        </member>
        <member name="M:MonoGame.Extended.Collections.ObservableCollection`1.SetItem(System.Int32,`0)">
            <summary>Replaces the element at the specified index</summary>
            <param name="index">
                The new value for the element at the specified index. The value can be null
                for reference types
            </param>
            <param name="item">The zero-based index of the element to replace</param>
        </member>
        <member name="M:MonoGame.Extended.Collections.ObservableCollection`1.OnAdded(`0)">
            <summary>Fires the 'ItemAdded' event</summary>
            <param name="item">Item that has been added to the collection</param>
        </member>
        <member name="M:MonoGame.Extended.Collections.ObservableCollection`1.OnRemoved(`0)">
            <summary>Fires the 'ItemRemoved' event</summary>
            <param name="item">Item that has been removed from the collection</param>
        </member>
        <member name="M:MonoGame.Extended.Collections.ObservableCollection`1.OnClearing">
            <summary>Fires the 'Clearing' event</summary>
        </member>
        <member name="M:MonoGame.Extended.Collections.ObservableCollection`1.OnCleared">
            <summary>Fires the 'Cleared' event</summary>
        </member>
        <member name="T:MonoGame.Extended.ColorExtensions">
            <summary>
            Provides additional methods for working with color
            </summary>
        </member>
        <member name="T:MonoGame.Extended.HslColor">
            <summary>
                An immutable data structure representing a 24bit color composed of separate hue, saturation and lightness channels.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.HslColor.H">
            <summary>
                Gets the value of the hue channel in degrees.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.HslColor.S">
            <summary>
                Gets the value of the saturation channel.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.HslColor.L">
            <summary>
                Gets the value of the lightness channel.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.HslColor.#ctor(System.Single,System.Single,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:MonoGame.Extended.HslColor" /> structure.
            </summary>
            <param name="h">The value of the hue channel.</param>
            <param name="s">The value of the saturation channel.</param>
            <param name="l">The value of the lightness channel.</param>
        </member>
        <member name="M:MonoGame.Extended.HslColor.CopyTo(MonoGame.Extended.HslColor@)">
            <summary>
                Copies the individual channels of the color to the specified memory location.
            </summary>
            <param name="destination">The memory location to copy the axis to.</param>
        </member>
        <member name="M:MonoGame.Extended.HslColor.Destructure(System.Single@,System.Single@,System.Single@)">
            <summary>
                Destructures the color, exposing the individual channels.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.HslColor.Match(System.Action{System.Single,System.Single,System.Single})">
            <summary>
                Exposes the individual channels of the color to the specified matching function.
            </summary>
            <param name="callback">The function which matches the individual channels of the color.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if the value passed to the <paramref name="callback" /> parameter is <c>null</c>.
            </exception>
        </member>
        <member name="M:MonoGame.Extended.HslColor.Map``1(System.Func{System.Single,System.Single,System.Single,``0})">
            <summary>
                Exposes the individual channels of the color to the specified mapping function and returns the
                result;
            </summary>
            <typeparam name="T">The type being mapped to.</typeparam>
            <param name="map">
                A function which maps the color channels to an instance of <typeparamref name="T" />.
            </param>
            <returns>
                The result of the <paramref name="map" /> function when passed the individual X and Y components.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if the value passed to the <paramref name="map" /> parameter is <c>null</c>.
            </exception>
        </member>
        <member name="M:MonoGame.Extended.HslColor.Equals(System.Object)">
            <summary>
                Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.HslColor.Equals(MonoGame.Extended.HslColor)">
            <summary>
                Determines whether the specified <see cref="T:MonoGame.Extended.HslColor" /> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:MonoGame.Extended.HslColor" /> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:MonoGame.Extended.HslColor" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.HslColor.GetHashCode">
            <summary>
                Returns a hash code for this instance.
            </summary>
            <returns>
                A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.HslColor.ToString">
            <summary>
                Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
                A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.HslColor.op_Equality(MonoGame.Extended.HslColor,MonoGame.Extended.HslColor)">
            <summary>
                Implements the operator ==.
            </summary>
            <param name="x">The lvalue.</param>
            <param name="y">The rvalue.</param>
            <returns>
                <c>true</c> if the lvalue <see cref="T:MonoGame.Extended.HslColor" /> is equal to the rvalue; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.HslColor.op_Inequality(MonoGame.Extended.HslColor,MonoGame.Extended.HslColor)">
            <summary>
                Implements the operator !=.
            </summary>
            <param name="x">The lvalue.</param>
            <param name="y">The rvalue.</param>
            <returns>
                <c>true</c> if the lvalue <see cref="T:MonoGame.Extended.HslColor" /> is not equal to the rvalue; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:MonoGame.Extended.Point3">
            <summary>
                A three-dimensional point defined by a 3-tuple of real numbers, (x, y, z).
            </summary>
            <remarks>
                <para>
                    A point is a position in three-dimensional space, the location of which is described in terms of a
                    three-dimensional coordinate system, given by a reference point, called the origin, and three coordinate axes.
                </para>
                <para>
                    A common three-dimensional coordinate system is the Cartesian (or rectangular) coordinate system where the
                    coordinate axes, conventionally denoted the X axis, Y axis and Z axis, are perpindicular to each other.
                </para>
            </remarks>
            <seealso cref="T:System.IEquatable`1" />
            <seealso cref="T:MonoGame.Extended.IEquatableByRef`1" />
        </member>
        <member name="F:MonoGame.Extended.Point3.Zero">
            <summary>
                Returns a <see cref="T:MonoGame.Extended.Point3" /> with <see cref="F:MonoGame.Extended.Point3.X" /> <see cref="F:MonoGame.Extended.Point3.Y" /> and <see cref="F:MonoGame.Extended.Point3.Z" /> equal to <c>0.0f</c>.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Point3.NaN">
            <summary>
                Returns a <see cref="T:MonoGame.Extended.Point3" /> with <see cref="F:MonoGame.Extended.Point3.X" /> <see cref="F:MonoGame.Extended.Point3.Y" />  and <see cref="F:MonoGame.Extended.Point3.Z" /> set to not a number.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Point3.X">
            <summary>
                The x-coordinate of this <see cref="T:MonoGame.Extended.Point3" />.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Point3.Y">
            <summary>
                The y-coordinate of this <see cref="T:MonoGame.Extended.Point3" />.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Point3.Z">
            <summary>
                The z-coordinate of this <see cref="T:MonoGame.Extended.Point3" />.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Point3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:MonoGame.Extended.Point3" /> structure from the specified coordinates.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <param name="z">The z-coordinate.</param>
        </member>
        <member name="M:MonoGame.Extended.Point3.op_Equality(MonoGame.Extended.Point3,MonoGame.Extended.Point3)">
            <summary>
                Compares two <see cref="T:MonoGame.Extended.Point3" /> structures. The result specifies
                whether the values of the <see cref="F:MonoGame.Extended.Point3.X" /> <see cref="F:MonoGame.Extended.Point3.Y" /> and <see cref="F:MonoGame.Extended.Point3.Z" />
                fields of the two <see cref="T:MonoGame.Extended.Point3" />
                structures are equal.
            </summary>
            <param name="first">The first point.</param>
            <param name="second">The second point.</param>
            <returns>
                <c>true</c> if the <see cref="F:MonoGame.Extended.Point3.X" /> <see cref="F:MonoGame.Extended.Point3.Y" /> and <see cref="F:MonoGame.Extended.Point3.Z" />
                fields of the two <see cref="T:MonoGame.Extended.Point3" />
                structures are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Point3.Equals(MonoGame.Extended.Point3)">
            <summary>
                Indicates whether this <see cref="T:MonoGame.Extended.Point3" /> is equal to another <see cref="T:MonoGame.Extended.Point3" />.
            </summary>
            <param name="point">The point.</param>
            <returns>
                <c>true</c> if this <see cref="T:MonoGame.Extended.Point3" /> is equal to the <paramref name="point" />; otherwise,
                <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Point3.Equals(MonoGame.Extended.Point3@)">
            <summary>
                Indicates whether this <see cref="T:MonoGame.Extended.Point3" /> is equal to another <see cref="T:MonoGame.Extended.Point3" />.
            </summary>
            <param name="point">The point.</param>
            <returns>
                <c>true</c> if this <see cref="T:MonoGame.Extended.Point3" /> is equal to the <paramref name="point" /> parameter; otherwise,
                <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Point3.Equals(System.Object)">
            <summary>
                Returns a value indicating whether this <see cref="T:MonoGame.Extended.Point3" /> is equal to a specified object.
            </summary>
            <param name="obj">The object to make the comparison with.</param>
            <returns>
                <c>true</c> if this  <see cref="T:MonoGame.Extended.Point3" /> is equal to <paramref name="obj" />; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Point3.op_Inequality(MonoGame.Extended.Point3,MonoGame.Extended.Point3)">
            <summary>
                Compares two <see cref="T:MonoGame.Extended.Point3" /> structures. The result specifies
                whether the values of the <see cref="F:MonoGame.Extended.Point3.X" /> <see cref="F:MonoGame.Extended.Point3.Y" /> or <see cref="F:MonoGame.Extended.Point3.Z" />
                fields of the two <see cref="T:MonoGame.Extended.Point3" />
                structures are unequal.
            </summary>
            <param name="first">The first point.</param>
            <param name="second">The second point.</param>
            <returns>
                <c>true</c> if the <see cref="F:MonoGame.Extended.Point3.X" /> <see cref="F:MonoGame.Extended.Point3.Y" /> or <see cref="F:MonoGame.Extended.Point3.Z" />
                fields of the two <see cref="T:MonoGame.Extended.Point3" />
                structures are unequal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Point3.op_Addition(MonoGame.Extended.Point3,Microsoft.Xna.Framework.Vector3)">
            <summary>
                Calculates the <see cref="T:MonoGame.Extended.Point3" /> representing the addition of a <see cref="T:MonoGame.Extended.Point3" /> and a
                <see cref="T:Microsoft.Xna.Framework.Vector2" />.
            </summary>
            <param name="point">The point.</param>
            <param name="vector">The vector.</param>
            <returns>
                The <see cref="T:MonoGame.Extended.Point3" /> representing the addition of a <see cref="T:MonoGame.Extended.Point3" /> and a <see cref="T:Microsoft.Xna.Framework.Vector3" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Point3.Add(MonoGame.Extended.Point3,Microsoft.Xna.Framework.Vector3)">
            <summary>
                Calculates the <see cref="T:MonoGame.Extended.Point3" /> representing the addition of a <see cref="T:MonoGame.Extended.Point3" /> and a
                <see cref="T:Microsoft.Xna.Framework.Vector3" />.
            </summary>
            <param name="point">The point.</param>
            <param name="vector">The vector.</param>
            <returns>
                The <see cref="T:MonoGame.Extended.Point3" /> representing the addition of a <see cref="T:MonoGame.Extended.Point3" /> and a <see cref="T:Microsoft.Xna.Framework.Vector3" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Point3.op_Subtraction(MonoGame.Extended.Point3,Microsoft.Xna.Framework.Vector3)">
            <summary>
                Calculates the <see cref="T:MonoGame.Extended.Point3" /> representing the subtraction of a <see cref="T:MonoGame.Extended.Point3" /> and a
                <see cref="T:Microsoft.Xna.Framework.Vector3" />.
            </summary>
            <param name="point">The point.</param>
            <param name="vector">The vector.</param>
            <returns>
                The <see cref="T:MonoGame.Extended.Point3" /> representing the substraction of a <see cref="T:MonoGame.Extended.Point3" /> and a <see cref="T:Microsoft.Xna.Framework.Vector3" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Point3.Subtract(MonoGame.Extended.Point3,Microsoft.Xna.Framework.Vector3)">
            <summary>
                Calculates the <see cref="T:MonoGame.Extended.Point3" /> representing the addition of a <see cref="T:MonoGame.Extended.Point3" /> and a
                <see cref="T:Microsoft.Xna.Framework.Vector3" />.
            </summary>
            <param name="point">The point.</param>
            <param name="vector">The vector.</param>
            <returns>
                The <see cref="T:MonoGame.Extended.Point3" /> representing the substraction of a <see cref="T:MonoGame.Extended.Point3" /> and a <see cref="T:Microsoft.Xna.Framework.Vector3" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Point3.op_Subtraction(MonoGame.Extended.Point3,MonoGame.Extended.Point3)">
            <summary>
                Calculates the <see cref="T:Microsoft.Xna.Framework.Vector3" /> representing the displacement of two <see cref="T:MonoGame.Extended.Point3" /> structures.
            </summary>
            <param name="point2">The second point.</param>
            <param name="point1">The first point.</param>
            <returns>
                The <see cref="T:Microsoft.Xna.Framework.Vector3" /> representing the displacement of two <see cref="T:MonoGame.Extended.Point3" /> structures.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Point3.Displacement(MonoGame.Extended.Point3,MonoGame.Extended.Point3)">
            <summary>
                Calculates the <see cref="T:Microsoft.Xna.Framework.Vector3" /> representing the displacement of two <see cref="T:MonoGame.Extended.Point3" /> structures.
            </summary>
            <param name="point2">The second point.</param>
            <param name="point1">The first point.</param>
            <returns>
                The <see cref="T:Microsoft.Xna.Framework.Vector3" /> representing the displacement of two <see cref="T:MonoGame.Extended.Point3" /> structures.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Point3.op_Addition(MonoGame.Extended.Point3,MonoGame.Extended.Size3)">
            <summary>
                Translates a <see cref='T:MonoGame.Extended.Point3' /> by a given <see cref='T:MonoGame.Extended.Size3' />.
            </summary>
            <param name="point">The point.</param>
            <param name="size">The size.</param>
            <returns>
                The result of the operator.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Point3.Add(MonoGame.Extended.Point3,MonoGame.Extended.Size3)">
            <summary>
                Translates a <see cref='T:MonoGame.Extended.Point3' /> by a given <see cref='T:MonoGame.Extended.Size3' />.
            </summary>
            <param name="point">The point.</param>
            <param name="size">The size.</param>
            <returns>
                The result of the operator.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Point3.op_Subtraction(MonoGame.Extended.Point3,MonoGame.Extended.Size3)">
            <summary>
                Translates a <see cref='T:MonoGame.Extended.Point3' /> by the negative of a given <see cref='T:MonoGame.Extended.Size3' />.
            </summary>
            <param name="point">The point.</param>
            <param name="size">The size.</param>
            <returns>
                The result of the operator.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Point3.Subtract(MonoGame.Extended.Point3,MonoGame.Extended.Size3)">
            <summary>
                Translates a <see cref='T:MonoGame.Extended.Point3' /> by the negative of a given <see cref='T:MonoGame.Extended.Size3' /> .
            </summary>
            <param name="point">The point.</param>
            <param name="size">The size.</param>
            <returns>
                The result of the operator.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Point3.GetHashCode">
            <summary>
                Returns a hash code of this <see cref="T:MonoGame.Extended.Point3" /> suitable for use in hashing algorithms and data
                structures like a hash table.
            </summary>
            <returns>
                A hash code of this <see cref="T:MonoGame.Extended.Point3" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Point3.Minimum(MonoGame.Extended.Point3,MonoGame.Extended.Point3)">
            <summary>
                Calculates the <see cref="T:MonoGame.Extended.Point3" /> that contains the minimal coordinate values from two <see cref="T:MonoGame.Extended.Point3" />
                structures.
                structures.
            </summary>
            <param name="first">The first point.</param>
            <param name="second">The second point.</param>
            <returns>
                The the <see cref="T:MonoGame.Extended.Point3" /> that contains the minimal coordinate values from two <see cref="T:MonoGame.Extended.Point3" />
                structures.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Point3.Maximum(MonoGame.Extended.Point3,MonoGame.Extended.Point3)">
            <summary>
                Calculates the <see cref="T:MonoGame.Extended.Point3" /> that contains the maximal coordinate values from two <see cref="T:MonoGame.Extended.Point3" />
                structures.
                structures.
            </summary>
            <param name="first">The first point.</param>
            <param name="second">The second point.</param>
            <returns>
                The the <see cref="T:MonoGame.Extended.Point3" /> that contains the maximal coordinate values from two <see cref="T:MonoGame.Extended.Point3" />
                structures.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Point3.op_Implicit(MonoGame.Extended.Point3)~Microsoft.Xna.Framework.Vector3">
            <summary>
                Performs an implicit conversion from a <see cref="T:MonoGame.Extended.Point3" /> to a position <see cref="T:Microsoft.Xna.Framework.Vector3" />.
            </summary>
            <param name="point">The point.</param>
            <returns>
                The resulting <see cref="T:Microsoft.Xna.Framework.Vector3" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Point3.op_Implicit(Microsoft.Xna.Framework.Vector3)~MonoGame.Extended.Point3">
            <summary>
                Performs an implicit conversion from a <see cref="T:Microsoft.Xna.Framework.Vector3" /> to a position <see cref="T:MonoGame.Extended.Point3" />.
            </summary>
            <param name="vector">The vector.</param>
            <returns>
                The resulting <see cref="T:MonoGame.Extended.Point3" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Point3.ToString">
            <summary>
                Returns a <see cref="T:System.String" /> that represents this <see cref="T:MonoGame.Extended.Point3" />.
            </summary>
            <returns>
                A <see cref="T:System.String" /> that represents this <see cref="T:MonoGame.Extended.Point3" />.
            </returns>
        </member>
        <member name="T:MonoGame.Extended.Serialization.ContentManagerJsonConverter`1">
            <summary>
            Loads content from a JSON file into the <see cref="T:Microsoft.Xna.Framework.Content.ContentManager"/> using the asset name
            </summary>
            <typeparam name="T">The type of content to load</typeparam>
        </member>
        <member name="T:MonoGame.Extended.Size3">
            <summary>
                A three dimensional size defined by two real numbers, a width a height and a depth.
            </summary>
            <remarks>
                <para>
                    A size is a subspace of three-dimensional space, the area of which is described in terms of a three-dimensional
                    coordinate system, given by a reference point and three coordinate axes.
                </para>
            </remarks>
            <seealso cref="T:System.IEquatable`1" />
            <seealso cref="T:MonoGame.Extended.IEquatableByRef`1" />
        </member>
        <member name="F:MonoGame.Extended.Size3.Empty">
            <summary>
                Returns a <see cref="T:MonoGame.Extended.Size3" /> with <see cref="F:MonoGame.Extended.Size3.Width" />  <see cref="F:MonoGame.Extended.Size3.Height" /> and <see cref="F:MonoGame.Extended.Size3.Depth" /> equal to <c>0.0f</c>.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Size3.Width">
            <summary>
                The horizontal component of this <see cref="T:MonoGame.Extended.Size3" />.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Size3.Height">
            <summary>
                The vertical component of this <see cref="T:MonoGame.Extended.Size3" />.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Size3.Depth">
            <summary>
                The vertical component of this <see cref="T:MonoGame.Extended.Size3" />.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Size3.IsEmpty">
            <summary>
                Gets a value that indicates whether this <see cref="T:MonoGame.Extended.Size3" /> is empty.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Size3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:MonoGame.Extended.Size3" /> structure from the specified dimensions.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="depth">The depth.</param>
        </member>
        <member name="M:MonoGame.Extended.Size3.op_Equality(MonoGame.Extended.Size3,MonoGame.Extended.Size3)">
            <summary>
                Compares two <see cref="T:MonoGame.Extended.Size3" /> structures. The result specifies
                whether the values of the <see cref="F:MonoGame.Extended.Size3.Width" /> <see cref="F:MonoGame.Extended.Size3.Height" /> and <see cref="F:MonoGame.Extended.Size3.Depth" />
                fields of the two <see cref="T:MonoGame.Extended.Point3" /> structures are equal.
            </summary>
            <param name="first">The first size.</param>
            <param name="second">The second size.</param>
            <returns>
                <c>true</c> if the <see cref="F:MonoGame.Extended.Size3.Width" /> <see cref="F:MonoGame.Extended.Size3.Height" /> and <see cref="F:MonoGame.Extended.Size3.Depth" />
                fields of the two <see cref="T:MonoGame.Extended.Point3" /> structures are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Size3.Equals(MonoGame.Extended.Size3)">
            <summary>
                Indicates whether this <see cref="T:MonoGame.Extended.Size3" /> is equal to another <see cref="T:MonoGame.Extended.Size3" />.
            </summary>
            <param name="size">The size.</param>
            <returns>
                <c>true</c> if this <see cref="T:MonoGame.Extended.Point3" /> is equal to the <paramref name="size" /> parameter; otherwise,
                <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Size3.Equals(MonoGame.Extended.Size3@)">
            <summary>
                Indicates whether this <see cref="T:MonoGame.Extended.Size3" /> is equal to another <see cref="T:MonoGame.Extended.Size3" />.
            </summary>
            <param name="size">The size.</param>
            <returns>
                <c>true</c> if this <see cref="T:MonoGame.Extended.Point3" /> is equal to the <paramref name="size" />; otherwise,
                <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Size3.Equals(System.Object)">
            <summary>
                Returns a value indicating whether this <see cref="T:MonoGame.Extended.Size3" /> is equal to a specified object.
            </summary>
            <param name="obj">The object to make the comparison with.</param>
            <returns>
                <c>true</c> if this  <see cref="T:MonoGame.Extended.Size3" /> is equal to <paramref name="obj" />; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Size3.op_Inequality(MonoGame.Extended.Size3,MonoGame.Extended.Size3)">
            <summary>
                Compares two <see cref="T:MonoGame.Extended.Size3" /> structures. The result specifies
                whether the values of the <see cref="F:MonoGame.Extended.Size3.Width" /> <see cref="F:MonoGame.Extended.Size3.Height" /> or <see cref="F:MonoGame.Extended.Size3.Depth" />
                fields of the two <see cref="T:MonoGame.Extended.Size3" /> structures are unequal.
            </summary>
            <param name="first">The first size.</param>
            <param name="second">The second size.</param>
            <returns>
                <c>true</c> if the <see cref="F:MonoGame.Extended.Size3.Width" /> <see cref="F:MonoGame.Extended.Size3.Height" /> or <see cref="F:MonoGame.Extended.Size3.Depth" />
                fields of the two <see cref="T:MonoGame.Extended.Size3" /> structures are unequal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Size3.op_Addition(MonoGame.Extended.Size3,MonoGame.Extended.Size3)">
            <summary>
                Calculates the <see cref="T:MonoGame.Extended.Size3" /> representing the vector addition of two <see cref="T:MonoGame.Extended.Size3" /> structures as if
                they were <see cref="T:Microsoft.Xna.Framework.Vector3" /> structures.
            </summary>
            <param name="first">The first size.</param>
            <param name="second">The second size.</param>
            <returns>
                The <see cref="T:MonoGame.Extended.Size3" /> representing the vector addition of two <see cref="T:MonoGame.Extended.Size3" /> structures as if they
                were <see cref="T:Microsoft.Xna.Framework.Vector3" /> structures.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Size3.Add(MonoGame.Extended.Size3,MonoGame.Extended.Size3)">
            <summary>
                Calculates the <see cref="T:MonoGame.Extended.Size3" /> representing the vector addition of two <see cref="T:MonoGame.Extended.Size3" /> structures.
            </summary>
            <param name="first">The first size.</param>
            <param name="second">The second size.</param>
            <returns>
                The <see cref="T:MonoGame.Extended.Size3" /> representing the vector addition of two <see cref="T:MonoGame.Extended.Size3" /> structures.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Size3.op_Subtraction(MonoGame.Extended.Size3,MonoGame.Extended.Size3)">
            <summary>
            Calculates the <see cref="T:MonoGame.Extended.Size3" /> representing the vector subtraction of two <see cref="T:MonoGame.Extended.Size3" /> structures.
            </summary>
            <param name="first">The first size.</param>
            <param name="second">The second size.</param>
            <returns>
                The <see cref="T:MonoGame.Extended.Size3" /> representing the vector subtraction of two <see cref="T:MonoGame.Extended.Size3" /> structures.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Size3.Subtract(MonoGame.Extended.Size3,MonoGame.Extended.Size3)">
            <summary>
                Calculates the <see cref="T:MonoGame.Extended.Size3" /> representing the vector subtraction of two <see cref="T:MonoGame.Extended.Size3" /> structures.
            </summary>
            <param name="first">The first size.</param>
            <param name="second">The second size.</param>
            <returns>
                The <see cref="T:MonoGame.Extended.Size3" /> representing the vector subtraction of two <see cref="T:MonoGame.Extended.Size3" /> structures.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Size3.GetHashCode">
            <summary>
                Returns a hash code of this <see cref="T:MonoGame.Extended.Size3" /> suitable for use in hashing algorithms and data
                structures like a hash table.
            </summary>
            <returns>
                A hash code of this <see cref="T:MonoGame.Extended.Point3" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Size3.op_Implicit(MonoGame.Extended.Point3)~MonoGame.Extended.Size3">
            <summary>
                Performs an implicit conversion from a <see cref="T:MonoGame.Extended.Point3" /> to a <see cref="T:MonoGame.Extended.Size3" />.
            </summary>
            <param name="point">The point.</param>
            <returns>
                The resulting <see cref="T:MonoGame.Extended.Size3" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Size3.op_Implicit(MonoGame.Extended.Size3)~MonoGame.Extended.Point3">
            <summary>
                Performs an implicit conversion from a <see cref="T:MonoGame.Extended.Point3" /> to a <see cref="T:MonoGame.Extended.Size3" />.
            </summary>
            <param name="size">The size.</param>
            <returns>
                The resulting <see cref="T:MonoGame.Extended.Point3" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Size3.op_Implicit(MonoGame.Extended.Size3)~Microsoft.Xna.Framework.Vector3">
            <summary>
                Performs an implicit conversion from a <see cref="T:MonoGame.Extended.Size3" /> to a <see cref="T:Microsoft.Xna.Framework.Vector3" />.
            </summary>
            <param name="size">The size.</param>
            <returns>
                The resulting <see cref="T:Microsoft.Xna.Framework.Vector3" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Size3.op_Implicit(Microsoft.Xna.Framework.Vector3)~MonoGame.Extended.Size3">
            <summary>
                Performs an implicit conversion from a <see cref="T:Microsoft.Xna.Framework.Vector3" /> to a <see cref="T:MonoGame.Extended.Size3" />.
            </summary>
            <param name="vector">The vector.</param>
            <returns>
                The resulting <see cref="T:MonoGame.Extended.Size3" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Size3.ToString">
            <summary>
                Returns a <see cref="T:System.String" /> that represents this <see cref="T:MonoGame.Extended.Size3" />.
            </summary>
            <returns>
                A <see cref="T:System.String" /> that represents this <see cref="T:MonoGame.Extended.Size3" />.
            </returns>
        </member>
        <member name="T:MonoGame.Extended.BoundingRectangle">
            <summary>
                An axis-aligned, four sided, two dimensional box defined by a centre <see cref="T:MonoGame.Extended.Point2" /> and a radii
                <see cref="T:Microsoft.Xna.Framework.Vector2" />.
            </summary>
            <remarks>
                <para>
                    An <see cref="T:MonoGame.Extended.BoundingRectangle" /> is categorized by having its faces oriented in such a way that its
                    face normals are at all times parallel with the axes of the given coordinate system.
                </para>
                <para>
                    The <see cref="T:MonoGame.Extended.BoundingRectangle" /> of a rotated <see cref="T:MonoGame.Extended.BoundingRectangle" /> will be equivalent or larger
                    in size
                    than the original depending on the angle of rotation.
                </para>
            </remarks>
            <seealso cref="T:System.IEquatable`1" />
            <seealso cref="T:MonoGame.Extended.IEquatableByRef`1" />
        </member>
        <member name="F:MonoGame.Extended.BoundingRectangle.Empty">
            <summary>
                The <see cref="T:MonoGame.Extended.BoundingRectangle" /> with <see cref="F:MonoGame.Extended.BoundingRectangle.Center" /> <see cref="F:MonoGame.Extended.Point2.Zero"/> and
                <see cref="F:MonoGame.Extended.BoundingRectangle.HalfExtents" /> set to <see cref="P:Microsoft.Xna.Framework.Vector2.Zero"/>.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.BoundingRectangle.Center">
            <summary>
                The centre position of this <see cref="T:MonoGame.Extended.BoundingRectangle" />.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.BoundingRectangle.HalfExtents">
            <summary>
                The distance from the <see cref="F:MonoGame.Extended.BoundingRectangle.Center" /> point along both axes to any point on the boundary of this
                <see cref="T:MonoGame.Extended.BoundingRectangle" />.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.BoundingRectangle.#ctor(MonoGame.Extended.Point2,MonoGame.Extended.Size2)">
            <summary>
                Initializes a new instance of the <see cref="T:MonoGame.Extended.BoundingRectangle" /> structure from the specified centre
                <see cref="T:MonoGame.Extended.Point2" /> and the radii <see cref="T:MonoGame.Extended.Size2" />.
            </summary>
            <param name="center">The centre <see cref="T:MonoGame.Extended.Point2" />.</param>
            <param name="halfExtents">The radii <see cref="T:Microsoft.Xna.Framework.Vector2" />.</param>
        </member>
        <member name="M:MonoGame.Extended.BoundingRectangle.CreateFrom(MonoGame.Extended.Point2,MonoGame.Extended.Point2,MonoGame.Extended.BoundingRectangle@)">
            <summary>
                Computes the <see cref="T:MonoGame.Extended.BoundingRectangle" /> from a minimum <see cref="T:MonoGame.Extended.Point2" /> and maximum
                <see cref="T:MonoGame.Extended.Point2" />.
            </summary>
            <param name="minimum">The minimum point.</param>
            <param name="maximum">The maximum point.</param>
            <param name="result">The resulting bounding rectangle.</param>
        </member>
        <member name="M:MonoGame.Extended.BoundingRectangle.CreateFrom(MonoGame.Extended.Point2,MonoGame.Extended.Point2)">
            <summary>
                Computes the <see cref="T:MonoGame.Extended.BoundingRectangle" /> from a minimum <see cref="T:MonoGame.Extended.Point2" /> and maximum
                <see cref="T:MonoGame.Extended.Point2" />.
            </summary>
            <param name="minimum">The minimum point.</param>
            <param name="maximum">The maximum point.</param>
            <returns>The resulting <see cref="T:MonoGame.Extended.BoundingRectangle" />.</returns>
        </member>
        <member name="M:MonoGame.Extended.BoundingRectangle.CreateFrom(System.Collections.Generic.IReadOnlyList{MonoGame.Extended.Point2},MonoGame.Extended.BoundingRectangle@)">
            <summary>
                Computes the <see cref="T:MonoGame.Extended.BoundingRectangle" /> from a list of <see cref="T:MonoGame.Extended.Point2" /> structures.
            </summary>
            <param name="points">The points.</param>
            <param name="result">The resulting bounding rectangle.</param>
        </member>
        <member name="M:MonoGame.Extended.BoundingRectangle.CreateFrom(System.Collections.Generic.IReadOnlyList{MonoGame.Extended.Point2})">
            <summary>
                Computes the <see cref="T:MonoGame.Extended.BoundingRectangle" /> from a list of <see cref="T:MonoGame.Extended.Point2" /> structures.
            </summary>
            <param name="points">The points.</param>
            <returns>The resulting <see cref="T:MonoGame.Extended.BoundingRectangle" />.</returns>
        </member>
        <member name="M:MonoGame.Extended.BoundingRectangle.Transform(MonoGame.Extended.BoundingRectangle@,MonoGame.Extended.Matrix2D@,MonoGame.Extended.BoundingRectangle@)">
            <summary>
                Computes the <see cref="T:MonoGame.Extended.BoundingRectangle" /> from the specified <see cref="T:MonoGame.Extended.BoundingRectangle" /> transformed by
                the
                specified <see cref="T:MonoGame.Extended.Matrix2D" />.
            </summary>
            <param name="boundingRectangle">The bounding rectangle.</param>
            <param name="transformMatrix">The transform matrix.</param>
            <param name="result">The resulting bounding rectangle.</param>
            <returns>
                The <see cref="T:MonoGame.Extended.BoundingRectangle" /> from the <paramref name="boundingRectangle" /> transformed by the
                <paramref name="transformMatrix" />.
            </returns>
            <remarks>
                <para>
                    If a transformed <see cref="T:MonoGame.Extended.BoundingRectangle" /> is used for <paramref name="boundingRectangle" /> then the
                    resulting <see cref="T:MonoGame.Extended.BoundingRectangle" /> will have the compounded transformation, which most likely is
                    not desired.
                </para>
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.BoundingRectangle.Transform(MonoGame.Extended.BoundingRectangle,MonoGame.Extended.Matrix2D@)">
            <summary>
                Computes the <see cref="T:MonoGame.Extended.BoundingRectangle" /> from the specified <see cref="T:MonoGame.Extended.BoundingRectangle" /> transformed by
                the
                specified <see cref="T:MonoGame.Extended.Matrix2D" />.
            </summary>
            <param name="boundingRectangle">The bounding rectangle.</param>
            <param name="transformMatrix">The transform matrix.</param>
            <returns>
                The <see cref="T:MonoGame.Extended.BoundingRectangle" /> from the <paramref name="boundingRectangle" /> transformed by the
                <paramref name="transformMatrix" />.
            </returns>
            <remarks>
                <para>
                    If a transformed <see cref="T:MonoGame.Extended.BoundingRectangle" /> is used for <paramref name="boundingRectangle" /> then the
                    resulting <see cref="T:MonoGame.Extended.BoundingRectangle" /> will have the compounded transformation, which most likely is
                    not desired.
                </para>
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.BoundingRectangle.Union(MonoGame.Extended.BoundingRectangle@,MonoGame.Extended.BoundingRectangle@,MonoGame.Extended.BoundingRectangle@)">
            <summary>
                Computes the <see cref="T:MonoGame.Extended.BoundingRectangle" /> that contains the two specified
                <see cref="T:MonoGame.Extended.BoundingRectangle" /> structures.
            </summary>
            <param name="first">The first bounding rectangle.</param>
            <param name="second">The second bounding rectangle.</param>
            <param name="result">The resulting bounding rectangle that contains both the <paramref name="first" /> and the
                <paramref name="second" />.</param>
        </member>
        <member name="M:MonoGame.Extended.BoundingRectangle.Union(MonoGame.Extended.BoundingRectangle,MonoGame.Extended.BoundingRectangle)">
            <summary>
                Computes the <see cref="T:MonoGame.Extended.BoundingRectangle" /> that contains the two specified
                <see cref="T:MonoGame.Extended.BoundingRectangle" /> structures.
            </summary>
            <param name="first">The first bounding rectangle.</param>
            <param name="second">The second bounding rectangle.</param>
            <returns>
                A <see cref="T:MonoGame.Extended.BoundingRectangle" /> that contains both the <paramref name="first" /> and the
                <paramref name="second" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.BoundingRectangle.Union(MonoGame.Extended.BoundingRectangle)">
            <summary>
                Computes the <see cref="T:MonoGame.Extended.BoundingRectangle" /> that contains both the specified
                <see cref="T:MonoGame.Extended.BoundingRectangle" /> and this <see cref="T:MonoGame.Extended.BoundingRectangle" />.
            </summary>
            <param name="boundingRectangle">The bounding rectangle.</param>
            <returns>
                A <see cref="T:MonoGame.Extended.BoundingRectangle" /> that contains both the <paramref name="boundingRectangle" /> and
                this
                <see cref="T:MonoGame.Extended.BoundingRectangle" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.BoundingRectangle.Intersection(MonoGame.Extended.BoundingRectangle@,MonoGame.Extended.BoundingRectangle@,MonoGame.Extended.BoundingRectangle@)">
            <summary>
                Computes the <see cref="T:MonoGame.Extended.BoundingRectangle" /> that is in common between the two specified
                <see cref="T:MonoGame.Extended.BoundingRectangle" /> structures.
            </summary>
            <param name="first">The first bounding rectangle.</param>
            <param name="second">The second bounding rectangle.</param>
            <param name="result">The resulting bounding rectangle that is in common between both the <paramref name="first" /> and
                the <paramref name="second" />, if they intersect; otherwise, <see cref="F:MonoGame.Extended.BoundingRectangle.Empty"/>.</param>
        </member>
        <member name="M:MonoGame.Extended.BoundingRectangle.Intersection(MonoGame.Extended.BoundingRectangle,MonoGame.Extended.BoundingRectangle)">
            <summary>
                Computes the <see cref="T:MonoGame.Extended.BoundingRectangle" /> that is in common between the two specified
                <see cref="T:MonoGame.Extended.BoundingRectangle" /> structures.
            </summary>
            <param name="first">The first bounding rectangle.</param>
            <param name="second">The second bounding rectangle.</param>
            <returns>
                A <see cref="T:MonoGame.Extended.BoundingRectangle" /> that is in common between both the <paramref name="first" /> and
                the <paramref name="second" />, if they intersect; otherwise, <see cref="F:MonoGame.Extended.BoundingRectangle.Empty"/>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.BoundingRectangle.Intersection(MonoGame.Extended.BoundingRectangle)">
            <summary>
                Computes the <see cref="T:MonoGame.Extended.BoundingRectangle" /> that is in common between the specified
                <see cref="T:MonoGame.Extended.BoundingRectangle" /> and this <see cref="T:MonoGame.Extended.BoundingRectangle" />.
            </summary>
            <param name="boundingRectangle">The bounding rectangle.</param>
            <returns>
                A <see cref="T:MonoGame.Extended.BoundingRectangle" /> that is in common between both the <paramref name="boundingRectangle" /> and
                this <see cref="T:MonoGame.Extended.BoundingRectangle"/>, if they intersect; otherwise, <see cref="F:MonoGame.Extended.BoundingRectangle.Empty"/>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.BoundingRectangle.Intersects(MonoGame.Extended.BoundingRectangle@,MonoGame.Extended.BoundingRectangle@)">
            <summary>
                Determines whether the two specified <see cref="T:MonoGame.Extended.BoundingRectangle" /> structures intersect.
            </summary>
            <param name="first">The first bounding rectangle.</param>
            <param name="second">The second bounding rectangle.</param>
            <returns>
                <c>true</c> if the <paramref name="first" /> intersects with the <see cref="!:second" />; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.BoundingRectangle.Intersects(MonoGame.Extended.BoundingRectangle,MonoGame.Extended.BoundingRectangle)">
            <summary>
                Determines whether the two specified <see cref="T:MonoGame.Extended.BoundingRectangle" /> structures intersect.
            </summary>
            <param name="first">The first bounding rectangle.</param>
            <param name="second">The second bounding rectangle.</param>
            <returns>
                <c>true</c> if the <paramref name="first" /> intersects with the <see cref="!:second" />; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.BoundingRectangle.Intersects(MonoGame.Extended.BoundingRectangle@)">
            <summary>
                Determines whether the specified <see cref="T:MonoGame.Extended.BoundingRectangle" /> intersects with this
                <see cref="T:MonoGame.Extended.BoundingRectangle" />.
            </summary>
            <param name="boundingRectangle">The bounding rectangle.</param>
            <returns>
                <c>true</c> if the <paramref name="boundingRectangle" /> intersects with this
                <see cref="T:MonoGame.Extended.BoundingRectangle" />; otherwise,
                <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.BoundingRectangle.Intersects(MonoGame.Extended.BoundingRectangle)">
            <summary>
                Determines whether the specified <see cref="T:MonoGame.Extended.BoundingRectangle" /> intersects with this
                <see cref="T:MonoGame.Extended.BoundingRectangle" />.
            </summary>
            <param name="boundingRectangle">The bounding rectangle.</param>
            <returns>
                <c>true</c> if the <paramref name="boundingRectangle" /> intersects with this
                <see cref="T:MonoGame.Extended.BoundingRectangle" />; otherwise,
                <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.BoundingRectangle.UpdateFromPoints(System.Collections.Generic.IReadOnlyList{MonoGame.Extended.Point2})">
            <summary>
                Updates this <see cref="T:MonoGame.Extended.BoundingRectangle" /> from a list of <see cref="T:MonoGame.Extended.Point2" /> structures.
            </summary>
            <param name="points">The points.</param>
        </member>
        <member name="M:MonoGame.Extended.BoundingRectangle.Contains(MonoGame.Extended.BoundingRectangle@,MonoGame.Extended.Point2@)">
            <summary>
                Determines whether the specified <see cref="T:MonoGame.Extended.BoundingRectangle" /> contains the specified
                <see cref="T:MonoGame.Extended.Point2" />.
            </summary>
            <param name="boundingRectangle">The bounding rectangle.</param>
            <param name="point">The point.</param>
            <returns>
                <c>true</c> if the <paramref name="boundingRectangle" /> contains the <paramref name="point" />; otherwise,
                <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.BoundingRectangle.Contains(MonoGame.Extended.BoundingRectangle,MonoGame.Extended.Point2)">
            <summary>
                Determines whether the specified <see cref="T:MonoGame.Extended.BoundingRectangle" /> contains the specified
                <see cref="T:MonoGame.Extended.Point2" />.
            </summary>
            <param name="boundingRectangle">The bounding rectangle.</param>
            <param name="point">The point.</param>
            <returns>
                <c>true</c> if the <paramref name="boundingRectangle" /> contains the <paramref name="point" />; otherwise,
                <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.BoundingRectangle.Contains(MonoGame.Extended.Point2)">
            <summary>
                Determines whether this <see cref="T:MonoGame.Extended.BoundingRectangle" /> contains the specified <see cref="T:MonoGame.Extended.Point2" />.
            </summary>
            <param name="point">The point.</param>
            <returns>
                <c>true</c> if this <see cref="T:MonoGame.Extended.BoundingRectangle" /> contains the <paramref name="point" />; otherwise,
                <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.BoundingRectangle.SquaredDistanceTo(MonoGame.Extended.Point2)">
            <summary>
                Computes the squared distance from this <see cref="T:MonoGame.Extended.BoundingRectangle"/> to a <see cref="T:MonoGame.Extended.Point2"/>.
            </summary>
            <param name="point">The point.</param>
            <returns>The squared distance from this <see cref="T:MonoGame.Extended.BoundingRectangle"/> to the <paramref name="point"/>.</returns>
        </member>
        <member name="M:MonoGame.Extended.BoundingRectangle.ClosestPointTo(MonoGame.Extended.Point2)">
            <summary>
                Computes the closest <see cref="T:MonoGame.Extended.Point2" /> on this <see cref="T:MonoGame.Extended.BoundingRectangle" /> to a specified
                <see cref="T:MonoGame.Extended.Point2" />.
            </summary>
            <param name="point">The point.</param>
            <returns>The closest <see cref="T:MonoGame.Extended.Point2" /> on this <see cref="T:MonoGame.Extended.BoundingRectangle" /> to the <paramref name="point" />.</returns>
        </member>
        <member name="M:MonoGame.Extended.BoundingRectangle.op_Equality(MonoGame.Extended.BoundingRectangle,MonoGame.Extended.BoundingRectangle)">
            <summary>
                Compares two <see cref="T:MonoGame.Extended.BoundingRectangle" /> structures. The result specifies whether the values of the
                <see cref="F:MonoGame.Extended.BoundingRectangle.Center" /> and <see cref="F:MonoGame.Extended.BoundingRectangle.HalfExtents" /> fields of the two <see cref="T:MonoGame.Extended.BoundingRectangle" /> structures
                are equal.
            </summary>
            <param name="first">The first bounding rectangle.</param>
            <param name="second">The second bounding rectangle.</param>
            <returns>
                <c>true</c> if the <see cref="F:MonoGame.Extended.BoundingRectangle.Center" /> and <see cref="F:MonoGame.Extended.BoundingRectangle.HalfExtents" /> fields of the two
                <see cref="T:MonoGame.Extended.BoundingRectangle" /> structures are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.BoundingRectangle.op_Inequality(MonoGame.Extended.BoundingRectangle,MonoGame.Extended.BoundingRectangle)">
            <summary>
                Compares two <see cref="T:MonoGame.Extended.BoundingRectangle" /> structures. The result specifies whether the values of the
                <see cref="F:MonoGame.Extended.BoundingRectangle.Center" /> and <see cref="F:MonoGame.Extended.BoundingRectangle.HalfExtents" /> fields of the two <see cref="T:MonoGame.Extended.BoundingRectangle" /> structures
                are unequal.
            </summary>
            <param name="first">The first bounding rectangle.</param>
            <param name="second">The second bounding rectangle.</param>
            <returns>
                <c>true</c> if the <see cref="F:MonoGame.Extended.BoundingRectangle.Center" /> and <see cref="F:MonoGame.Extended.BoundingRectangle.HalfExtents" /> fields of the two
                <see cref="T:MonoGame.Extended.BoundingRectangle" /> structures are unequal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.BoundingRectangle.Equals(MonoGame.Extended.BoundingRectangle)">
            <summary>
                Indicates whether this <see cref="T:MonoGame.Extended.BoundingRectangle" /> is equal to another
                <see cref="T:MonoGame.Extended.BoundingRectangle" />.
            </summary>
            <param name="boundingRectangle">The bounding rectangle.</param>
            <returns>
                <c>true</c> if this <see cref="T:MonoGame.Extended.BoundingRectangle" /> is equal to the <paramref name="boundingRectangle" />;
                otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.BoundingRectangle.Equals(MonoGame.Extended.BoundingRectangle@)">
            <summary>
                Indicates whether this <see cref="T:MonoGame.Extended.BoundingRectangle" /> is equal to another <see cref="T:MonoGame.Extended.BoundingRectangle" />.
            </summary>
            <param name="boundingRectangle">The bounding rectangle.</param>
            <returns>
                <c>true</c> if this <see cref="T:MonoGame.Extended.BoundingRectangle" /> is equal to the <paramref name="boundingRectangle" />;
                otherwise,
                <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.BoundingRectangle.Equals(System.Object)">
            <summary>
                Returns a value indicating whether this <see cref="T:MonoGame.Extended.BoundingRectangle" /> is equal to a specified object.
            </summary>
            <param name="obj">The object to make the comparison with.</param>
            <returns>
                <c>true</c> if this  <see cref="T:MonoGame.Extended.BoundingRectangle" /> is equal to <paramref name="obj" />; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.BoundingRectangle.GetHashCode">
            <summary>
                Returns a hash code of this <see cref="T:MonoGame.Extended.BoundingRectangle" /> suitable for use in hashing algorithms and data
                structures like a hash table.
            </summary>
            <returns>
                A hash code of this <see cref="T:MonoGame.Extended.BoundingRectangle" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.BoundingRectangle.op_Implicit(Microsoft.Xna.Framework.Rectangle)~MonoGame.Extended.BoundingRectangle">
            <summary>
                Performs an implicit conversion from a <see cref="T:Microsoft.Xna.Framework.Rectangle" /> to a <see cref="T:MonoGame.Extended.BoundingRectangle" />.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <returns>
                The resulting <see cref="T:MonoGame.Extended.BoundingRectangle" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.BoundingRectangle.op_Implicit(MonoGame.Extended.BoundingRectangle)~Microsoft.Xna.Framework.Rectangle">
            <summary>
                Performs an implicit conversion from a <see cref="T:MonoGame.Extended.BoundingRectangle" /> to a <see cref="T:Microsoft.Xna.Framework.Rectangle" />.
            </summary>
            <param name="boundingRectangle">The bounding rectangle.</param>
            <returns>
                The resulting <see cref="T:Microsoft.Xna.Framework.Rectangle" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.BoundingRectangle.op_Implicit(MonoGame.Extended.RectangleF)~MonoGame.Extended.BoundingRectangle">
            <summary>
                Performs an implicit conversion from a <see cref="T:MonoGame.Extended.RectangleF" /> to a <see cref="T:MonoGame.Extended.BoundingRectangle" />.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <returns>
                The resulting <see cref="T:MonoGame.Extended.BoundingRectangle" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.BoundingRectangle.op_Implicit(MonoGame.Extended.BoundingRectangle)~MonoGame.Extended.RectangleF">
            <summary>
                Performs an implicit conversion from a <see cref="T:MonoGame.Extended.BoundingRectangle" /> to a <see cref="T:MonoGame.Extended.RectangleF" />.
            </summary>
            <param name="boundingRectangle">The bounding rectangle.</param>
            <returns>
                The resulting <see cref="T:Microsoft.Xna.Framework.Rectangle" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.BoundingRectangle.ToString">
            <summary>
                Returns a <see cref="T:System.String" /> that represents this <see cref="T:MonoGame.Extended.BoundingRectangle" />.
            </summary>
            <returns>
                A <see cref="T:System.String" /> that represents this <see cref="T:MonoGame.Extended.BoundingRectangle" />.
            </returns>
        </member>
        <member name="T:MonoGame.Extended.Point2">
            <summary>
                A two-dimensional point defined by a 2-tuple of real numbers, (x, y).
            </summary>
            <remarks>
                <para>
                    A point is a position in two-dimensional space, the location of which is described in terms of a
                    two-dimensional coordinate system, given by a reference point, called the origin, and two coordinate axes.
                </para>
                <para>
                    A common two-dimensional coordinate system is the Cartesian (or rectangular) coordinate system where the
                    coordinate axes, conventionally denoted the X axis and Y axis, are perpindicular to each other. For the
                    three-dimensional rectangular coordinate system, the third axis is called the Z axis.
                </para>
            </remarks>
            <seealso cref="T:System.IEquatable`1" />
            <seealso cref="T:MonoGame.Extended.IEquatableByRef`1" />
        </member>
        <member name="F:MonoGame.Extended.Point2.Zero">
            <summary>
                Returns a <see cref="T:MonoGame.Extended.Point2" /> with <see cref="F:MonoGame.Extended.Point2.X" /> and <see cref="F:MonoGame.Extended.Point2.Y" /> equal to <c>0.0f</c>.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Point2.NaN">
            <summary>
                Returns a <see cref="T:MonoGame.Extended.Point2" /> with <see cref="F:MonoGame.Extended.Point2.X" /> and <see cref="F:MonoGame.Extended.Point2.Y" /> set to not a number.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Point2.X">
            <summary>
                The x-coordinate of this <see cref="T:MonoGame.Extended.Point2" />.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Point2.Y">
            <summary>
                The y-coordinate of this <see cref="T:MonoGame.Extended.Point2" />.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Point2.#ctor(System.Single,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:MonoGame.Extended.Point2" /> structure from the specified coordinates.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
        </member>
        <member name="M:MonoGame.Extended.Point2.op_Equality(MonoGame.Extended.Point2,MonoGame.Extended.Point2)">
            <summary>
                Compares two <see cref="T:MonoGame.Extended.Point2" /> structures. The result specifies
                whether the values of the <see cref="F:MonoGame.Extended.Point2.X" /> and <see cref="F:MonoGame.Extended.Point2.Y" />
                fields of the two <see cref="T:MonoGame.Extended.Point2" />
                structures are equal.
            </summary>
            <param name="first">The first point.</param>
            <param name="second">The second point.</param>
            <returns>
                <c>true</c> if the <see cref="F:MonoGame.Extended.Point2.X" /> and <see cref="F:MonoGame.Extended.Point2.Y" />
                fields of the two <see cref="T:MonoGame.Extended.Point2" />
                structures are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Point2.Equals(MonoGame.Extended.Point2)">
            <summary>
                Indicates whether this <see cref="T:MonoGame.Extended.Point2" /> is equal to another <see cref="T:MonoGame.Extended.Point2" />.
            </summary>
            <param name="point">The point.</param>
            <returns>
                <c>true</c> if this <see cref="T:MonoGame.Extended.Point2" /> is equal to the <paramref name="point" />; otherwise,
                <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Point2.Equals(MonoGame.Extended.Point2@)">
            <summary>
                Indicates whether this <see cref="T:MonoGame.Extended.Point2" /> is equal to another <see cref="T:MonoGame.Extended.Point2" />.
            </summary>
            <param name="point">The point.</param>
            <returns>
                <c>true</c> if this <see cref="T:MonoGame.Extended.Point2" /> is equal to the <paramref name="point" /> parameter; otherwise,
                <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Point2.Equals(System.Object)">
            <summary>
                Returns a value indicating whether this <see cref="T:MonoGame.Extended.Point2" /> is equal to a specified object.
            </summary>
            <param name="obj">The object to make the comparison with.</param>
            <returns>
                <c>true</c> if this  <see cref="T:MonoGame.Extended.Point2" /> is equal to <paramref name="obj" />; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Point2.op_Inequality(MonoGame.Extended.Point2,MonoGame.Extended.Point2)">
            <summary>
                Compares two <see cref="T:MonoGame.Extended.Point2" /> structures. The result specifies
                whether the values of the <see cref="F:MonoGame.Extended.Point2.X" /> or <see cref="F:MonoGame.Extended.Point2.Y" />
                fields of the two <see cref="T:MonoGame.Extended.Point2" />
                structures are unequal.
            </summary>
            <param name="first">The first point.</param>
            <param name="second">The second point.</param>
            <returns>
                <c>true</c> if the <see cref="F:MonoGame.Extended.Point2.X" /> or <see cref="F:MonoGame.Extended.Point2.Y" />
                fields of the two <see cref="T:MonoGame.Extended.Point2" />
                structures are unequal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Point2.op_Addition(MonoGame.Extended.Point2,Microsoft.Xna.Framework.Vector2)">
            <summary>
                Calculates the <see cref="T:MonoGame.Extended.Point2" /> representing the addition of a <see cref="T:MonoGame.Extended.Point2" /> and a
                <see cref="T:Microsoft.Xna.Framework.Vector2" />.
            </summary>
            <param name="point">The point.</param>
            <param name="vector">The vector.</param>
            <returns>
                The <see cref="T:MonoGame.Extended.Point2" /> representing the addition of a <see cref="T:MonoGame.Extended.Point2" /> and a <see cref="T:Microsoft.Xna.Framework.Vector2" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Point2.Add(MonoGame.Extended.Point2,Microsoft.Xna.Framework.Vector2)">
            <summary>
                Calculates the <see cref="T:MonoGame.Extended.Point2" /> representing the addition of a <see cref="T:MonoGame.Extended.Point2" /> and a
                <see cref="T:Microsoft.Xna.Framework.Vector2" />.
            </summary>
            <param name="point">The point.</param>
            <param name="vector">The vector.</param>
            <returns>
                The <see cref="T:MonoGame.Extended.Point2" /> representing the addition of a <see cref="T:MonoGame.Extended.Point2" /> and a <see cref="T:Microsoft.Xna.Framework.Vector2" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Point2.op_Subtraction(MonoGame.Extended.Point2,Microsoft.Xna.Framework.Vector2)">
            <summary>
                Calculates the <see cref="T:MonoGame.Extended.Point2" /> representing the subtraction of a <see cref="T:MonoGame.Extended.Point2" /> and a
                <see cref="T:Microsoft.Xna.Framework.Vector2" />.
            </summary>
            <param name="point">The point.</param>
            <param name="vector">The vector.</param>
            <returns>
                The <see cref="T:MonoGame.Extended.Point2" /> representing the substraction of a <see cref="T:MonoGame.Extended.Point2" /> and a <see cref="T:Microsoft.Xna.Framework.Vector2" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Point2.Subtract(MonoGame.Extended.Point2,Microsoft.Xna.Framework.Vector2)">
            <summary>
                Calculates the <see cref="T:MonoGame.Extended.Point2" /> representing the addition of a <see cref="T:MonoGame.Extended.Point2" /> and a
                <see cref="T:Microsoft.Xna.Framework.Vector2" />.
            </summary>
            <param name="point">The point.</param>
            <param name="vector">The vector.</param>
            <returns>
                The <see cref="T:MonoGame.Extended.Point2" /> representing the substraction of a <see cref="T:MonoGame.Extended.Point2" /> and a <see cref="T:Microsoft.Xna.Framework.Vector2" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Point2.op_Subtraction(MonoGame.Extended.Point2,MonoGame.Extended.Point2)">
            <summary>
                Calculates the <see cref="T:Microsoft.Xna.Framework.Vector2" /> representing the displacement of two <see cref="T:MonoGame.Extended.Point2" /> structures.
            </summary>
            <param name="point2">The second point.</param>
            <param name="point1">The first point.</param>
            <returns>
                The <see cref="T:Microsoft.Xna.Framework.Vector2" /> representing the displacement of two <see cref="T:MonoGame.Extended.Point2" /> structures.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Point2.Displacement(MonoGame.Extended.Point2,MonoGame.Extended.Point2)">
            <summary>
                Calculates the <see cref="T:Microsoft.Xna.Framework.Vector2" /> representing the displacement of two <see cref="T:MonoGame.Extended.Point2" /> structures.
            </summary>
            <param name="point2">The second point.</param>
            <param name="point1">The first point.</param>
            <returns>
                The <see cref="T:Microsoft.Xna.Framework.Vector2" /> representing the displacement of two <see cref="T:MonoGame.Extended.Point2" /> structures.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Point2.op_Addition(MonoGame.Extended.Point2,MonoGame.Extended.Size2)">
            <summary>
                Translates a <see cref='T:MonoGame.Extended.Point2' /> by a given <see cref='T:MonoGame.Extended.Size2' />.
            </summary>
            <param name="point">The point.</param>
            <param name="size">The size.</param>
            <returns>
                The result of the operator.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Point2.Add(MonoGame.Extended.Point2,MonoGame.Extended.Size2)">
            <summary>
                Translates a <see cref='T:MonoGame.Extended.Point2' /> by a given <see cref='T:MonoGame.Extended.Size2' />.
            </summary>
            <param name="point">The point.</param>
            <param name="size">The size.</param>
            <returns>
                The result of the operator.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Point2.op_Subtraction(MonoGame.Extended.Point2,MonoGame.Extended.Size2)">
            <summary>
                Translates a <see cref='T:MonoGame.Extended.Point2' /> by the negative of a given <see cref='T:MonoGame.Extended.Size2' />.
            </summary>
            <param name="point">The point.</param>
            <param name="size">The size.</param>
            <returns>
                The result of the operator.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Point2.Subtract(MonoGame.Extended.Point2,MonoGame.Extended.Size2)">
            <summary>
                Translates a <see cref='T:MonoGame.Extended.Point2' /> by the negative of a given <see cref='T:MonoGame.Extended.Size2' /> .
            </summary>
            <param name="point">The point.</param>
            <param name="size">The size.</param>
            <returns>
                The result of the operator.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Point2.GetHashCode">
            <summary>
                Returns a hash code of this <see cref="T:MonoGame.Extended.Point2" /> suitable for use in hashing algorithms and data
                structures like a hash table.
            </summary>
            <returns>
                A hash code of this <see cref="T:MonoGame.Extended.Point2" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Point2.Minimum(MonoGame.Extended.Point2,MonoGame.Extended.Point2)">
            <summary>
                Calculates the <see cref="T:MonoGame.Extended.Point2" /> that contains the minimal coordinate values from two <see cref="T:MonoGame.Extended.Point2" />
                structures.
                structures.
            </summary>
            <param name="first">The first point.</param>
            <param name="second">The second point.</param>
            <returns>
                The the <see cref="T:MonoGame.Extended.Point2" /> that contains the minimal coordinate values from two <see cref="T:MonoGame.Extended.Point2" />
                structures.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Point2.Maximum(MonoGame.Extended.Point2,MonoGame.Extended.Point2)">
            <summary>
                Calculates the <see cref="T:MonoGame.Extended.Point2" /> that contains the maximal coordinate values from two <see cref="T:MonoGame.Extended.Point2" />
                structures.
                structures.
            </summary>
            <param name="first">The first point.</param>
            <param name="second">The second point.</param>
            <returns>
                The the <see cref="T:MonoGame.Extended.Point2" /> that contains the maximal coordinate values from two <see cref="T:MonoGame.Extended.Point2" />
                structures.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Point2.op_Implicit(MonoGame.Extended.Point2)~Microsoft.Xna.Framework.Vector2">
            <summary>
                Performs an implicit conversion from a <see cref="T:MonoGame.Extended.Point2" /> to a position <see cref="T:Microsoft.Xna.Framework.Vector2" />.
            </summary>
            <param name="point">The point.</param>
            <returns>
                The resulting <see cref="T:Microsoft.Xna.Framework.Vector2" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Point2.op_Implicit(Microsoft.Xna.Framework.Vector2)~MonoGame.Extended.Point2">
            <summary>
                Performs an implicit conversion from a <see cref="T:Microsoft.Xna.Framework.Vector2" /> to a position <see cref="T:MonoGame.Extended.Point2" />.
            </summary>
            <param name="vector">The vector.</param>
            <returns>
                The resulting <see cref="T:MonoGame.Extended.Point2" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Point2.op_Implicit(Microsoft.Xna.Framework.Point)~MonoGame.Extended.Point2">
            <summary>
                Performs an implicit conversion from a <see cref="T:Microsoft.Xna.Framework.Point" /> to a <see cref="T:MonoGame.Extended.Point2" />.
            </summary>
            <param name="point">The point.</param>
            <returns>
                The resulting <see cref="T:MonoGame.Extended.Point2" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Point2.ToString">
            <summary>
                Returns a <see cref="T:System.String" /> that represents this <see cref="T:MonoGame.Extended.Point2" />.
            </summary>
            <returns>
                A <see cref="T:System.String" /> that represents this <see cref="T:MonoGame.Extended.Point2" />.
            </returns>
        </member>
        <member name="T:MonoGame.Extended.Ray2D">
            <summary>
                A two dimensional ray defined by a starting <see cref="T:MonoGame.Extended.Point2" /> and a direction <see cref="T:Microsoft.Xna.Framework.Vector2" />.
            </summary>
            <seealso cref="T:System.IEquatable`1" />
            <seealso cref="T:MonoGame.Extended.IEquatableByRef`1" />
        </member>
        <member name="F:MonoGame.Extended.Ray2D.Position">
            <summary>
                The starting <see cref="T:MonoGame.Extended.Point2" /> of this <see cref="T:MonoGame.Extended.Ray2D" />.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Ray2D.Direction">
            <summary>
                The direction <see cref="T:Microsoft.Xna.Framework.Vector2" /> of this <see cref="T:MonoGame.Extended.Ray2D" />.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Ray2D.#ctor(MonoGame.Extended.Point2,Microsoft.Xna.Framework.Vector2)">
            <summary>
                Initializes a new instance of the <see cref="T:MonoGame.Extended.Ray2D" /> structure from the specified position and direction.
            </summary>
            <param name="position">The starting point.</param>
            <param name="direction">The direction vector.</param>
        </member>
        <member name="M:MonoGame.Extended.Ray2D.Intersects(MonoGame.Extended.BoundingRectangle,System.Single@,System.Single@)">
            <summary>
                Determines whether this <see cref="T:MonoGame.Extended.Ray2D" /> intersects with a specified <see cref="T:MonoGame.Extended.BoundingRectangle" />.
            </summary>
            <param name="boundingRectangle">The bounding rectangle.</param>
            <param name="rayNearDistance">
                When this method returns, contains the distance along the ray to the first intersection
                point with the <paramref name="boundingRectangle" />, if an intersection was found; otherwise,
                <see cref="F:System.Single.NaN" />.
                This parameter is passed uninitialized.
            </param>
            <param name="rayFarDistance">
                When this method returns, contains the distance along the ray to the second intersection
                point with the <paramref name="boundingRectangle" />, if an intersection was found; otherwise,
                <see cref="F:System.Single.NaN" />.
                This parameter is passed uninitialized.
            </param>
            <returns>
                <c>true</c> if this <see cref="T:MonoGame.Extended.Ray2D" /> intersects with <paramref name="boundingRectangle" />; otherwise,
                <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Ray2D.op_Equality(MonoGame.Extended.Ray2D,MonoGame.Extended.Ray2D)">
            <summary>
                Compares two <see cref="T:MonoGame.Extended.Ray2D" /> structures. The result specifies whether the values of the
                <see cref="F:MonoGame.Extended.Ray2D.Position" />
                and <see cref="F:MonoGame.Extended.Ray2D.Direction" /> fields of the two <see cref="T:MonoGame.Extended.Ray2D" /> structures are equal.
            </summary>
            <param name="first">The first ray.</param>
            <param name="second">The second ray.</param>
            <returns>
                <c>true</c> if the <see cref="F:MonoGame.Extended.Ray2D.Position" /> and <see cref="F:MonoGame.Extended.Ray2D.Direction" />
                fields of the two <see cref="T:MonoGame.Extended.Ray2D" />
                structures are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Ray2D.Equals(MonoGame.Extended.Ray2D)">
            <summary>
                Indicates whether this <see cref="T:MonoGame.Extended.Ray2D" /> is equal to another <see cref="T:MonoGame.Extended.Ray2D" />.
            </summary>
            <param name="ray">The ray.</param>
            <returns>
                <c>true</c> if this <see cref="T:MonoGame.Extended.Ray2D" /> is equal to the <paramref name="ray" /> parameter; otherwise,
                <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Ray2D.Equals(MonoGame.Extended.Ray2D@)">
            <summary>
                Indicates whether this <see cref="T:MonoGame.Extended.Ray2D" /> is equal to another <see cref="T:MonoGame.Extended.Ray2D" />.
            </summary>
            <param name="ray">The ray.</param>
            <returns>
                <c>true</c> if this <see cref="T:MonoGame.Extended.Ray2D" /> is equal to the <paramref name="ray" />; otherwise,
                <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Ray2D.Equals(System.Object)">
            <summary>
                Returns a value indicating whether this <see cref="T:MonoGame.Extended.Ray2D" /> is equal to a specified object.
            </summary>
            <param name="obj">The object to make the comparison with.</param>
            <returns>
                <c>true</c> if this  <see cref="T:MonoGame.Extended.Ray2D" /> is equal to <paramref name="obj" />; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Ray2D.op_Inequality(MonoGame.Extended.Ray2D,MonoGame.Extended.Ray2D)">
            <summary>
                Compares two <see cref="T:MonoGame.Extended.Ray2D" /> structures. The result specifies whether the values of the
                <see cref='F:MonoGame.Extended.Ray2D.Position' />
                and <see cref="F:MonoGame.Extended.Ray2D.Direction" /> fields of the two <see cref="T:MonoGame.Extended.Ray2D" /> structures are unequal.
            </summary>
            <param name="first">The first ray.</param>
            <param name="second">The second ray.</param>
            <returns>
                <c>true</c> if the <see cref="F:MonoGame.Extended.Ray2D.Position" /> and <see cref="F:MonoGame.Extended.Ray2D.Direction" />
                fields of the two <see cref="T:MonoGame.Extended.Ray2D" />
                structures are unequal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Ray2D.GetHashCode">
            <summary>
                Returns a hash code of this <see cref="T:MonoGame.Extended.Ray2D" /> suitable for use in hashing algorithms and data
                structures like a hash table.
            </summary>
            <returns>
                A hash code of this <see cref="T:MonoGame.Extended.Ray2D" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Ray2D.ToString">
            <summary>
                Returns a <see cref="T:System.String" /> that represents this <see cref="T:MonoGame.Extended.Ray2D" />.
            </summary>
            <returns>
                A <see cref="T:System.String" /> that represents this <see cref="T:MonoGame.Extended.Ray2D" />.
            </returns>
        </member>
        <member name="T:MonoGame.Extended.Segment2D">
            <summary>
                A two dimensional line segment defined by two <see cref="T:MonoGame.Extended.Point2" /> structures, a starting point and an ending
                point.
            </summary>
            <seealso cref="T:System.IEquatable`1" />
            <seealso cref="T:MonoGame.Extended.IEquatableByRef`1" />
        </member>
        <member name="F:MonoGame.Extended.Segment2D.Start">
            <summary>
                The starting <see cref="T:MonoGame.Extended.Point2" /> of this <see cref="T:MonoGame.Extended.Segment2D" />.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Segment2D.End">
            <summary>
                The ending <see cref="T:MonoGame.Extended.Point2" /> of this <see cref="T:MonoGame.Extended.Segment2D" />.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Segment2D.#ctor(MonoGame.Extended.Point2,MonoGame.Extended.Point2)">
            <summary>
                Initializes a new instance of the <see cref="T:MonoGame.Extended.Segment2D" /> structure from the specified starting and ending
                <see cref="T:MonoGame.Extended.Point2" /> structures.
            </summary>
            <param name="start">The starting point.</param>
            <param name="end">The ending point.</param>
        </member>
        <member name="M:MonoGame.Extended.Segment2D.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:MonoGame.Extended.Segment2D" /> structure.
            </summary>
            <param name="x1">The starting x-coordinate.</param>
            <param name="y1">The starting y-coordinate.</param>
            <param name="x2">The ending x-coordinate.</param>
            <param name="y2">The ending y-coordinate.</param>
        </member>
        <member name="M:MonoGame.Extended.Segment2D.ClosestPointTo(MonoGame.Extended.Point2)">
            <summary>
                Computes the closest <see cref="T:MonoGame.Extended.Point2" /> on this <see cref="T:MonoGame.Extended.Segment2D" /> to a specified <see cref="T:MonoGame.Extended.Point2" />.
            </summary>
            <param name="point">The point.</param>
            <returns>The closest <see cref="T:MonoGame.Extended.Point2" /> on this <see cref="T:MonoGame.Extended.Segment2D" /> to the <paramref name="point" />.</returns>
        </member>
        <member name="M:MonoGame.Extended.Segment2D.SquaredDistanceTo(MonoGame.Extended.Point2)">
            <summary>
                Computes the squared distance from this <see cref="T:MonoGame.Extended.Segment2D" /> to a specified <see cref="T:MonoGame.Extended.Point2" />.
            </summary>
            <param name="point">The point.</param>
            <returns>The squared distance from this <see cref="T:MonoGame.Extended.Segment2D" /> to a specified <see cref="T:MonoGame.Extended.Point2" />.</returns>
        </member>
        <member name="M:MonoGame.Extended.Segment2D.DistanceTo(MonoGame.Extended.Point2)">
            <summary>
                Computes the distance from this <see cref="T:MonoGame.Extended.Segment2D" /> to a specified <see cref="T:MonoGame.Extended.Point2" />.
            </summary>
            <param name="point">The point.</param>
            <returns>The distance from this <see cref="T:MonoGame.Extended.Segment2D" /> to a specified <see cref="T:MonoGame.Extended.Point2" />.</returns>
        </member>
        <member name="M:MonoGame.Extended.Segment2D.Intersects(MonoGame.Extended.RectangleF,MonoGame.Extended.Point2@)">
            <summary>
                Determines whether this <see cref="T:MonoGame.Extended.Segment2D" /> intersects with the specified <see cref="T:MonoGame.Extended.BoundingRectangle" />.
            </summary>
            <param name="rectangle">The bounding box.</param>
            <param name="intersectionPoint">
                When this method returns, contains the <see cref="T:MonoGame.Extended.Point2" /> of intersection, if an
                intersection was found; otherwise, the <see cref="F:MonoGame.Extended.Point2.NaN" />. This parameter is passed uninitialized.
            </param>
            <returns>
                <c>true</c> if this <see cref="T:MonoGame.Extended.Segment2D" /> intersects with <paramref name="rectangle" />; otherwise,
                <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Segment2D.Intersects(MonoGame.Extended.BoundingRectangle,MonoGame.Extended.Point2@)">
            <summary>
                Determines whether this <see cref="T:MonoGame.Extended.Segment2D" /> intersects with the specified <see cref="T:MonoGame.Extended.BoundingRectangle" />.
            </summary>
            <param name="boundingRectangle">The bounding box.</param>
            <param name="intersectionPoint">
                When this method returns, contains the <see cref="T:MonoGame.Extended.Point2" /> of intersection, if an
                intersection was found; otherwise, the <see cref="F:MonoGame.Extended.Point2.NaN" />. This parameter is passed uninitialized.
            </param>
            <returns>
                <c>true</c> if this <see cref="T:MonoGame.Extended.Segment2D" /> intersects with <paramref name="boundingRectangle" />; otherwise,
                <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Segment2D.op_Equality(MonoGame.Extended.Segment2D,MonoGame.Extended.Segment2D)">
            <summary>
                Compares two <see cref="T:MonoGame.Extended.Segment2D" /> structures. The result specifies
                whether the values of the <see cref="F:MonoGame.Extended.Segment2D.Start" /> and <see cref="F:MonoGame.Extended.Segment2D.End" />
                fields of the two <see cref='T:MonoGame.Extended.Segment2D' />
                structures are equal.
            </summary>
            <param name="first">The first segment.</param>
            <param name="second">The second segment.</param>
            <returns>
                <c>true</c> if the <see cref="F:MonoGame.Extended.Segment2D.Start" /> and <see cref="F:MonoGame.Extended.Segment2D.End" />
                fields of the two <see cref="T:MonoGame.Extended.Segment2D" />
                structures are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Segment2D.Equals(MonoGame.Extended.Segment2D)">
            <summary>
                Indicates whether this <see cref="T:MonoGame.Extended.Segment2D" /> is equal to another <see cref="T:MonoGame.Extended.Segment2D" />.
            </summary>
            <param name="segment">The segment.</param>
            <returns>
                <c>true</c> if this <see cref="T:MonoGame.Extended.Segment2D" /> is equal to the <paramref name="segment" />; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Segment2D.Equals(MonoGame.Extended.Segment2D@)">
            <summary>
                Indicates whether this <see cref="T:MonoGame.Extended.Segment2D" /> is equal to another <see cref="T:MonoGame.Extended.Segment2D" />.
            </summary>
            <param name="segment">The segment.</param>
            <returns>
                <c>true</c> if this <see cref="T:MonoGame.Extended.Segment2D" /> is equal to the <paramref name="segment" /> parameter; otherwise,
                <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Segment2D.Equals(System.Object)">
            <summary>
                Returns a value indicating whether this <see cref="T:MonoGame.Extended.Segment2D" /> is equal to a specified object.
            </summary>
            <param name="obj">The object to make the comparison with.</param>
            <returns>
                <c>true</c> if this  <see cref="T:MonoGame.Extended.Segment2D" /> is equal to <paramref name="obj" />; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Segment2D.op_Inequality(MonoGame.Extended.Segment2D,MonoGame.Extended.Segment2D)">
            <summary>
                Compares two <see cref="T:MonoGame.Extended.Segment2D" /> structures. The result specifies
                whether the values of the <see cref="F:MonoGame.Extended.Segment2D.Start" /> and <see cref="F:MonoGame.Extended.Segment2D.End" />
                fields of the two <see cref="T:MonoGame.Extended.Segment2D" />
                structures are unequal.
            </summary>
            <param name="first">The first point.</param>
            <param name="second">The second point.</param>
            <returns>
                <c>true</c> if the <see cref="F:MonoGame.Extended.Segment2D.Start" /> and <see cref="F:MonoGame.Extended.Segment2D.End" />
                fields of the two <see cref="T:MonoGame.Extended.Segment2D" />
                structures are unequal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Segment2D.GetHashCode">
            <summary>
                Returns a hash code of this <see cref="T:MonoGame.Extended.Segment2D" /> suitable for use in hashing algorithms and data
                structures like a hash table.
            </summary>
            <returns>
                A hash code of this <see cref="T:MonoGame.Extended.Segment2D" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Segment2D.ToString">
            <summary>
                Returns a <see cref="T:System.String" /> that represents this <see cref="T:MonoGame.Extended.Segment2D" />.
            </summary>
            <returns>
                A <see cref="T:System.String" /> that represents this <see cref="T:MonoGame.Extended.Segment2D" />.
            </returns>
        </member>
        <member name="T:MonoGame.Extended.Size2">
            <summary>
                A two dimensional size defined by two real numbers, a width and a height.
            </summary>
            <remarks>
                <para>
                    A size is a subspace of two-dimensional space, the area of which is described in terms of a two-dimensional
                    coordinate system, given by a reference point and two coordinate axes.
                </para>
            </remarks>
            <seealso cref="T:System.IEquatable`1" />
            <seealso cref="T:MonoGame.Extended.IEquatableByRef`1" />
        </member>
        <member name="F:MonoGame.Extended.Size2.Empty">
            <summary>
                Returns a <see cref="T:MonoGame.Extended.Size2" /> with <see cref="F:MonoGame.Extended.Size2.Width" /> and <see cref="F:MonoGame.Extended.Size2.Height" /> equal to <c>0.0f</c>.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Size2.Width">
            <summary>
                The horizontal component of this <see cref="T:MonoGame.Extended.Size2" />.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.Size2.Height">
            <summary>
                The vertical component of this <see cref="T:MonoGame.Extended.Size2" />.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Size2.IsEmpty">
            <summary>
                Gets a value that indicates whether this <see cref="T:MonoGame.Extended.Size2" /> is empty.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Size2.#ctor(System.Single,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:MonoGame.Extended.Size2" /> structure from the specified dimensions.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:MonoGame.Extended.Size2.op_Equality(MonoGame.Extended.Size2,MonoGame.Extended.Size2)">
            <summary>
                Compares two <see cref="T:MonoGame.Extended.Size2" /> structures. The result specifies
                whether the values of the <see cref="F:MonoGame.Extended.Size2.Width" /> and <see cref="F:MonoGame.Extended.Size2.Height" />
                fields of the two <see cref="T:MonoGame.Extended.Point2" /> structures are equal.
            </summary>
            <param name="first">The first size.</param>
            <param name="second">The second size.</param>
            <returns>
                <c>true</c> if the <see cref="F:MonoGame.Extended.Size2.Width" /> and <see cref="F:MonoGame.Extended.Size2.Height" />
                fields of the two <see cref="T:MonoGame.Extended.Point2" /> structures are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Size2.Equals(MonoGame.Extended.Size2)">
            <summary>
                Indicates whether this <see cref="T:MonoGame.Extended.Size2" /> is equal to another <see cref="T:MonoGame.Extended.Size2" />.
            </summary>
            <param name="size">The size.</param>
            <returns>
                <c>true</c> if this <see cref="T:MonoGame.Extended.Point2" /> is equal to the <paramref name="size" /> parameter; otherwise,
                <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Size2.Equals(MonoGame.Extended.Size2@)">
            <summary>
                Indicates whether this <see cref="T:MonoGame.Extended.Size2" /> is equal to another <see cref="T:MonoGame.Extended.Size2" />.
            </summary>
            <param name="size">The size.</param>
            <returns>
                <c>true</c> if this <see cref="T:MonoGame.Extended.Point2" /> is equal to the <paramref name="size" />; otherwise,
                <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Size2.Equals(System.Object)">
            <summary>
                Returns a value indicating whether this <see cref="T:MonoGame.Extended.Size2" /> is equal to a specified object.
            </summary>
            <param name="obj">The object to make the comparison with.</param>
            <returns>
                <c>true</c> if this  <see cref="T:MonoGame.Extended.Size2" /> is equal to <paramref name="obj" />; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Size2.op_Inequality(MonoGame.Extended.Size2,MonoGame.Extended.Size2)">
            <summary>
                Compares two <see cref="T:MonoGame.Extended.Size2" /> structures. The result specifies
                whether the values of the <see cref="F:MonoGame.Extended.Size2.Width" /> or <see cref="F:MonoGame.Extended.Size2.Height" />
                fields of the two <see cref="T:MonoGame.Extended.Size2" /> structures are unequal.
            </summary>
            <param name="first">The first size.</param>
            <param name="second">The second size.</param>
            <returns>
                <c>true</c> if the <see cref="F:MonoGame.Extended.Size2.Width" /> or <see cref="F:MonoGame.Extended.Size2.Height" />
                fields of the two <see cref="T:MonoGame.Extended.Size2" /> structures are unequal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Size2.op_Addition(MonoGame.Extended.Size2,MonoGame.Extended.Size2)">
            <summary>
                Calculates the <see cref="T:MonoGame.Extended.Size2" /> representing the vector addition of two <see cref="T:MonoGame.Extended.Size2" /> structures as if
                they
                were <see cref="T:Microsoft.Xna.Framework.Vector2" /> structures.
            </summary>
            <param name="first">The first size.</param>
            <param name="second">The second size.</param>
            <returns>
                The <see cref="T:MonoGame.Extended.Size2" /> representing the vector addition of two <see cref="T:MonoGame.Extended.Size2" /> structures as if they
                were <see cref="T:Microsoft.Xna.Framework.Vector2" /> structures.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Size2.Add(MonoGame.Extended.Size2,MonoGame.Extended.Size2)">
            <summary>
                Calculates the <see cref="T:MonoGame.Extended.Size2" /> representing the vector addition of two <see cref="T:MonoGame.Extended.Size2" /> structures.
            </summary>
            <param name="first">The first size.</param>
            <param name="second">The second size.</param>
            <returns>
                The <see cref="T:MonoGame.Extended.Size2" /> representing the vector addition of two <see cref="T:MonoGame.Extended.Size2" /> structures.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Size2.op_Subtraction(MonoGame.Extended.Size2,MonoGame.Extended.Size2)">
            <summary>
            Calculates the <see cref="T:MonoGame.Extended.Size2" /> representing the vector subtraction of two <see cref="T:MonoGame.Extended.Size2" /> structures.
            </summary>
            <param name="first">The first size.</param>
            <param name="second">The second size.</param>
            <returns>
                The <see cref="T:MonoGame.Extended.Size2" /> representing the vector subtraction of two <see cref="T:MonoGame.Extended.Size2" /> structures.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Size2.Subtract(MonoGame.Extended.Size2,MonoGame.Extended.Size2)">
            <summary>
                Calculates the <see cref="T:MonoGame.Extended.Size2" /> representing the vector subtraction of two <see cref="T:MonoGame.Extended.Size2" /> structures.
            </summary>
            <param name="first">The first size.</param>
            <param name="second">The second size.</param>
            <returns>
                The <see cref="T:MonoGame.Extended.Size2" /> representing the vector subtraction of two <see cref="T:MonoGame.Extended.Size2" /> structures.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Size2.GetHashCode">
            <summary>
                Returns a hash code of this <see cref="T:MonoGame.Extended.Size2" /> suitable for use in hashing algorithms and data
                structures like a hash table.
            </summary>
            <returns>
                A hash code of this <see cref="T:MonoGame.Extended.Point2" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Size2.op_Implicit(MonoGame.Extended.Point2)~MonoGame.Extended.Size2">
            <summary>
                Performs an implicit conversion from a <see cref="T:MonoGame.Extended.Point2" /> to a <see cref="T:MonoGame.Extended.Size2" />.
            </summary>
            <param name="point">The point.</param>
            <returns>
                The resulting <see cref="T:MonoGame.Extended.Size2" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Size2.op_Implicit(Microsoft.Xna.Framework.Point)~MonoGame.Extended.Size2">
            <summary>
                Performs an implicit conversion from a <see cref="T:Microsoft.Xna.Framework.Point" /> to a <see cref="T:MonoGame.Extended.Size2" />.
            </summary>
            <param name="point">The point.</param>
            <returns>
                The resulting <see cref="T:MonoGame.Extended.Size2" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Size2.op_Implicit(MonoGame.Extended.Size2)~MonoGame.Extended.Point2">
            <summary>
                Performs an implicit conversion from a <see cref="T:MonoGame.Extended.Point2" /> to a <see cref="T:MonoGame.Extended.Size2" />.
            </summary>
            <param name="size">The size.</param>
            <returns>
                The resulting <see cref="T:MonoGame.Extended.Point2" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Size2.op_Implicit(MonoGame.Extended.Size2)~Microsoft.Xna.Framework.Vector2">
            <summary>
                Performs an implicit conversion from a <see cref="T:MonoGame.Extended.Size2" /> to a <see cref="T:Microsoft.Xna.Framework.Vector2" />.
            </summary>
            <param name="size">The size.</param>
            <returns>
                The resulting <see cref="T:Microsoft.Xna.Framework.Vector2" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Size2.op_Implicit(Microsoft.Xna.Framework.Vector2)~MonoGame.Extended.Size2">
            <summary>
                Performs an implicit conversion from a <see cref="T:Microsoft.Xna.Framework.Vector2" /> to a <see cref="T:MonoGame.Extended.Size2" />.
            </summary>
            <param name="vector">The vector.</param>
            <returns>
                The resulting <see cref="T:MonoGame.Extended.Size2" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Size2.op_Explicit(MonoGame.Extended.Size2)~Microsoft.Xna.Framework.Point">
            <summary>
                Performs an explicit conversion from a <see cref="T:MonoGame.Extended.Size2" /> to a <see cref="T:Microsoft.Xna.Framework.Point" />.
            </summary>
            <param name="size">The size.</param>
            <returns>
                The resulting <see cref="T:MonoGame.Extended.Size2" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Size2.ToString">
            <summary>
                Returns a <see cref="T:System.String" /> that represents this <see cref="T:MonoGame.Extended.Size2" />.
            </summary>
            <returns>
                A <see cref="T:System.String" /> that represents this <see cref="T:MonoGame.Extended.Size2" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.BitmapFonts.BitmapFontExtensions.DrawString(Microsoft.Xna.Framework.Graphics.SpriteBatch,MonoGame.Extended.BitmapFonts.BitmapFont,System.String,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single,System.Nullable{Microsoft.Xna.Framework.Rectangle})">
            <summary>
                Adds a string to a batch of sprites for rendering using the specified font, text, position, color, rotation,
                origin, scale, effects and layer.
            </summary>
            <param name="spriteBatch"></param>
            <param name="bitmapFont">A font for displaying text.</param>
            <param name="text">The text message to display.</param>
            <param name="position">The location (in screen coordinates) to draw the text.</param>
            <param name="color">
                The <see cref="T:Microsoft.Xna.Framework.Color" /> to tint a sprite. Use <see cref="P:Microsoft.Xna.Framework.Color.White" /> for full color with no
                tinting.
            </param>
            <param name="rotation">Specifies the angle (in radians) to rotate the text about its origin.</param>
            <param name="origin">The origin for each letter; the default is (0,0) which represents the upper-left corner.</param>
            <param name="scale">Scale factor.</param>
            <param name="effect">Effects to apply.</param>
            <param name="layerDepth">
                The depth of a layer. By default, 0 represents the front layer and 1 represents a back layer.
                Use SpriteSortMode if you want sprites to be sorted during drawing.
            </param>
            <param name="clippingRectangle">Clips the boundaries of the text so that it's not drawn outside the clipping rectangle</param>
        </member>
        <member name="M:MonoGame.Extended.BitmapFonts.BitmapFontExtensions.DrawString(Microsoft.Xna.Framework.Graphics.SpriteBatch,MonoGame.Extended.BitmapFonts.BitmapFont,System.String,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Vector2,System.Single,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single,System.Nullable{Microsoft.Xna.Framework.Rectangle})">
            <summary>
                Adds a string to a batch of sprites for rendering using the specified font, text, position, color, rotation,
                origin, scale, effects and layer.
            </summary>
            <param name="spriteBatch"></param>
            <param name="font">A font for displaying text.</param>
            <param name="text">The text message to display.</param>
            <param name="position">The location (in screen coordinates) to draw the text.</param>
            <param name="color">
                The <see cref="T:Microsoft.Xna.Framework.Color" /> to tint a sprite. Use <see cref="P:Microsoft.Xna.Framework.Color.White" /> for full color with no
                tinting.
            </param>
            <param name="rotation">Specifies the angle (in radians) to rotate the text about its origin.</param>
            <param name="origin">The origin for each letter; the default is (0,0) which represents the upper-left corner.</param>
            <param name="scale">Scale factor.</param>
            <param name="effect">Effects to apply.</param>
            <param name="layerDepth">
                The depth of a layer. By default, 0 represents the front layer and 1 represents a back layer.
                Use SpriteSortMode if you want sprites to be sorted during drawing.
            </param>
            <param name="clippingRectangle">Clips the boundaries of the text so that it's not drawn outside the clipping rectangle</param>
        </member>
        <member name="M:MonoGame.Extended.BitmapFonts.BitmapFontExtensions.DrawString(Microsoft.Xna.Framework.Graphics.SpriteBatch,MonoGame.Extended.BitmapFonts.BitmapFont,System.String,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Single,System.Nullable{Microsoft.Xna.Framework.Rectangle})">
            <summary>
                Adds a string to a batch of sprites for rendering using the specified font, text, position, color, layer,
                and width (in pixels) where to wrap the text at.
            </summary>
            <remarks>
                <see cref="T:MonoGame.Extended.BitmapFonts.BitmapFont" /> objects are loaded from the Content Manager. See the <see cref="T:MonoGame.Extended.BitmapFonts.BitmapFont" /> class for
                more information.
                Before any calls to <see cref="M:MonoGame.Extended.BitmapFonts.BitmapFontExtensions.DrawString(Microsoft.Xna.Framework.Graphics.SpriteBatch,MonoGame.Extended.BitmapFonts.BitmapFont,System.String,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single,System.Nullable{Microsoft.Xna.Framework.Rectangle})" /> you must call <see cref="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Begin(Microsoft.Xna.Framework.Graphics.SpriteSortMode,Microsoft.Xna.Framework.Graphics.BlendState,Microsoft.Xna.Framework.Graphics.SamplerState,Microsoft.Xna.Framework.Graphics.DepthStencilState,Microsoft.Xna.Framework.Graphics.RasterizerState,Microsoft.Xna.Framework.Graphics.Effect,System.Nullable{Microsoft.Xna.Framework.Matrix})" />. Once all calls 
                are complete, call <see cref="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.End" />.
                Use a newline character (\n) to draw more than one line of text.
            </remarks>
            <param name="spriteBatch"></param>
            <param name="font">A font for displaying text.</param>
            <param name="text">The text message to display.</param>
            <param name="position">The location (in screen coordinates) to draw the text.</param>
            <param name="color">
                The <see cref="T:Microsoft.Xna.Framework.Color" /> to tint a sprite. Use <see cref="P:Microsoft.Xna.Framework.Color.White" /> for full color with no
                tinting.
            </param>
            <param name="layerDepth">
                The depth of a layer. By default, 0 represents the front layer and 1 represents a back layer.
                Use SpriteSortMode if you want sprites to be sorted during drawing.
            </param>
            <param name="clippingRectangle">Clips the boundaries of the text so that it's not drawn outside the clipping rectangle</param>
        </member>
        <member name="M:MonoGame.Extended.BitmapFonts.BitmapFontExtensions.DrawString(Microsoft.Xna.Framework.Graphics.SpriteBatch,MonoGame.Extended.BitmapFonts.BitmapFont,System.String,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Nullable{Microsoft.Xna.Framework.Rectangle})">
            <summary>
                Adds a string to a batch of sprites for rendering using the specified font, text, position, color,
                and width (in pixels) where to wrap the text at. The text is drawn on layer 0f.
            </summary>
            <param name="spriteBatch"></param>
            <param name="font">A font for displaying text.</param>
            <param name="text">The text message to display.</param>
            <param name="position">The location (in screen coordinates) to draw the text.</param>
            <param name="color">
                The <see cref="T:Microsoft.Xna.Framework.Color" /> to tint a sprite. Use <see cref="P:Microsoft.Xna.Framework.Color.White" /> for full color with no
                tinting.
            </param>
            <param name="clippingRectangle">Clips the boundaries of the text so that it's not drawn outside the clipping rectangle</param>
        </member>
        <member name="T:MonoGame.Extended.IEquatableByRef`1">
            <summary>
                Defines a generalized method that a value type or class implements to create a type-specific method for
                determining equality of instances by reference.
            </summary>
            <typeparam name="T">The type of values or objects to compare.</typeparam>
        </member>
        <member name="M:MonoGame.Extended.IEquatableByRef`1.Equals(`0@)">
            <summary>
                Indicates whether the current value or object is equal to another value or object of the same type by
                reference.
            </summary>
            <returns>
                <c>true</c> if the current value or object is equal to the <paramref name="other" /> parameter; otherwise,
                <c>false</c>.
            </returns>
            <param name="other">A value or object to compare with this value or object.</param>
        </member>
        <member name="T:MonoGame.Extended.Matrix2D">
            <summary>
                Defines a 3x3 matrix using floating point numbers which can store two dimensional translation, scale and rotation
                information in a right-handed coordinate system.
            </summary>
            <remarks>
                <para>
                    Matrices use a row vector layout in the XNA / MonoGame Framework but, in general, matrices can be either have
                    a row vector or column vector layout. Row vector matrices view vectors as a row from left to right, while
                    column vector matrices view vectors as a column from top to bottom. For example, the <see cref="P:MonoGame.Extended.Matrix2D.Translation" />
                    corresponds to the fields <see cref="F:MonoGame.Extended.Matrix2D.M31" /> and <see cref="F:MonoGame.Extended.Matrix2D.M32" />.
                </para>
                <para>
                    The fields M13 and M23 always have a value of <code>0.0f</code>, and thus are removed from the
                    <see cref="T:MonoGame.Extended.Matrix2D" /> to reduce its memory footprint. Same is true for the field M33, except it always has a
                    value of <code>1.0f</code>.
                </para>
            </remarks>
        </member>
        <member name="P:MonoGame.Extended.Matrix2D.Identity">
            <summary>
                Gets the identity matrix.
            </summary>
            <value>
                The identity matrix.
            </value>
        </member>
        <member name="P:MonoGame.Extended.Matrix2D.Translation">
            <summary>
                Gets the translation.
            </summary>
            <value>
                The translation.
            </value>
            <remarks>The <see cref="P:MonoGame.Extended.Matrix2D.Translation" /> is equal to the vector <code>(M31, M32)</code>.</remarks>
        </member>
        <member name="P:MonoGame.Extended.Matrix2D.Rotation">
            <summary>
                Gets the rotation angle in radians.
            </summary>
            <value>
                The rotation angle in radians.
            </value>
            <remarks>
                The <see cref="P:MonoGame.Extended.Matrix2D.Rotation" /> is equal to <code>Atan2(M21, M11)</code>.
            </remarks>
        </member>
        <member name="P:MonoGame.Extended.Matrix2D.Scale">
            <summary>
                Gets the scale.
            </summary>
            <value>
                The scale.
            </value>
            <remarks>
                The <see cref="P:MonoGame.Extended.Matrix2D.Scale" /> is equal to the vector
                <code>(Sqrt(M11 * M11 + M21 * M21), Sqrt(M12 * M12 + M22 * M22))</code>.
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Matrix2D.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:MonoGame.Extended.Matrix2D" /> struct.
            </summary>
            <param name="m11">The value to initialize <see cref="F:MonoGame.Extended.Matrix2D.M11" /> to.</param>
            <param name="m12">The value to initialize <see cref="F:MonoGame.Extended.Matrix2D.M12" /> to.</param>
            <param name="m21">The value to initialize <see cref="F:MonoGame.Extended.Matrix2D.M21" /> to.</param>
            <param name="m22">The value to initialize <see cref="F:MonoGame.Extended.Matrix2D.M22" /> to.</param>
            <param name="m31">The value to initialize <see cref="F:MonoGame.Extended.Matrix2D.M31" /> to.</param>
            <param name="m32">The value to initialize <see cref="F:MonoGame.Extended.Matrix2D.M32" /> to.</param>
            <remarks>
                <para>
                    The fields M13 and M23 always have a value of <code>0.0f</code>, and thus are removed from the
                    <see cref="T:MonoGame.Extended.Matrix2D" /> to reduce its memory footprint. Same is true for the field M33, except it always has a
                    value of <code>1.0f</code>.
                </para>
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Matrix2D.Transform(Microsoft.Xna.Framework.Vector2)">
            <summary>
                Transforms the specified <see cref="T:Microsoft.Xna.Framework.Vector2" /> by this <see cref="T:MonoGame.Extended.Matrix2D" />.
            </summary>
            <param name="vector">The vector.</param>
            <returns>The resulting <see cref="T:Microsoft.Xna.Framework.Vector2" />.</returns>
        </member>
        <member name="M:MonoGame.Extended.Matrix2D.Transform(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2@)">
            <summary>
                Transforms the specified <see cref="T:Microsoft.Xna.Framework.Vector2" /> by this <see cref="T:MonoGame.Extended.Matrix2D" />.
            </summary>
            <param name="vector">The vector.</param>
            <param name="result">The resulting <see cref="T:Microsoft.Xna.Framework.Vector2" />.</param>
        </member>
        <member name="M:MonoGame.Extended.Matrix2D.Transform(System.Single,System.Single,Microsoft.Xna.Framework.Vector2@)">
            <summary>
                Transforms the specified <see cref="T:Microsoft.Xna.Framework.Vector2" /> by this <see cref="T:MonoGame.Extended.Matrix2D" />.
            </summary>
            <param name="x">The x value of the vector.</param>
            <param name="y">The y value of the vector.</param>
            <param name="result">The resulting <see cref="T:Microsoft.Xna.Framework.Vector2" />.</param>
        </member>
        <member name="M:MonoGame.Extended.Matrix2D.CreateFrom(Microsoft.Xna.Framework.Vector2,System.Single,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{Microsoft.Xna.Framework.Vector2},MonoGame.Extended.Matrix2D@)">
            <summary>
                Initializes a new instance of the <see cref="T:MonoGame.Extended.Matrix2D" /> struct that can be used to translate, rotate, and scale a set of vertices in two dimensions.
            </summary>
            <param name="position">The amounts to translate by on the x and y axes.</param>
            <param name="rotation">The amount, in radians, in which to rotate around the z-axis.</param>
            <param name="scale">The amount to scale by on the x and y axes.</param>
            <param name="origin">The point which to rotate and scale around.</param>
            <param name="transformMatrix">The resulting <see cref="T:MonoGame.Extended.Matrix2D" /></param>
        </member>
        <member name="M:MonoGame.Extended.Matrix2D.CreateFrom(Microsoft.Xna.Framework.Vector2,System.Single,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{Microsoft.Xna.Framework.Vector2})">
            <summary>
                Initializes a new instance of the <see cref="T:MonoGame.Extended.Matrix2D" /> struct that can be used to translate, rotate, and scale a set of vertices in two dimensions.
            </summary>
            <param name="position">The amounts to translate by on the x and y axes.</param>
            <param name="rotation">The amount, in radians, in which to rotate around the z-axis.</param>
            <param name="scale">The amount to scale by on the x and y axes.</param>
            <param name="origin">The point which to rotate and scale around.</param>
            <returns>The resulting <see cref="T:MonoGame.Extended.Matrix2D" />.</returns>
        </member>
        <member name="M:MonoGame.Extended.Matrix2D.CreateRotationZ(System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:MonoGame.Extended.Matrix2D" /> struct that can be used to rotate a set of vertices
                around the z-axis.
            </summary>
            <param name="radians">The amount, in radians, in which to rotate around the z-axis.</param>
            <returns>The resulting <see cref="T:MonoGame.Extended.Matrix2D" />.</returns>
        </member>
        <member name="M:MonoGame.Extended.Matrix2D.CreateRotationZ(System.Single,MonoGame.Extended.Matrix2D@)">
            <summary>
                Calculates the <see cref="T:MonoGame.Extended.Matrix2D" /> struct that can be used to rotate a set of vertices around the z-axis.
            </summary>
            <param name="radians">The amount, in radians, in which to rotate around the z-axis.</param>
            <param name="result">The resulting <see cref="T:MonoGame.Extended.Matrix2D" />.</param>
        </member>
        <member name="M:MonoGame.Extended.Matrix2D.CreateScale(System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:MonoGame.Extended.Matrix2D" /> struct that can be used to scale a set vertices.
            </summary>
            <param name="scale">The amount to scale by on the x and y axes.</param>
            <returns>The resulting <see cref="T:MonoGame.Extended.Matrix2D" />.</returns>
        </member>
        <member name="M:MonoGame.Extended.Matrix2D.CreateScale(System.Single,MonoGame.Extended.Matrix2D@)">
            <summary>
                Calculates the <see cref="T:MonoGame.Extended.Matrix2D" /> struct that can be used to scale a set vertices.
            </summary>
            <param name="scale">The amount to scale by on the x and y axes.</param>
            <param name="result">The resulting <see cref="T:MonoGame.Extended.Matrix2D" />.</param>
        </member>
        <member name="M:MonoGame.Extended.Matrix2D.CreateScale(System.Single,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:MonoGame.Extended.Matrix2D" /> struct that can be used to scale a set vertices.
            </summary>
            <param name="xScale">The amount to scale by on the x-axis.</param>
            <param name="yScale">The amount to scale by on the y-axis.</param>
            <returns>The resulting <see cref="T:MonoGame.Extended.Matrix2D" />.</returns>
        </member>
        <member name="M:MonoGame.Extended.Matrix2D.CreateScale(System.Single,System.Single,MonoGame.Extended.Matrix2D@)">
            <summary>
                Calculates the <see cref="T:MonoGame.Extended.Matrix2D" /> struct that can be used to scale a set vertices.
            </summary>
            <param name="xScale">The amount to scale by on the x-axis.</param>
            <param name="yScale">The amount to scale by on the y-axis.</param>
            <param name="result">The resulting <see cref="T:MonoGame.Extended.Matrix2D" />.</param>
        </member>
        <member name="M:MonoGame.Extended.Matrix2D.CreateScale(Microsoft.Xna.Framework.Vector2)">
            <summary>
                Initializes a new instance of the <see cref="T:MonoGame.Extended.Matrix2D" /> struct that can be used to scale a set vertices.
            </summary>
            <param name="scale">The amounts to scale by on the x and y axes.</param>
            <returns>The resulting <see cref="T:MonoGame.Extended.Matrix2D" />.</returns>
        </member>
        <member name="M:MonoGame.Extended.Matrix2D.CreateScale(Microsoft.Xna.Framework.Vector2@,MonoGame.Extended.Matrix2D@)">
            <summary>
                Calculates the <see cref="T:MonoGame.Extended.Matrix2D" /> struct that can be used to scale a set vertices.
            </summary>
            <param name="scale">The amounts to scale by on the x and y axes.</param>
            <param name="result">The resulting <see cref="T:MonoGame.Extended.Matrix2D" />.</param>
        </member>
        <member name="M:MonoGame.Extended.Matrix2D.CreateTranslation(System.Single,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:MonoGame.Extended.Matrix2D" /> struct that can be used to translate a set vertices.
            </summary>
            <param name="xPosition">The amount to translate by on the x-axis.</param>
            <param name="yPosition">The amount to translate by on the y-axis.</param>
            <returns>The resulting <see cref="T:MonoGame.Extended.Matrix2D" />.</returns>
        </member>
        <member name="M:MonoGame.Extended.Matrix2D.CreateTranslation(System.Single,System.Single,MonoGame.Extended.Matrix2D@)">
            <summary>
                Calculates the <see cref="T:MonoGame.Extended.Matrix2D" /> struct that can be used to translate a set vertices.
            </summary>
            <param name="xPosition">The amount to translate by on the x-axis.</param>
            <param name="yPosition">The amount to translate by on the y-axis.</param>
            <param name="result">The resulting <see cref="T:MonoGame.Extended.Matrix2D" />.</param>
        </member>
        <member name="M:MonoGame.Extended.Matrix2D.CreateTranslation(Microsoft.Xna.Framework.Vector2)">
            <summary>
                Initializes a new instance of the <see cref="T:MonoGame.Extended.Matrix2D" /> struct that can be used to translate a set vertices.
            </summary>
            <param name="position">The amounts to translate by on the x and y axes.</param>
            <returns>The resulting <see cref="T:MonoGame.Extended.Matrix2D" />.</returns>
        </member>
        <member name="M:MonoGame.Extended.Matrix2D.CreateTranslation(Microsoft.Xna.Framework.Vector2@,MonoGame.Extended.Matrix2D@)">
            <summary>
                Calculates the <see cref="T:MonoGame.Extended.Matrix2D" /> struct that can be used to translate a set vertices.
            </summary>
            <param name="position">The amounts to translate by on the x and y axes.</param>
            <param name="result">The resulting <see cref="T:MonoGame.Extended.Matrix2D" />.</param>
        </member>
        <member name="M:MonoGame.Extended.Matrix2D.Determinant">
            <summary>
                Calculates the determinant of the <see cref="T:MonoGame.Extended.Matrix2D" />.
            </summary>
            <returns>The determinant of the <see cref="T:MonoGame.Extended.Matrix2D" />.</returns>
        </member>
        <member name="M:MonoGame.Extended.Matrix2D.Add(MonoGame.Extended.Matrix2D,MonoGame.Extended.Matrix2D)">
            <summary>
                Initializes a new instance of the <see cref="T:MonoGame.Extended.Matrix2D" /> struct with the summation of two <see cref="T:MonoGame.Extended.Matrix2D" />
                s.
            </summary>
            <param name="matrix1">The first <see cref="T:MonoGame.Extended.Matrix2D" />.</param>
            <param name="matrix2">The second <see cref="T:MonoGame.Extended.Matrix2D" />.</param>
            <returns>The resulting <see cref="T:MonoGame.Extended.Matrix2D" />.</returns>
        </member>
        <member name="M:MonoGame.Extended.Matrix2D.Add(MonoGame.Extended.Matrix2D@,MonoGame.Extended.Matrix2D@,MonoGame.Extended.Matrix2D@)">
            <summary>
                Calculates the <see cref="T:MonoGame.Extended.Matrix2D" /> summation of two <see cref="T:MonoGame.Extended.Matrix2D" />s.
            </summary>
            <param name="matrix1">The first <see cref="T:MonoGame.Extended.Matrix2D" />.</param>
            <param name="matrix2">The second <see cref="T:MonoGame.Extended.Matrix2D" />.</param>
            <param name="result">The resulting <see cref="T:MonoGame.Extended.Matrix2D" />.</param>
        </member>
        <member name="M:MonoGame.Extended.Matrix2D.op_Addition(MonoGame.Extended.Matrix2D,MonoGame.Extended.Matrix2D)">
            <summary>
                Initializes a new instance of the <see cref="T:MonoGame.Extended.Matrix2D" /> struct with the summation of two <see cref="T:MonoGame.Extended.Matrix2D" />
                s.
            </summary>
            <param name="matrix1">The first <see cref="T:MonoGame.Extended.Matrix2D" />.</param>
            <param name="matrix2">The second <see cref="T:MonoGame.Extended.Matrix2D" />.</param>
            <returns>The resulting <see cref="T:MonoGame.Extended.Matrix2D" />.</returns>
        </member>
        <member name="M:MonoGame.Extended.Matrix2D.Subtract(MonoGame.Extended.Matrix2D,MonoGame.Extended.Matrix2D)">
            <summary>
                Initializes a new instance of the <see cref="T:MonoGame.Extended.Matrix2D" /> struct with the substraction of two
                <see cref="T:MonoGame.Extended.Matrix2D" />
                s.
            </summary>
            <param name="matrix1">The first <see cref="T:MonoGame.Extended.Matrix2D" />.</param>
            <param name="matrix2">The second <see cref="T:MonoGame.Extended.Matrix2D" />.</param>
            <returns>The resulting <see cref="T:MonoGame.Extended.Matrix2D" />.</returns>
        </member>
        <member name="M:MonoGame.Extended.Matrix2D.Subtract(MonoGame.Extended.Matrix2D@,MonoGame.Extended.Matrix2D@,MonoGame.Extended.Matrix2D@)">
            <summary>
                Calculates the <see cref="T:MonoGame.Extended.Matrix2D" /> substraction of two <see cref="T:MonoGame.Extended.Matrix2D" />s.
            </summary>
            <param name="matrix1">The first <see cref="T:MonoGame.Extended.Matrix2D" />.</param>
            <param name="matrix2">The second <see cref="T:MonoGame.Extended.Matrix2D" />.</param>
            <param name="result">The resulting <see cref="T:MonoGame.Extended.Matrix2D" />.</param>
        </member>
        <member name="M:MonoGame.Extended.Matrix2D.op_Subtraction(MonoGame.Extended.Matrix2D,MonoGame.Extended.Matrix2D)">
            <summary>
                Initializes a new instance of the <see cref="T:MonoGame.Extended.Matrix2D" /> struct with the substraction of two
                <see cref="T:MonoGame.Extended.Matrix2D" />
                s.
            </summary>
            <param name="matrix1">The first <see cref="T:MonoGame.Extended.Matrix2D" />.</param>
            <param name="matrix2">The second <see cref="T:MonoGame.Extended.Matrix2D" />.</param>
            <returns>The resulting <see cref="T:MonoGame.Extended.Matrix2D" />.</returns>
        </member>
        <member name="M:MonoGame.Extended.Matrix2D.Multiply(MonoGame.Extended.Matrix2D,MonoGame.Extended.Matrix2D)">
            <summary>
                Initializes a new instance of the <see cref="T:MonoGame.Extended.Matrix2D" /> struct with the multiplication of two
                <see cref="T:MonoGame.Extended.Matrix2D" />
                s.
            </summary>
            <param name="matrix1">The first <see cref="T:MonoGame.Extended.Matrix2D" />.</param>
            <param name="matrix2">The second <see cref="T:MonoGame.Extended.Matrix2D" />.</param>
            <returns>The resulting <see cref="T:MonoGame.Extended.Matrix2D" />.</returns>
        </member>
        <member name="M:MonoGame.Extended.Matrix2D.Multiply(MonoGame.Extended.Matrix2D@,MonoGame.Extended.Matrix2D@,MonoGame.Extended.Matrix2D@)">
            <summary>
                Calculates the <see cref="T:MonoGame.Extended.Matrix2D" /> multiplication of two <see cref="T:MonoGame.Extended.Matrix2D" />s.
            </summary>
            <param name="matrix1">The first <see cref="T:MonoGame.Extended.Matrix2D" />.</param>
            <param name="matrix2">The second <see cref="T:MonoGame.Extended.Matrix2D" />.</param>
            <param name="result">The resulting <see cref="T:MonoGame.Extended.Matrix2D" />.</param>
        </member>
        <member name="M:MonoGame.Extended.Matrix2D.Multiply(MonoGame.Extended.Matrix2D,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:MonoGame.Extended.Matrix2D" /> struct with the division of a <see cref="T:MonoGame.Extended.Matrix2D" /> by
                a scalar.
            </summary>
            <param name="matrix">The <see cref="T:MonoGame.Extended.Matrix2D" />.</param>
            <param name="scalar">The amount to divide the <see cref="T:MonoGame.Extended.Matrix2D" /> by.</param>
            <returns>The resulting <see cref="T:MonoGame.Extended.Matrix2D" />.</returns>
        </member>
        <member name="M:MonoGame.Extended.Matrix2D.Multiply(MonoGame.Extended.Matrix2D@,System.Single,MonoGame.Extended.Matrix2D@)">
            <summary>
                Calculates the multiplication of a <see cref="T:MonoGame.Extended.Matrix2D" /> by a scalar.
            </summary>
            <param name="matrix">The <see cref="T:MonoGame.Extended.Matrix2D" />.</param>
            <param name="scalar">The amount to multiple the <see cref="T:MonoGame.Extended.Matrix2D" /> by.</param>
            <param name="result">The resulting <see cref="T:MonoGame.Extended.Matrix2D" />.</param>
        </member>
        <member name="M:MonoGame.Extended.Matrix2D.op_Multiply(MonoGame.Extended.Matrix2D,MonoGame.Extended.Matrix2D)">
            <summary>
                Initializes a new instance of the <see cref="T:MonoGame.Extended.Matrix2D" /> struct with the multiplication of two
                <see cref="T:MonoGame.Extended.Matrix2D" />
                s.
            </summary>
            <param name="matrix1">The first <see cref="T:MonoGame.Extended.Matrix2D" />.</param>
            <param name="matrix2">The second <see cref="T:MonoGame.Extended.Matrix2D" />.</param>
            <returns>The resulting <see cref="T:MonoGame.Extended.Matrix2D" />.</returns>
        </member>
        <member name="M:MonoGame.Extended.Matrix2D.op_Multiply(MonoGame.Extended.Matrix2D,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:MonoGame.Extended.Matrix2D" /> struct with the division of a <see cref="T:MonoGame.Extended.Matrix2D" /> by
                a scalar.
            </summary>
            <param name="matrix">The <see cref="T:MonoGame.Extended.Matrix2D" />.</param>
            <param name="scalar">The amount to divide the <see cref="T:MonoGame.Extended.Matrix2D" /> by.</param>
            <returns>The resulting <see cref="T:MonoGame.Extended.Matrix2D" />.</returns>
        </member>
        <member name="M:MonoGame.Extended.Matrix2D.Divide(MonoGame.Extended.Matrix2D,MonoGame.Extended.Matrix2D)">
            <summary>
                Initializes a new instance of the <see cref="T:MonoGame.Extended.Matrix2D" /> struct with the division of two <see cref="T:MonoGame.Extended.Matrix2D" />
                s.
            </summary>
            <param name="matrix1">The first <see cref="T:MonoGame.Extended.Matrix2D" />.</param>
            <param name="matrix2">The second <see cref="T:MonoGame.Extended.Matrix2D" />.</param>
            <returns>The resulting <see cref="T:MonoGame.Extended.Matrix2D" />.</returns>
        </member>
        <member name="M:MonoGame.Extended.Matrix2D.Divide(MonoGame.Extended.Matrix2D@,MonoGame.Extended.Matrix2D@,MonoGame.Extended.Matrix2D@)">
            <summary>
                Calculates the <see cref="T:MonoGame.Extended.Matrix2D" /> division of two <see cref="T:MonoGame.Extended.Matrix2D" />s.
            </summary>
            <param name="matrix1">The first <see cref="T:MonoGame.Extended.Matrix2D" />.</param>
            <param name="matrix2">The second <see cref="T:MonoGame.Extended.Matrix2D" />.</param>
            <param name="result">The resulting <see cref="T:MonoGame.Extended.Matrix2D" />.</param>
        </member>
        <member name="M:MonoGame.Extended.Matrix2D.Divide(MonoGame.Extended.Matrix2D,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:MonoGame.Extended.Matrix2D" /> struct with the division of a <see cref="T:MonoGame.Extended.Matrix2D" /> by
                a scalar.
            </summary>
            <param name="matrix">The <see cref="T:MonoGame.Extended.Matrix2D" />.</param>
            <param name="scalar">The amount to divide the <see cref="T:MonoGame.Extended.Matrix2D" /> by.</param>
            <returns>The resulting <see cref="T:MonoGame.Extended.Matrix2D" />.</returns>
        </member>
        <member name="M:MonoGame.Extended.Matrix2D.Divide(MonoGame.Extended.Matrix2D@,System.Single,MonoGame.Extended.Matrix2D@)">
            <summary>
                Calculates the division of a <see cref="T:MonoGame.Extended.Matrix2D" /> by a scalar.
            </summary>
            <param name="matrix">The <see cref="T:MonoGame.Extended.Matrix2D" />.</param>
            <param name="scalar">The amount to divide the <see cref="T:MonoGame.Extended.Matrix2D" /> by.</param>
            <param name="result">The resulting <see cref="T:MonoGame.Extended.Matrix2D" />.</param>
        </member>
        <member name="M:MonoGame.Extended.Matrix2D.op_Division(MonoGame.Extended.Matrix2D,MonoGame.Extended.Matrix2D)">
            <summary>
                Initializes a new instance of the <see cref="T:MonoGame.Extended.Matrix2D" /> struct with the division of two <see cref="T:MonoGame.Extended.Matrix2D" />
                s.
            </summary>
            <param name="matrix1">The first <see cref="T:MonoGame.Extended.Matrix2D" />.</param>
            <param name="matrix2">The second <see cref="T:MonoGame.Extended.Matrix2D" />.</param>
            <returns>The resulting <see cref="T:MonoGame.Extended.Matrix2D" />.</returns>
        </member>
        <member name="M:MonoGame.Extended.Matrix2D.op_Division(MonoGame.Extended.Matrix2D,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:MonoGame.Extended.Matrix2D" /> struct with the division of a <see cref="T:MonoGame.Extended.Matrix2D" /> by
                a scalar.
            </summary>
            <param name="matrix">The <see cref="T:MonoGame.Extended.Matrix2D" />.</param>
            <param name="scalar">The amount to divide the <see cref="T:MonoGame.Extended.Matrix2D" /> by.</param>
            <returns>The resulting <see cref="T:MonoGame.Extended.Matrix2D" />.</returns>
        </member>
        <member name="M:MonoGame.Extended.Matrix2D.Invert(MonoGame.Extended.Matrix2D)">
            <summary>
                Initializes a new instance of the <see cref="T:MonoGame.Extended.Matrix2D" /> struct with the inversion of a <see cref="T:MonoGame.Extended.Matrix2D" />.
            </summary>
            <param name="matrix">The <see cref="T:MonoGame.Extended.Matrix2D" />.</param>
            <returns>The resulting <see cref="T:MonoGame.Extended.Matrix2D" />.</returns>
        </member>
        <member name="M:MonoGame.Extended.Matrix2D.Invert(MonoGame.Extended.Matrix2D@,MonoGame.Extended.Matrix2D@)">
            <summary>
                Calculates the inversion of a <see cref="T:MonoGame.Extended.Matrix2D" />.
            </summary>
            <param name="matrix">The <see cref="T:MonoGame.Extended.Matrix2D" />.</param>
            <param name="result">The resulting <see cref="T:MonoGame.Extended.Matrix2D" />.</param>
        </member>
        <member name="M:MonoGame.Extended.Matrix2D.op_UnaryNegation(MonoGame.Extended.Matrix2D)">
            <summary>
                Initializes a new instance of the <see cref="T:MonoGame.Extended.Matrix2D" /> struct with the inversion of a <see cref="T:MonoGame.Extended.Matrix2D" />.
            </summary>
            <param name="matrix">The <see cref="T:MonoGame.Extended.Matrix2D" />.</param>
            <returns>The resulting <see cref="T:MonoGame.Extended.Matrix2D" />.</returns>
        </member>
        <member name="M:MonoGame.Extended.Matrix2D.op_Equality(MonoGame.Extended.Matrix2D,MonoGame.Extended.Matrix2D)">
            <summary>
                Compares a <see cref="T:MonoGame.Extended.Matrix2D" /> for equality with another <see cref="T:MonoGame.Extended.Matrix2D" /> without any tolerance.
            </summary>
            <param name="matrix1">The first <see cref="T:MonoGame.Extended.Matrix2D" />.</param>
            <param name="matrix2">The second <see cref="T:MonoGame.Extended.Matrix2D" />.</param>
            <returns><c>true</c> if the <see cref="T:MonoGame.Extended.Matrix2D" />s are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MonoGame.Extended.Matrix2D.op_Inequality(MonoGame.Extended.Matrix2D,MonoGame.Extended.Matrix2D)">
            <summary>
                Compares a <see cref="T:MonoGame.Extended.Matrix2D" /> for inequality with another <see cref="T:MonoGame.Extended.Matrix2D" /> without any tolerance.
            </summary>
            <param name="matrix1">The first <see cref="T:MonoGame.Extended.Matrix2D" />.</param>
            <param name="matrix2">The second <see cref="T:MonoGame.Extended.Matrix2D" />.</param>
            <returns><c>true</c> if the <see cref="T:MonoGame.Extended.Matrix2D" />s are not equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MonoGame.Extended.Matrix2D.Equals(MonoGame.Extended.Matrix2D@)">
            <summary>
                Returns a value that indicates whether the current <see cref="T:MonoGame.Extended.Matrix2D" /> is equal to a specified
                <see cref="T:MonoGame.Extended.Matrix2D" />.
            </summary>
            <param name="matrix">The <see cref="T:MonoGame.Extended.Matrix2D" /> with which to make the comparison.</param>
            <returns>
                <c>true</c> if the current <see cref="T:MonoGame.Extended.Matrix2D" /> is equal to the specified <see cref="T:MonoGame.Extended.Matrix2D" />;
                <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Matrix2D.Equals(MonoGame.Extended.Matrix2D)">
            <summary>
                Returns a value that indicates whether the current <see cref="T:MonoGame.Extended.Matrix2D" /> is equal to a specified
                <see cref="T:MonoGame.Extended.Matrix2D" />.
            </summary>
            <param name="matrix">The <see cref="T:MonoGame.Extended.Matrix2D" /> with which to make the comparison.</param>
            <returns>
                <c>true</c> if the current <see cref="T:MonoGame.Extended.Matrix2D" /> is equal to the specified <see cref="T:MonoGame.Extended.Matrix2D" />;
                <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Matrix2D.Equals(System.Object)">
            <summary>
                Returns a value that indicates whether the current <see cref="T:MonoGame.Extended.Matrix2D" /> is equal to a specified object.
            </summary>
            <param name="obj">The object with which to make the comparison.</param>
            <returns>
                <c>true</c> if the current <see cref="T:MonoGame.Extended.Matrix2D" /> is equal to the specified object;
                <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Matrix2D.GetHashCode">
            <summary>
                Returns a hash code for this <see cref="T:MonoGame.Extended.Matrix2D" />.
            </summary>
            <returns>
                A hash code for this <see cref="T:MonoGame.Extended.Matrix2D" />, suitable for use in hashing algorithms and data structures like a
                hash table.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Matrix2D.op_Implicit(MonoGame.Extended.Matrix2D)~Microsoft.Xna.Framework.Matrix">
            <summary>
                Performs an implicit conversion from <see cref="T:MonoGame.Extended.Matrix2D" /> to <see cref="T:Microsoft.Xna.Framework.Matrix" />.
            </summary>
            <param name="matrix">The <see cref="T:MonoGame.Extended.Matrix2D" />.</param>
            <returns>
                The resulting <see cref="T:Microsoft.Xna.Framework.Matrix" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Matrix2D.ToMatrix(MonoGame.Extended.Matrix2D@,System.Single,Microsoft.Xna.Framework.Matrix@)">
            <summary>
                Performs an explicit conversion from a specified <see cref="T:MonoGame.Extended.Matrix2D" /> to a <see cref="T:Microsoft.Xna.Framework.Matrix" />.
            </summary>
            <param name="matrix">The <see cref="T:MonoGame.Extended.Matrix2D" />.</param>
            <param name="depth">The depth value.</param>
            <param name="result">The resulting <see cref="T:Microsoft.Xna.Framework.Matrix" />.</param>
        </member>
        <member name="M:MonoGame.Extended.Matrix2D.ToMatrix(System.Single)">
            <summary>
                Performs an explicit conversion from a specified <see cref="T:MonoGame.Extended.Matrix2D" /> to a <see cref="T:Microsoft.Xna.Framework.Matrix" />.
            </summary>
            <param name="depth">The depth value.</param>
            <returns>The resulting <see cref="T:Microsoft.Xna.Framework.Matrix" />.</returns>
        </member>
        <member name="P:MonoGame.Extended.Matrix2D.DebugDisplayString">
            <summary>
                Gets the debug display string.
            </summary>
            <value>
                The debug display string.
            </value>
        </member>
        <member name="M:MonoGame.Extended.Matrix2D.ToString">
            <summary>
                Returns a <see cref="T:System.String" /> that represents this <see cref="T:MonoGame.Extended.Matrix2D" />.
            </summary>
            <returns>
                A <see cref="T:System.String" /> that represents this <see cref="T:MonoGame.Extended.Matrix2D" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.Vector2Extensions.Dot(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
                Calculates the dot product of two vectors. If the two vectors are unit vectors, the dot product returns a floating
                point value between -1 and 1 that can be used to determine some properties of the angle between two vectors. For
                example, it can show whether the vectors are orthogonal, parallel, or have an acute or obtuse angle between them.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The dot product of the two vectors.</returns>
            <remarks>
                <para>The dot product is also known as the inner product.</para>
                <para>
                    For any two vectors, the dot product is defined as: <c>(vector1.X * vector2.X) + (vector1.Y * vector2.Y).</c>
                    The result of this calculation, plus or minus some margin to account for floating point error, is equal to:
                    <c>Length(vector1) * Length(vector2) * System.Math.Cos(theta)</c>, where <c>theta</c> is the angle between the
                    two vectors.
                </para>
                <para>
                    If <paramref name="vector1" /> and <paramref name="vector2" /> are unit vectors, the length of each
                    vector will be equal to 1. So, when <paramref name="vector1" /> and <paramref name="vector2" /> are unit
                    vectors, the dot product is simply equal to the cosine of the angle between the two vectors. For example, both
                    <c>cos</c> values in the following calcuations would be equal in value:
                    <c>vector1.Normalize(); vector2.Normalize(); var cos = vector1.Dot(vector2)</c>,
                    <c>var cos = System.Math.Cos(theta)</c>, where <c>theta</c> is angle in radians betwen the two vectors.
                </para>
                <para>
                    If <paramref name="vector1" /> and <paramref name="vector2" /> are unit vectors, without knowing the value of
                    <c>theta</c> or using a potentially processor-intensive trigonometric function, the value of the dot product
                    can tell us the
                    following things:
                    <list type="bullet">
                        <item>
                            <description>
                                If <c>vector1.Dot(vector2) &gt; 0</c>, the angle between the two vectors
                                is less than 90 degrees.
                            </description>
                        </item>
                        <item>
                            <description>
                                If <c>vector1.Dot(vector2) &lt; 0</c>, the angle between the two vectors
                                is more than 90 degrees.
                            </description>
                        </item>
                        <item>
                            <description>
                                If <c>vector1.Dot(vector2) == 0</c>, the angle between the two vectors
                                is 90 degrees; that is, the vectors are othogonal.
                            </description>
                        </item>
                        <item>
                            <description>
                                If <c>vector1.Dot(vector2) == 1</c>, the angle between the two vectors
                                is 0 degrees; that is, the vectors point in the same direction and are parallel.
                            </description>
                        </item>
                        <item>
                            <description>
                                If <c>vector1.Dot(vector2) == -1</c>, the angle between the two vectors
                                is 180 degrees; that is, the vectors point in opposite directions and are parallel.
                            </description>
                        </item>
                    </list>
                </para>
                <note type="caution">
                    Because of floating point error, two orthogonal vectors may not return a dot product that is exactly zero. It
                    might be zero plus some amount of floating point error. In your code, you will want to determine what amount of
                    error is acceptable in your calculation, and take that into account when you do your comparisons.
                </note>
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Vector2Extensions.ScalarProjectOnto(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
                Calculates the scalar projection of one vector onto another. The scalar projection returns the length of the
                orthogonal projection of the first vector onto a straight line parallel to the second vector, with a negative value
                if the projection has an opposite direction with respect to the second vector.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The scalar projection of <paramref name="vector1" /> onto <paramref name="vector2" />.</returns>
            <remarks>
                <para>
                    The scalar projection is also known as the scalar resolute of the first vector in the direction of the second
                    vector.
                </para>
                <para>
                    For any two vectors, the scalar projection is defined as: <c>vector1.Dot(vector2) / Length(vector2)</c>. The
                    result of this calculation, plus or minus some margin to account for floating point error, is equal to:
                    <c>Length(vector1) * System.Math.Cos(theta)</c>, where <c>theta</c> is the angle in radians between
                    <paramref name="vector1" /> and <paramref name="vector2" />.
                </para>
                <para>
                    The value of the scalar projection can tell us the following things:
                    <list type="bullet">
                        <item>
                            <description>
                                If <c>vector1.ScalarProjectOnto(vector2) &gt;= 0</c>, the angle between <paramref name="vector1" />
                                and <paramref name="vector2" /> is between 0 degrees (exclusive) and 90 degrees (inclusive).
                            </description>
                        </item>
                        <item>
                            <description>
                                If <c>vector1.ScalarProjectOnto(vector2) &lt; 0</c>, the angle between <paramref name="vector1" />
                                and <paramref name="vector2" /> is between 90 degrees (exclusive) and 180 degrees (inclusive).
                            </description>
                        </item>
                    </list>
                </para>
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.Vector2Extensions.ProjectOnto(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
                Calculates the vector projection of one vector onto another. The vector projection returns the orthogonal
                projection of the first vector onto a straight line parallel to the second vector.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The vector projection of <paramref name="vector1" /> onto <paramref name="vector2" />.</returns>
            <remarks>
                <para>
                    The vector projection is also known as the vector component or vector resolute of the first vector in the
                    direction of the second vector.
                </para>
                <para>
                    For any two vectors, the vector projection is defined as:
                    <c>( vector1.Dot(vector2) / Length(vector2)^2 ) * vector2</c>.
                    The
                    result of this calculation, plus or minus some margin to account for floating point error, is equal to:
                    <c>( Length(vector1) * System.Math.Cos(theta) ) * vector2 / Length(vector2)</c>, where <c>theta</c> is the
                    angle in radians between <paramref name="vector1" /> and <paramref name="vector2" />.
                </para>
                <para>
                    This function is easier to compute than <see cref="M:MonoGame.Extended.Vector2Extensions.ScalarProjectOnto(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)" /> since it does not use a square root.
                    When the vector projection and the scalar projection is required, consider using this function; the scalar
                    projection can be obtained by taking the length of the projection vector.
                </para>
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "T:MonoGame.Extended.FastRandom" -->
        <member name="M:MonoGame.Extended.FastRandom.Next">
            <summary>
                Gets the next random integer value.
            </summary>
            <returns>A random positive integer.</returns>
        </member>
        <member name="M:MonoGame.Extended.FastRandom.Next(System.Int32)">
            <summary>
                Gets the next random integer value which is greater than zero and less than or equal to
                the specified maxmimum value.
            </summary>
            <param name="max">The maximum random integer value to return.</param>
            <returns>A random integer value between zero and the specified maximum value.</returns>
        </member>
        <member name="M:MonoGame.Extended.FastRandom.Next(System.Int32,System.Int32)">
            <summary>
                Gets the next random integer between the specified minimum and maximum values.
            </summary>
            <param name="min">The inclusive minimum value.</param>
            <param name="max">The inclusive maximum value.</param>
        </member>
        <member name="M:MonoGame.Extended.FastRandom.Next(MonoGame.Extended.Range{System.Int32})">
            <summary>
                Gets the next random integer between the specified range of values.
            </summary>
            <param name="range">A range representing the inclusive minimum and maximum values.</param>
            <returns>A random integer between the specified minumum and maximum values.</returns>
        </member>
        <member name="M:MonoGame.Extended.FastRandom.NextSingle">
            <summary>
                Gets the next random single value.
            </summary>
            <returns>A random single value between 0 and 1.</returns>
        </member>
        <member name="M:MonoGame.Extended.FastRandom.NextSingle(System.Single)">
            <summary>
                Gets the next random single value which is greater than zero and less than or equal to
                the specified maxmimum value.
            </summary>
            <param name="max">The maximum random single value to return.</param>
            <returns>A random single value between zero and the specified maximum value.</returns>
        </member>
        <member name="M:MonoGame.Extended.FastRandom.NextSingle(System.Single,System.Single)">
            <summary>
                Gets the next random single value between the specified minimum and maximum values.
            </summary>
            <param name="min">The inclusive minimum value.</param>
            <param name="max">The inclusive maximum value.</param>
            <returns>A random single value between the specified minimum and maximum values.</returns>
        </member>
        <member name="M:MonoGame.Extended.FastRandom.NextSingle(MonoGame.Extended.Range{System.Single})">
            <summary>
                Gets the next random single value between the specified range of values.
            </summary>
            <param name="range">A range representing the inclusive minimum and maximum values.</param>
            <returns>A random single value between the specified minimum and maximum values.</returns>
        </member>
        <member name="M:MonoGame.Extended.FastRandom.NextAngle">
            <summary>
                Gets the next random angle value.
            </summary>
            <returns>A random angle value.</returns>
        </member>
        <member name="T:MonoGame.Extended.Range`1">
            <summary>
                Represents a closed interval defined by a minimum and a maximum value of a give type.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Range`1.Min">
            <summary>
                Gets the minium value of the <see cref="T:MonoGame.Extended.Range`1" />.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Range`1.Max">
            <summary>
                Gets the maximum value of the <see cref="T:MonoGame.Extended.Range`1" />.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Range`1.IsDegenerate">
            <summary>
                Returns wheter or not this <see cref="T:MonoGame.Extended.Range`1" /> is degenerate.
                (Min and Max are the same)
            </summary>
        </member>
        <member name="P:MonoGame.Extended.Range`1.IsProper">
            <summary>
                Returns wheter or not this <see cref="T:MonoGame.Extended.Range`1" /> is proper.
                (Min and Max are not the same)
            </summary>
        </member>
        <member name="M:MonoGame.Extended.Range`1.IsInBetween(`0,System.Boolean,System.Boolean)">
            <summary>
                Returns wheter or not the value falls in this <see cref="T:MonoGame.Extended.Range`1" />.
            </summary>
        </member>
        <member name="T:MonoGame.Extended.ShapeExtensions">
            <summary>
                Sprite batch extensions for drawing primitive shapes
            </summary>
        </member>
        <member name="M:MonoGame.Extended.ShapeExtensions.DrawPolygon(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,MonoGame.Extended.Shapes.Polygon,Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
                Draws a closed polygon from a <see cref="T:MonoGame.Extended.Shapes.Polygon" /> shape
            </summary>
            <param name="spriteBatch">The destination drawing surface</param>
            ///
            <param name="position">Where to position the polygon</param>
            <param name="polygon">The polygon to draw</param>
            <param name="color">The color to use</param>
            <param name="thickness">The thickness of the lines</param>
        </member>
        <member name="M:MonoGame.Extended.ShapeExtensions.DrawPolygon(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2[],Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
                Draws a closed polygon from an array of points
            </summary>
            <param name="spriteBatch">The destination drawing surface</param>
            ///
            <param name="offset">Where to offset the points</param>
            <param name="points">The points to connect with lines</param>
            <param name="color">The color to use</param>
            <param name="thickness">The thickness of the lines</param>
        </member>
        <member name="M:MonoGame.Extended.ShapeExtensions.FillRectangle(Microsoft.Xna.Framework.Graphics.SpriteBatch,MonoGame.Extended.RectangleF,Microsoft.Xna.Framework.Color)">
            <summary>
                Draws a filled rectangle
            </summary>
            <param name="spriteBatch">The destination drawing surface</param>
            <param name="rectangle">The rectangle to draw</param>
            <param name="color">The color to draw the rectangle in</param>
        </member>
        <member name="M:MonoGame.Extended.ShapeExtensions.FillRectangle(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,MonoGame.Extended.Size2,Microsoft.Xna.Framework.Color)">
            <summary>
                Draws a filled rectangle
            </summary>
            <param name="spriteBatch">The destination drawing surface</param>
            <param name="location">Where to draw</param>
            <param name="size">The size of the rectangle</param>
            <param name="color">The color to draw the rectangle in</param>
        </member>
        <member name="M:MonoGame.Extended.ShapeExtensions.FillRectangle(Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Single,System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Color)">
            <summary>
                Draws a filled rectangle
            </summary>
            <param name="spriteBatch">The destination drawing surface</param>
            <param name="x">The X coord of the left side</param>
            <param name="y">The Y coord of the upper side</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
            <param name="color">The color to draw the rectangle in</param>
        </member>
        <member name="M:MonoGame.Extended.ShapeExtensions.DrawRectangle(Microsoft.Xna.Framework.Graphics.SpriteBatch,MonoGame.Extended.RectangleF,Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
                Draws a rectangle with the thickness provided
            </summary>
            <param name="spriteBatch">The destination drawing surface</param>
            <param name="rectangle">The rectangle to draw</param>
            <param name="color">The color to draw the rectangle in</param>
            <param name="thickness">The thickness of the lines</param>
        </member>
        <member name="M:MonoGame.Extended.ShapeExtensions.DrawRectangle(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,MonoGame.Extended.Size2,Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
                Draws a rectangle with the thickness provided
            </summary>
            <param name="spriteBatch">The destination drawing surface</param>
            <param name="location">Where to draw</param>
            <param name="size">The size of the rectangle</param>
            <param name="color">The color to draw the rectangle in</param>
            <param name="thickness">The thickness of the line</param>
        </member>
        <member name="M:MonoGame.Extended.ShapeExtensions.DrawLine(Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Single,System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
                Draws a line from point1 to point2 with an offset
            </summary>
            <param name="spriteBatch">The destination drawing surface</param>
            <param name="x1">The X coord of the first point</param>
            <param name="y1">The Y coord of the first point</param>
            <param name="x2">The X coord of the second point</param>
            <param name="y2">The Y coord of the second point</param>
            <param name="color">The color to use</param>
            <param name="thickness">The thickness of the line</param>
        </member>
        <member name="M:MonoGame.Extended.ShapeExtensions.DrawLine(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
                Draws a line from point1 to point2 with an offset
            </summary>
            <param name="spriteBatch">The destination drawing surface</param>
            <param name="point1">The first point</param>
            <param name="point2">The second point</param>
            <param name="color">The color to use</param>
            <param name="thickness">The thickness of the line</param>
        </member>
        <member name="M:MonoGame.Extended.ShapeExtensions.DrawLine(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
                Draws a line from point1 to point2 with an offset
            </summary>
            <param name="spriteBatch">The destination drawing surface</param>
            <param name="point">The starting point</param>
            <param name="length">The length of the line</param>
            <param name="angle">The angle of this line from the starting point</param>
            <param name="color">The color to use</param>
            <param name="thickness">The thickness of the line</param>
        </member>
        <member name="M:MonoGame.Extended.ShapeExtensions.DrawPoint(Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Single,System.Single,Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
                Draws a point at the specified x, y position. The center of the point will be at the position.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.ShapeExtensions.DrawPoint(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
                Draws a point at the specified position. The center of the point will be at the position.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.ShapeExtensions.DrawCircle(Microsoft.Xna.Framework.Graphics.SpriteBatch,MonoGame.Extended.CircleF,System.Int32,Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
                Draw a circle from a <see cref="T:MonoGame.Extended.CircleF" /> shape
            </summary>
            <param name="spriteBatch">The destination drawing surface</param>
            <param name="circle">The circle shape to draw</param>
            <param name="sides">The number of sides to generate</param>
            <param name="color">The color of the circle</param>
            <param name="thickness">The thickness of the lines used</param>
        </member>
        <member name="M:MonoGame.Extended.ShapeExtensions.DrawCircle(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Single,System.Int32,Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
                Draw a circle
            </summary>
            <param name="spriteBatch">The destination drawing surface</param>
            <param name="center">The center of the circle</param>
            <param name="radius">The radius of the circle</param>
            <param name="sides">The number of sides to generate</param>
            <param name="color">The color of the circle</param>
            <param name="thickness">The thickness of the lines used</param>
        </member>
        <member name="M:MonoGame.Extended.ShapeExtensions.DrawCircle(Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Single,System.Single,System.Single,System.Int32,Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
                Draw a circle
            </summary>
            <param name="spriteBatch">The destination drawing surface</param>
            <param name="x">The center X of the circle</param>
            <param name="y">The center Y of the circle</param>
            <param name="radius">The radius of the circle</param>
            <param name="sides">The number of sides to generate</param>
            <param name="color">The color of the circle</param>
            <param name="thickness">The thickness of the line</param>
        </member>
        <member name="T:MonoGame.Extended.CircleF">
            <summary>
                A two dimensional circle defined by a centre <see cref="T:MonoGame.Extended.Point2" /> and a radius <see cref="T:System.Single" />.
            </summary>
            <remarks>
                <para>
                    An <see cref="T:MonoGame.Extended.CircleF" /> is categorized by the set of all points in a plane that are at equal distance from
                    the
                    centre.
                </para>
            </remarks>
            <seealso cref="T:System.IEquatable`1" />
            <seealso cref="T:MonoGame.Extended.IEquatableByRef`1" />
        </member>
        <member name="F:MonoGame.Extended.CircleF.Center">
            <summary>
                The centre position of this <see cref="T:MonoGame.Extended.CircleF" />.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.CircleF.Radius">
            <summary>
                The distance from the <see cref="F:MonoGame.Extended.CircleF.Center" /> point to any point on the boundary of this <see cref="T:MonoGame.Extended.CircleF" />.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.CircleF.Diameter">
            <summary>
                Gets the distance from a point to the opposite point, both on the boundary of this <see cref="T:MonoGame.Extended.CircleF" />.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.CircleF.Circumference">
            <summary>
                Gets the distance around the boundary of this <see cref="T:MonoGame.Extended.CircleF" />.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.CircleF.#ctor(MonoGame.Extended.Point2,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:MonoGame.Extended.CircleF" /> structure from the specified centre
                <see cref="T:MonoGame.Extended.Point2" /> and the radius <see cref="T:System.Single" />.
            </summary>
            <param name="center">The centre point.</param>
            <param name="radius">The radius.</param>
        </member>
        <member name="M:MonoGame.Extended.CircleF.CreateFrom(MonoGame.Extended.Point2,MonoGame.Extended.Point2,MonoGame.Extended.CircleF@)">
            <summary>
                Computes the bounding <see cref="T:MonoGame.Extended.CircleF" /> from a minimum <see cref="T:MonoGame.Extended.Point2" /> and maximum
                <see cref="T:MonoGame.Extended.Point2" />.
            </summary>
            <param name="minimum">The minimum point.</param>
            <param name="maximum">The maximum point.</param>
            <param name="result">The resulting circle.</param>
        </member>
        <member name="M:MonoGame.Extended.CircleF.CreateFrom(MonoGame.Extended.Point2,MonoGame.Extended.Point2)">
            <summary>
                Computes the bounding <see cref="T:MonoGame.Extended.CircleF" /> from a minimum <see cref="T:MonoGame.Extended.Point2" /> and maximum
                <see cref="T:MonoGame.Extended.Point2" />.
            </summary>
            <param name="minimum">The minimum point.</param>
            <param name="maximum">The maximum point.</param>
            <returns>An <see cref="T:MonoGame.Extended.CircleF" />.</returns>
        </member>
        <member name="M:MonoGame.Extended.CircleF.CreateFrom(System.Collections.Generic.IReadOnlyList{MonoGame.Extended.Point2},MonoGame.Extended.CircleF@)">
            <summary>
                Computes the bounding <see cref="T:MonoGame.Extended.CircleF" /> from a list of <see cref="T:MonoGame.Extended.Point2" /> structures.
            </summary>
            <param name="points">The points.</param>
            <param name="result">The resulting circle.</param>
        </member>
        <member name="M:MonoGame.Extended.CircleF.CreateFrom(System.Collections.Generic.IReadOnlyList{MonoGame.Extended.Point2})">
            <summary>
                Computes the bounding <see cref="T:MonoGame.Extended.CircleF" /> from a list of <see cref="T:MonoGame.Extended.Point2" /> structures.
            </summary>
            <param name="points">The points.</param>
            <returns>An <see cref="T:MonoGame.Extended.CircleF" />.</returns>
        </member>
        <member name="M:MonoGame.Extended.CircleF.Intersects(MonoGame.Extended.CircleF@,MonoGame.Extended.CircleF@)">
            <summary>
                Determines whether the two specified <see cref="T:MonoGame.Extended.CircleF" /> structures intersect.
            </summary>
            <param name="first">The first circle.</param>
            <param name="second">The second circle.</param>
            <returns>
                <c>true</c> if the <paramref name="first" /> intersects with the <see cref="!:second" />; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.CircleF.Intersects(MonoGame.Extended.CircleF,MonoGame.Extended.CircleF)">
            <summary>
                Determines whether the two specified <see cref="T:MonoGame.Extended.CircleF" /> structures intersect.
            </summary>
            <param name="first">The first circle.</param>
            <param name="second">The second circle.</param>
            <returns>
                <c>true</c> if the <paramref name="first" /> intersects with the <see cref="!:second" />; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.CircleF.Intersects(MonoGame.Extended.CircleF@)">
            <summary>
                Determines whether the specified <see cref="T:MonoGame.Extended.CircleF" /> intersects with this <see cref="T:MonoGame.Extended.CircleF" />.
            </summary>
            <param name="circle">The circle.</param>
            <returns>
                <c>true</c> if the <paramref name="circle" /> intersects with this <see cref="T:MonoGame.Extended.CircleF" />; otherwise,
                <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.CircleF.Intersects(MonoGame.Extended.CircleF)">
            <summary>
                Determines whether the specified <see cref="T:MonoGame.Extended.CircleF" /> intersects with this <see cref="T:MonoGame.Extended.CircleF" />.
            </summary>
            <param name="circle">The circle.</param>
            <returns>
                <c>true</c> if the <paramref name="circle" /> intersects with this <see cref="T:MonoGame.Extended.CircleF" />; otherwise,
                <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.CircleF.Intersects(MonoGame.Extended.CircleF@,MonoGame.Extended.BoundingRectangle@)">
            <summary>
                Determines whether the specified <see cref="T:MonoGame.Extended.CircleF" /> and <see cref="T:MonoGame.Extended.BoundingRectangle" /> structures intersect.
            </summary>
            <param name="circle">The circle.</param>
            <param name="rectangle">The rectangle.</param>
            <returns>
                <c>true</c> if the <paramref name="circle" /> intersects with the <see cref="!:rectangle" />; otherwise, <c>false</c>
                .
            </returns>
        </member>
        <member name="M:MonoGame.Extended.CircleF.Intersects(MonoGame.Extended.CircleF,MonoGame.Extended.BoundingRectangle)">
            <summary>
                Determines whether the specified <see cref="T:MonoGame.Extended.CircleF" /> and <see cref="T:MonoGame.Extended.BoundingRectangle" /> structures intersect.
            </summary>
            <param name="circle">The circle.</param>
            <param name="rectangle">The rectangle.</param>
            <returns>
                <c>true</c> if the <paramref name="circle" /> intersects with the <see cref="!:rectangle" />; otherwise, <c>false</c>
                .
            </returns>
        </member>
        <member name="M:MonoGame.Extended.CircleF.Intersects(MonoGame.Extended.BoundingRectangle@)">
            <summary>
                Determines whether the specified <see cref="T:MonoGame.Extended.CircleF" /> intersects with this <see cref="T:MonoGame.Extended.BoundingRectangle" />.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <returns>
                <c>true</c> if the <paramref name="rectangle" /> intersects with this <see cref="T:MonoGame.Extended.CircleF" />; otherwise,
                <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.CircleF.Intersects(MonoGame.Extended.BoundingRectangle)">
            <summary>
                Determines whether the specified <see cref="T:MonoGame.Extended.CircleF" /> intersects with this <see cref="T:MonoGame.Extended.BoundingRectangle" />.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <returns>
                <c>true</c> if the <paramref name="rectangle" /> intersects with this <see cref="T:MonoGame.Extended.CircleF" />; otherwise,
                <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.CircleF.Contains(MonoGame.Extended.CircleF@,MonoGame.Extended.Point2)">
            <summary>
                Determines whether the specified <see cref="T:MonoGame.Extended.CircleF" /> contains the specified
                <see cref="T:MonoGame.Extended.Point2" />.
            </summary>
            <param name="circle">The circle.</param>
            <param name="point">The point.</param>
            <returns>
                <c>true</c> if the <paramref name="circle" /> contains the <paramref name="point" />; otherwise,
                <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.CircleF.Contains(MonoGame.Extended.CircleF,MonoGame.Extended.Point2)">
            <summary>
                Determines whether the specified <see cref="T:MonoGame.Extended.CircleF" /> contains the specified
                <see cref="T:MonoGame.Extended.Point2" />.
            </summary>
            <param name="circle">The circle.</param>
            <param name="point">The point.</param>
            <returns>
                <c>true</c> if the <paramref name="circle" /> contains the <paramref name="point" />; otherwise,
                <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.CircleF.Contains(MonoGame.Extended.Point2)">
            <summary>
                Determines whether this <see cref="T:MonoGame.Extended.CircleF" /> contains the specified <see cref="T:MonoGame.Extended.Point2" />.
            </summary>
            <param name="point">The point.</param>
            <returns>
                <c>true</c> if this <see cref="T:MonoGame.Extended.BoundingRectangle" /> contains the <paramref name="point" />; otherwise,
                <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.CircleF.ClosestPointTo(MonoGame.Extended.Point2)">
            <summary>
                Computes the closest <see cref="T:MonoGame.Extended.Point2" /> on this <see cref="T:MonoGame.Extended.CircleF" /> to a specified
                <see cref="T:MonoGame.Extended.Point2" />.
            </summary>
            <param name="point">The point.</param>
            <returns>The closest <see cref="T:MonoGame.Extended.Point2" /> on this <see cref="T:MonoGame.Extended.CircleF" /> to the <paramref name="point" />.</returns>
        </member>
        <member name="M:MonoGame.Extended.CircleF.BoundaryPointAt(System.Single)">
            <summary>
                Computes the <see cref="T:MonoGame.Extended.Point2" /> on the boundary of of this <see cref="T:MonoGame.Extended.CircleF" /> using the specified angle.
            </summary>
            <param name="angle">The angle in radians.</param>
            <returns>The <see cref="T:MonoGame.Extended.Point2" /> on the boundary of this <see cref="T:MonoGame.Extended.CircleF" /> using <paramref name="angle" />.</returns>
        </member>
        <member name="M:MonoGame.Extended.CircleF.op_Equality(MonoGame.Extended.CircleF,MonoGame.Extended.CircleF)">
            <summary>
                Compares two <see cref="T:MonoGame.Extended.CircleF" /> structures. The result specifies whether the values of the
                <see cref="F:MonoGame.Extended.CircleF.Center" /> and <see cref="F:MonoGame.Extended.CircleF.Radius" /> fields of the two <see cref="T:MonoGame.Extended.CircleF" /> structures
                are equal.
            </summary>
            <param name="first">The first circle.</param>
            <param name="second">The second circle.</param>
            <returns>
                <c>true</c> if the <see cref="F:MonoGame.Extended.CircleF.Center" /> and <see cref="F:MonoGame.Extended.CircleF.Radius" /> fields of the two
                <see cref="T:MonoGame.Extended.BoundingRectangle" /> structures are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.CircleF.op_Inequality(MonoGame.Extended.CircleF,MonoGame.Extended.CircleF)">
            <summary>
                Compares two <see cref="T:MonoGame.Extended.CircleF" /> structures. The result specifies whether the values of the
                <see cref="F:MonoGame.Extended.CircleF.Center" /> and <see cref="F:MonoGame.Extended.CircleF.Radius" /> fields of the two <see cref="T:MonoGame.Extended.CircleF" /> structures
                are unequal.
            </summary>
            <param name="first">The first circle.</param>
            <param name="second">The second circle.</param>
            <returns>
                <c>true</c> if the <see cref="F:MonoGame.Extended.CircleF.Center" /> and <see cref="F:MonoGame.Extended.CircleF.Radius" /> fields of the two
                <see cref="T:MonoGame.Extended.CircleF" /> structures are unequal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.CircleF.Equals(MonoGame.Extended.CircleF)">
            <summary>
                Indicates whether this <see cref="T:MonoGame.Extended.CircleF" /> is equal to another <see cref="T:MonoGame.Extended.CircleF" />.
            </summary>
            <param name="circle">The circle.</param>
            <returns>
                <c>true</c> if this <see cref="T:MonoGame.Extended.CircleF" /> is equal to the <paramref name="circle" />; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.CircleF.Equals(MonoGame.Extended.CircleF@)">
            <summary>
                Indicates whether this <see cref="T:MonoGame.Extended.CircleF" /> is equal to another <see cref="T:MonoGame.Extended.CircleF" />.
            </summary>
            <param name="circle">The bounding rectangle.</param>
            <returns>
                <c>true</c> if this <see cref="T:MonoGame.Extended.CircleF" /> is equal to the <paramref name="circle" />;
                otherwise,<c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.CircleF.Equals(System.Object)">
            <summary>
                Returns a value indicating whether this <see cref="T:MonoGame.Extended.CircleF" /> is equal to a specified object.
            </summary>
            <param name="obj">The object to make the comparison with.</param>
            <returns>
                <c>true</c> if this <see cref="T:MonoGame.Extended.CircleF" /> is equal to <paramref name="obj" />; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.CircleF.GetHashCode">
            <summary>
                Returns a hash code of this <see cref="T:MonoGame.Extended.CircleF" /> suitable for use in hashing algorithms and data
                structures like a hash table.
            </summary>
            <returns>
                A hash code of this <see cref="T:MonoGame.Extended.CircleF" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.CircleF.op_Implicit(MonoGame.Extended.CircleF)~Microsoft.Xna.Framework.Rectangle">
            <summary>
                Performs an implicit conversion from a <see cref="T:MonoGame.Extended.CircleF" /> to a <see cref="T:Microsoft.Xna.Framework.Rectangle" />.
            </summary>
            <param name="circle">The circle.</param>
            <returns>
                The resulting <see cref="T:Microsoft.Xna.Framework.Rectangle" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.CircleF.ToRectangle">
            <summary>
                Performs a conversion from a specified <see cref="T:MonoGame.Extended.CircleF" /> to a <see cref="T:Microsoft.Xna.Framework.Rectangle" />.
            </summary>
            <returns>
                The resulting <see cref="T:Microsoft.Xna.Framework.Rectangle" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.CircleF.op_Implicit(Microsoft.Xna.Framework.Rectangle)~MonoGame.Extended.CircleF">
            <summary>
                Performs an implicit conversion from a <see cref="T:Microsoft.Xna.Framework.Rectangle" /> to a <see cref="T:MonoGame.Extended.CircleF" />.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <returns>
                The resulting <see cref="T:MonoGame.Extended.CircleF" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.CircleF.op_Implicit(MonoGame.Extended.CircleF)~MonoGame.Extended.RectangleF">
            <summary>
                Performs an implicit conversion from a <see cref="T:MonoGame.Extended.CircleF" /> to a <see cref="T:MonoGame.Extended.RectangleF" />.
            </summary>
            <param name="circle">The circle.</param>
            <returns>
                The resulting <see cref="T:MonoGame.Extended.RectangleF" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.CircleF.ToRectangleF">
            <summary>
                Performs a conversion from a specified <see cref="T:MonoGame.Extended.CircleF" /> to a <see cref="T:MonoGame.Extended.RectangleF" />.
            </summary>
            <returns>
                The resulting <see cref="T:MonoGame.Extended.RectangleF" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.CircleF.op_Implicit(MonoGame.Extended.RectangleF)~MonoGame.Extended.CircleF">
            <summary>
                Performs an implicit conversion from a <see cref="T:MonoGame.Extended.RectangleF" /> to a <see cref="T:MonoGame.Extended.CircleF" />.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <returns>
                The resulting <see cref="T:MonoGame.Extended.CircleF" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.CircleF.ToString">
            <summary>
                Returns a <see cref="T:System.String" /> that represents this <see cref="T:MonoGame.Extended.CircleF" />.
            </summary>
            <returns>
                A <see cref="T:System.String" /> that represents this <see cref="T:MonoGame.Extended.CircleF" />.
            </returns>
        </member>
        <member name="T:MonoGame.Extended.RectangleF">
            <summary>
                An axis-aligned, four sided, two dimensional box defined by a top-left position (<see cref="F:MonoGame.Extended.RectangleF.X" /> and
                <see cref="F:MonoGame.Extended.RectangleF.Y" />) and a size (<see cref="F:MonoGame.Extended.RectangleF.Width" /> and <see cref="F:MonoGame.Extended.RectangleF.Height" />).
            </summary>
            <remarks>
                <para>
                    An <see cref="T:MonoGame.Extended.RectangleF" /> is categorized by having its faces oriented in such a way that its
                    face normals are at all times parallel with the axes of the given coordinate system.
                </para>
                <para>
                    The bounding <see cref="T:MonoGame.Extended.RectangleF" /> of a rotated <see cref="T:MonoGame.Extended.RectangleF" /> will be equivalent or larger
                    in size than the original depending on the angle of rotation.
                </para>
            </remarks>
            <seealso cref="T:System.IEquatable`1" />
            <seealso cref="T:MonoGame.Extended.IEquatableByRef`1" />
        </member>
        <member name="F:MonoGame.Extended.RectangleF.Empty">
            <summary>
                The <see cref="T:MonoGame.Extended.RectangleF" /> with <see cref="F:MonoGame.Extended.RectangleF.X" />, <see cref="F:MonoGame.Extended.RectangleF.Y" />, <see cref="F:MonoGame.Extended.RectangleF.Width" /> and
                <see cref="F:MonoGame.Extended.RectangleF.Height" /> all set to <code>0.0f</code>.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.RectangleF.X">
            <summary>
                The x-coordinate of the top-left corner position of this <see cref="T:MonoGame.Extended.RectangleF" />.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.RectangleF.Y">
            <summary>
                The y-coordinate of the top-left corner position of this <see cref="T:MonoGame.Extended.RectangleF" />.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.RectangleF.Width">
            <summary>
                The width of this <see cref="T:MonoGame.Extended.RectangleF" />.
            </summary>
        </member>
        <member name="F:MonoGame.Extended.RectangleF.Height">
            <summary>
                The height of this <see cref="T:MonoGame.Extended.RectangleF" />.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.RectangleF.Left">
            <summary>
                Gets the x-coordinate of the left edge of this <see cref="T:MonoGame.Extended.RectangleF" />.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.RectangleF.Right">
            <summary>
                Gets the x-coordinate of the right edge of this <see cref="T:MonoGame.Extended.RectangleF" />.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.RectangleF.Top">
            <summary>
                Gets the y-coordinate of the top edge of this <see cref="T:MonoGame.Extended.RectangleF" />.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.RectangleF.Bottom">
            <summary>
                Gets the y-coordinate of the bottom edge of this <see cref="T:MonoGame.Extended.RectangleF" />.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.RectangleF.IsEmpty">
            <summary>
                Gets a value indicating whether this <see cref="T:MonoGame.Extended.RectangleF" /> has a <see cref="F:MonoGame.Extended.RectangleF.X" />, <see cref="F:MonoGame.Extended.RectangleF.Y" />,
                <see cref="F:MonoGame.Extended.RectangleF.Width" />,
                <see cref="F:MonoGame.Extended.RectangleF.Height" /> all equal to <code>0.0f</code>.
            </summary>
            <value>
                <c>true</c> if this instance is empty; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MonoGame.Extended.RectangleF.Position">
            <summary>
                Gets the <see cref="T:MonoGame.Extended.Point2" /> representing the the top-left of this <see cref="T:MonoGame.Extended.RectangleF" />.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.RectangleF.Size">
            <summary>
                Gets the <see cref="T:MonoGame.Extended.Size2" /> representing the extents of this <see cref="T:MonoGame.Extended.RectangleF" />.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.RectangleF.Center">
            <summary>
                Gets the <see cref="T:MonoGame.Extended.Point2" /> representing the center of this <see cref="T:MonoGame.Extended.RectangleF" />.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.RectangleF.TopLeft">
            <summary>
                Gets the <see cref="T:MonoGame.Extended.Point2" /> representing the top-left of this <see cref="T:MonoGame.Extended.RectangleF" />.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.RectangleF.BottomRight">
            <summary>
                Gets the <see cref="T:MonoGame.Extended.Point2" /> representing the bottom-right of this <see cref="T:MonoGame.Extended.RectangleF" />.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.RectangleF.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:MonoGame.Extended.RectangleF" /> structure from the specified top-left xy-coordinate
                <see cref="T:System.Single" />s, width <see cref="T:System.Single" /> and height <see cref="T:System.Single" />.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:MonoGame.Extended.RectangleF.#ctor(MonoGame.Extended.Point2,MonoGame.Extended.Size2)">
            <summary>
                Initializes a new instance of the <see cref="T:MonoGame.Extended.RectangleF" /> structure from the specified top-left
                <see cref="T:MonoGame.Extended.Point2" /> and the extents <see cref="T:MonoGame.Extended.Size2" />.
            </summary>
            <param name="position">The top-left point.</param>
            <param name="size">The extents.</param>
        </member>
        <member name="M:MonoGame.Extended.RectangleF.CreateFrom(MonoGame.Extended.Point2,MonoGame.Extended.Point2,MonoGame.Extended.RectangleF@)">
            <summary>
                Computes the <see cref="T:MonoGame.Extended.RectangleF" /> from a minimum <see cref="T:MonoGame.Extended.Point2" /> and maximum
                <see cref="T:MonoGame.Extended.Point2" />.
            </summary>
            <param name="minimum">The minimum point.</param>
            <param name="maximum">The maximum point.</param>
            <param name="result">The resulting rectangle.</param>
        </member>
        <member name="M:MonoGame.Extended.RectangleF.CreateFrom(MonoGame.Extended.Point2,MonoGame.Extended.Point2)">
            <summary>
                Computes the <see cref="T:MonoGame.Extended.RectangleF" /> from a minimum <see cref="T:MonoGame.Extended.Point2" /> and maximum
                <see cref="T:MonoGame.Extended.Point2" />.
            </summary>
            <param name="minimum">The minimum point.</param>
            <param name="maximum">The maximum point.</param>
            <returns>The resulting <see cref="T:MonoGame.Extended.RectangleF" />.</returns>
        </member>
        <member name="M:MonoGame.Extended.RectangleF.CreateFrom(System.Collections.Generic.IReadOnlyList{MonoGame.Extended.Point2},MonoGame.Extended.RectangleF@)">
            <summary>
                Computes the <see cref="T:MonoGame.Extended.RectangleF" /> from a list of <see cref="T:MonoGame.Extended.Point2" /> structures.
            </summary>
            <param name="points">The points.</param>
            <param name="result">The resulting rectangle.</param>
        </member>
        <member name="M:MonoGame.Extended.RectangleF.CreateFrom(System.Collections.Generic.IReadOnlyList{MonoGame.Extended.Point2})">
            <summary>
                Computes the <see cref="T:MonoGame.Extended.RectangleF" /> from a list of <see cref="T:MonoGame.Extended.Point2" /> structures.
            </summary>
            <param name="points">The points.</param>
            <returns>The resulting <see cref="T:MonoGame.Extended.RectangleF" />.</returns>
        </member>
        <member name="M:MonoGame.Extended.RectangleF.Transform(MonoGame.Extended.RectangleF@,MonoGame.Extended.Matrix2D@,MonoGame.Extended.RectangleF@)">
            <summary>
                Computes the <see cref="T:MonoGame.Extended.RectangleF" /> from the specified <see cref="T:MonoGame.Extended.RectangleF" /> transformed by
                the specified <see cref="T:MonoGame.Extended.Matrix2D" />.
            </summary>
            <param name="rectangle">The rectangle to be transformed.</param>
            <param name="transformMatrix">The transform matrix.</param>
            <param name="result">The resulting transformed rectangle.</param>
            <returns>
                The <see cref="T:MonoGame.Extended.BoundingRectangle" /> from the <paramref name="rectangle" /> transformed by the
                <paramref name="transformMatrix" />.
            </returns>
            <remarks>
                <para>
                    If a transformed <see cref="T:MonoGame.Extended.BoundingRectangle" /> is used for <paramref name="rectangle" /> then the
                    resulting <see cref="T:MonoGame.Extended.BoundingRectangle" /> will have the compounded transformation, which most likely is
                    not desired.
                </para>
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.RectangleF.Transform(MonoGame.Extended.RectangleF,MonoGame.Extended.Matrix2D@)">
            <summary>
                Computes the <see cref="T:MonoGame.Extended.RectangleF" /> from the specified <see cref="T:MonoGame.Extended.BoundingRectangle" /> transformed by
                the
                specified <see cref="T:MonoGame.Extended.Matrix2D" />.
            </summary>
            <param name="rectangle">The bounding rectangle.</param>
            <param name="transformMatrix">The transform matrix.</param>
            <returns>
                The <see cref="T:MonoGame.Extended.BoundingRectangle" /> from the <paramref name="rectangle" /> transformed by the
                <paramref name="transformMatrix" />.
            </returns>
            <remarks>
                <para>
                    If a transformed <see cref="T:MonoGame.Extended.BoundingRectangle" /> is used for <paramref name="rectangle" /> then the
                    resulting <see cref="T:MonoGame.Extended.BoundingRectangle" /> will have the compounded transformation, which most likely is
                    not desired.
                </para>
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.RectangleF.Union(MonoGame.Extended.RectangleF@,MonoGame.Extended.RectangleF@,MonoGame.Extended.RectangleF@)">
            <summary>
                Computes the <see cref="T:MonoGame.Extended.RectangleF" /> that contains the two specified
                <see cref="T:MonoGame.Extended.RectangleF" /> structures.
            </summary>
            <param name="first">The first rectangle.</param>
            <param name="second">The second rectangle.</param>
            <param name="result">The resulting rectangle that contains both the <paramref name="first" /> and the
                <paramref name="second" />.</param>
        </member>
        <member name="M:MonoGame.Extended.RectangleF.Union(MonoGame.Extended.RectangleF,MonoGame.Extended.RectangleF)">
            <summary>
                Computes the <see cref="T:MonoGame.Extended.RectangleF" /> that contains the two specified
                <see cref="T:MonoGame.Extended.RectangleF" /> structures.
            </summary>
            <param name="first">The first rectangle.</param>
            <param name="second">The second rectangle.</param>
            <returns>
                An <see cref="T:MonoGame.Extended.RectangleF" /> that contains both the <paramref name="first" /> and the
                <paramref name="second" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.RectangleF.Union(MonoGame.Extended.RectangleF)">
            <summary>
                Computes the <see cref="T:MonoGame.Extended.RectangleF" /> that contains both the specified <see cref="T:MonoGame.Extended.RectangleF" /> and this <see cref="T:MonoGame.Extended.RectangleF" />.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <returns>
                An <see cref="T:MonoGame.Extended.RectangleF" /> that contains both the <paramref name="rectangle" /> and
                this <see cref="T:MonoGame.Extended.RectangleF" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.RectangleF.Intersection(MonoGame.Extended.RectangleF@,MonoGame.Extended.RectangleF@,MonoGame.Extended.RectangleF@)">
            <summary>
                Computes the <see cref="T:MonoGame.Extended.RectangleF" /> that is in common between the two specified
                <see cref="T:MonoGame.Extended.RectangleF" /> structures.
            </summary>
            <param name="first">The first rectangle.</param>
            <param name="second">The second rectangle.</param>
            <param name="result">The resulting rectangle that is in common between both the <paramref name="first" /> and
                the <paramref name="second" />, if they intersect; otherwise, <see cref="F:MonoGame.Extended.RectangleF.Empty"/>.</param>
        </member>
        <member name="M:MonoGame.Extended.RectangleF.Intersection(MonoGame.Extended.RectangleF,MonoGame.Extended.RectangleF)">
            <summary>
                Computes the <see cref="T:MonoGame.Extended.RectangleF" /> that is in common between the two specified
                <see cref="T:MonoGame.Extended.RectangleF" /> structures.
            </summary>
            <param name="first">The first rectangle.</param>
            <param name="second">The second rectangle.</param>
            <returns>
                A <see cref="T:MonoGame.Extended.RectangleF" /> that is in common between both the <paramref name="first" /> and
                the <paramref name="second" />, if they intersect; otherwise, <see cref="F:MonoGame.Extended.RectangleF.Empty"/>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.RectangleF.Intersection(MonoGame.Extended.RectangleF)">
            <summary>
                Computes the <see cref="T:MonoGame.Extended.RectangleF" /> that is in common between the specified
                <see cref="T:MonoGame.Extended.RectangleF" /> and this <see cref="T:MonoGame.Extended.RectangleF" />.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <returns>
                A <see cref="T:MonoGame.Extended.RectangleF" /> that is in common between both the <paramref name="rectangle" /> and
                this <see cref="T:MonoGame.Extended.RectangleF"/>, if they intersect; otherwise, <see cref="F:MonoGame.Extended.RectangleF.Empty"/>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.RectangleF.Intersects(MonoGame.Extended.RectangleF@,MonoGame.Extended.RectangleF@)">
            <summary>
                Determines whether the two specified <see cref="T:MonoGame.Extended.RectangleF" /> structures intersect.
            </summary>
            <param name="first">The first rectangle.</param>
            <param name="second">The second rectangle.</param>
            <returns>
                <c>true</c> if the <paramref name="first" /> intersects with the <see cref="!:second" />; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.RectangleF.Intersects(MonoGame.Extended.RectangleF,MonoGame.Extended.RectangleF)">
            <summary>
                Determines whether the two specified <see cref="T:MonoGame.Extended.RectangleF" /> structures intersect.
            </summary>
            <param name="first">The first rectangle.</param>
            <param name="second">The second rectangle.</param>
            <returns>
                <c>true</c> if the <paramref name="first" /> intersects with the <see cref="!:second" />; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.RectangleF.Intersects(MonoGame.Extended.RectangleF)">
            <summary>
                Determines whether the specified <see cref="T:MonoGame.Extended.RectangleF" /> intersects with this
                <see cref="T:MonoGame.Extended.RectangleF" />.
            </summary>
            <param name="rectangle">The bounding rectangle.</param>
            <returns>
                <c>true</c> if the <paramref name="rectangle" /> intersects with this
                <see cref="T:MonoGame.Extended.RectangleF" />; otherwise,
                <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.RectangleF.Contains(MonoGame.Extended.RectangleF@,MonoGame.Extended.Point2@)">
            <summary>
                Determines whether the specified <see cref="T:MonoGame.Extended.RectangleF" /> contains the specified
                <see cref="T:MonoGame.Extended.Point2" />.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <param name="point">The point.</param>
            <returns>
                <c>true</c> if the <paramref name="rectangle" /> contains the <paramref name="point" />; otherwise,
                <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.RectangleF.Contains(MonoGame.Extended.RectangleF,MonoGame.Extended.Point2)">
            <summary>
                Determines whether the specified <see cref="T:MonoGame.Extended.RectangleF" /> contains the specified
                <see cref="T:MonoGame.Extended.Point2" />.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <param name="point">The point.</param>
            <returns>
                <c>true</c> if the <paramref name="rectangle" /> contains the <paramref name="point" />; otherwise,
                <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.RectangleF.Contains(MonoGame.Extended.Point2)">
            <summary>
                Determines whether this <see cref="T:MonoGame.Extended.RectangleF" /> contains the specified
                <see cref="T:MonoGame.Extended.Point2" />.
            </summary>
            <param name="point">The point.</param>
            <returns>
                <c>true</c> if the this <see cref="T:MonoGame.Extended.RectangleF"/> contains the <paramref name="point" />; otherwise,
                <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.RectangleF.UpdateFromPoints(System.Collections.Generic.IReadOnlyList{MonoGame.Extended.Point2})">
            <summary>
                Updates this <see cref="T:MonoGame.Extended.RectangleF" /> from a list of <see cref="T:MonoGame.Extended.Point2" /> structures.
            </summary>
            <param name="points">The points.</param>
        </member>
        <member name="M:MonoGame.Extended.RectangleF.SquaredDistanceTo(MonoGame.Extended.Point2)">
            <summary>
                Computes the squared distance from this <see cref="T:MonoGame.Extended.RectangleF"/> to a <see cref="T:MonoGame.Extended.Point2"/>.
            </summary>
            <param name="point">The point.</param>
            <returns>The squared distance from this <see cref="T:MonoGame.Extended.RectangleF"/> to the <paramref name="point"/>.</returns>
        </member>
        <member name="M:MonoGame.Extended.RectangleF.DistanceTo(MonoGame.Extended.Point2)">
            <summary>
                Computes the distance from this <see cref="T:MonoGame.Extended.RectangleF"/> to a <see cref="T:MonoGame.Extended.Point2"/>.
            </summary>
            <param name="point">The point.</param>
            <returns>The distance from this <see cref="T:MonoGame.Extended.RectangleF"/> to the <paramref name="point"/>.</returns>
        </member>
        <member name="M:MonoGame.Extended.RectangleF.ClosestPointTo(MonoGame.Extended.Point2)">
            <summary>
                Computes the closest <see cref="T:MonoGame.Extended.Point2" /> on this <see cref="T:MonoGame.Extended.RectangleF" /> to a specified
                <see cref="T:MonoGame.Extended.Point2" />.
            </summary>
            <param name="point">The point.</param>
            <returns>The closest <see cref="T:MonoGame.Extended.Point2" /> on this <see cref="T:MonoGame.Extended.RectangleF" /> to the <paramref name="point" />.</returns>
        </member>
        <member name="M:MonoGame.Extended.RectangleF.op_Equality(MonoGame.Extended.RectangleF,MonoGame.Extended.RectangleF)">
            <summary>
                Compares two <see cref="T:MonoGame.Extended.RectangleF" /> structures. The result specifies whether the values of the
                <see cref="F:MonoGame.Extended.RectangleF.X" />, <see cref="F:MonoGame.Extended.RectangleF.Y"/>, <see cref="F:MonoGame.Extended.RectangleF.Width"/> and <see cref="F:MonoGame.Extended.RectangleF.Height" /> fields of the two <see cref="T:MonoGame.Extended.RectangleF" /> structures
                are equal.
            </summary>
            <param name="first">The first rectangle.</param>
            <param name="second">The second rectangle.</param>
            <returns>
                <c>true</c> if the values of the
                <see cref="F:MonoGame.Extended.RectangleF.X" />, <see cref="F:MonoGame.Extended.RectangleF.Y"/>, <see cref="F:MonoGame.Extended.RectangleF.Width"/> and <see cref="F:MonoGame.Extended.RectangleF.Height" /> fields of the two <see cref="T:MonoGame.Extended.RectangleF" /> structures
                are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.RectangleF.op_Inequality(MonoGame.Extended.RectangleF,MonoGame.Extended.RectangleF)">
            <summary>
                Compares two <see cref="T:MonoGame.Extended.RectangleF" /> structures. The result specifies whether the values of the
                <see cref="F:MonoGame.Extended.RectangleF.X" />, <see cref="F:MonoGame.Extended.RectangleF.Y"/>, <see cref="F:MonoGame.Extended.RectangleF.Width"/> and <see cref="F:MonoGame.Extended.RectangleF.Height" /> fields of the two <see cref="T:MonoGame.Extended.RectangleF" /> structures
                are unequal.
            </summary>
            <param name="first">The first rectangle.</param>
            <param name="second">The second rectangle.</param>
            <returns>
                <c>true</c> if the values of the
                <see cref="F:MonoGame.Extended.RectangleF.X" />, <see cref="F:MonoGame.Extended.RectangleF.Y"/>, <see cref="F:MonoGame.Extended.RectangleF.Width"/> and <see cref="F:MonoGame.Extended.RectangleF.Height" /> fields of the two <see cref="T:MonoGame.Extended.RectangleF" /> structures
                are unequal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.RectangleF.Equals(MonoGame.Extended.RectangleF)">
            <summary>
                Indicates whether this <see cref="T:MonoGame.Extended.RectangleF" /> is equal to another <see cref="T:MonoGame.Extended.RectangleF" />.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <returns>
                <c>true</c> if this <see cref="T:MonoGame.Extended.RectangleF" /> is equal to the <paramref name="rectangle" />; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.RectangleF.Equals(MonoGame.Extended.RectangleF@)">
            <summary>
                Indicates whether this <see cref="T:MonoGame.Extended.RectangleF" /> is equal to another <see cref="T:MonoGame.Extended.RectangleF" />.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <returns>
                <c>true</c> if this <see cref="T:MonoGame.Extended.RectangleF" /> is equal to the <paramref name="rectangle" />; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.RectangleF.Equals(System.Object)">
            <summary>
                Returns a value indicating whether this <see cref="T:MonoGame.Extended.RectangleF" /> is equal to a specified object.
            </summary>
            <param name="obj">The object to make the comparison with.</param>
            <returns>
                <c>true</c> if this <see cref="T:MonoGame.Extended.RectangleF" /> is equal to <paramref name="obj" />; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.RectangleF.GetHashCode">
            <summary>
                Returns a hash code of this <see cref="T:MonoGame.Extended.RectangleF" /> suitable for use in hashing algorithms and data
                structures like a hash table.
            </summary>
            <returns>
                A hash code of this <see cref="T:MonoGame.Extended.RectangleF" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.RectangleF.op_Implicit(Microsoft.Xna.Framework.Rectangle)~MonoGame.Extended.RectangleF">
            <summary>
                Performs an implicit conversion from a <see cref="T:Microsoft.Xna.Framework.Rectangle" /> to a <see cref="T:MonoGame.Extended.RectangleF" />.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <returns>
                The resulting <see cref="T:MonoGame.Extended.RectangleF" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.RectangleF.op_Explicit(MonoGame.Extended.RectangleF)~Microsoft.Xna.Framework.Rectangle">
            <summary>
                Performs an implicit conversion from a <see cref="T:Microsoft.Xna.Framework.Rectangle" /> to a <see cref="T:MonoGame.Extended.RectangleF" />.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <returns>
                The resulting <see cref="T:MonoGame.Extended.RectangleF" />.
            </returns>
            <remarks>
                <para>A loss of precision may occur due to the truncation from <see cref="T:System.Single" /> to <see cref="T:System.Int32" />.</para>
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.RectangleF.ToString">
            <summary>
                Returns a <see cref="T:System.String" /> that represents this <see cref="T:MonoGame.Extended.RectangleF" />.
            </summary>
            <returns>
                A <see cref="T:System.String" /> that represents this <see cref="T:MonoGame.Extended.RectangleF" />.
            </returns>
        </member>
        <member name="M:MonoGame.Extended.RectangleExtensions.GetCorners(Microsoft.Xna.Framework.Rectangle)">
            <summary>
                Gets the corners of the rectangle in a clockwise direction starting at the top left.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.RectangleExtensions.GetCorners(MonoGame.Extended.RectangleF)">
            <summary>
                Gets the corners of the rectangle in a clockwise direction starting at the top left.
            </summary>
        </member>
        <member name="T:MonoGame.Extended.TextureAtlases.TextureAtlas">
            <summary>
                Defines a texture atlas which stores a source image and contains regions specifying its sub-images.
            </summary>
            <remarks>
                <para>
                    Texture atlas (also called a tile map, tile engine, or sprite sheet) is a large image containing a collection,
                    or "atlas", of sub-images, each of which is a texture map for some part of a 2D or 3D model.
                    The sub-textures can be rendered by modifying the texture coordinates of the object's uvmap on the atlas,
                    essentially telling it which part of the image its texture is in.
                    In an application where many small textures are used frequently, it is often more efficient to store the
                    textures in a texture atlas which is treated as a single unit by the graphics hardware.
                    This saves memory and because there are less rendering state changes by binding once, it can be faster to bind
                    one large texture once than to bind many smaller textures as they are drawn.
                    Careful alignment may be needed to avoid bleeding between sub textures when used with mipmapping, and artefacts
                    between tiles for texture compression.
                </para>
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.TextureAtlases.TextureAtlas.#ctor(System.String,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
                Initializes a new texture atlas with an empty list of regions.
            </summary>
            <param name="name">The asset name of this texture atlas</param>
            <param name="texture">Source <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D" /> image used to draw on screen.</param>
        </member>
        <member name="M:MonoGame.Extended.TextureAtlases.TextureAtlas.#ctor(System.String,Microsoft.Xna.Framework.Graphics.Texture2D,System.Collections.Generic.Dictionary{System.String,Microsoft.Xna.Framework.Rectangle})">
            <summary>
                Initializes a new texture atlas and populates it with regions.
            </summary>
            <param name="name">The asset name of this texture atlas</param>
            <param name="texture">Source <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D" /> image used to draw on screen.</param>
            <param name="regions">A collection of regions to populate the atlas with.</param>
        </member>
        <member name="P:MonoGame.Extended.TextureAtlases.TextureAtlas.Texture">
            <summary>
                Gets a source <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D" /> image.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.TextureAtlases.TextureAtlas.Regions">
            <summary>
                Gets a list of regions in the <see cref="T:MonoGame.Extended.TextureAtlases.TextureAtlas" />.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.TextureAtlases.TextureAtlas.RegionCount">
            <summary>
                Gets the number of regions in the <see cref="T:MonoGame.Extended.TextureAtlases.TextureAtlas" />.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.TextureAtlases.TextureAtlas.GetEnumerator">
            <summary>
                Gets the enumerator of the <see cref="T:MonoGame.Extended.TextureAtlases.TextureAtlas" />' list of regions.
            </summary>
            <returns>The <see cref="T:System.Collections.IEnumerator" /> of regions.</returns>
        </member>
        <member name="M:MonoGame.Extended.TextureAtlases.TextureAtlas.System#Collections#IEnumerable#GetEnumerator">
            <summary>
                Gets the enumerator of the <see cref="T:MonoGame.Extended.TextureAtlases.TextureAtlas" />' list of regions.
            </summary>
            <returns>The <see cref="T:System.Collections.IEnumerator" /> of regions</returns>
        </member>
        <member name="M:MonoGame.Extended.TextureAtlases.TextureAtlas.ContainsRegion(System.String)">
            <summary>
            Determines whether the texture atlas contains a region
            </summary>
            <param name="name">Name of the texture region.</param>
            <returns></returns>
        </member>
        <member name="M:MonoGame.Extended.TextureAtlases.TextureAtlas.AddRegion(MonoGame.Extended.TextureAtlases.TextureRegion2D)">
            <summary>
            Internal method for adding region
            </summary>
            <param name="region">Texture region.</param>
        </member>
        <member name="M:MonoGame.Extended.TextureAtlases.TextureAtlas.CreateRegion(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Creates a new texture region and adds it to the list of the <see cref="T:MonoGame.Extended.TextureAtlases.TextureAtlas" />' regions.
            </summary>
            <param name="name">Name of the texture region.</param>
            <param name="x">X coordinate of the region's top left corner.</param>
            <param name="y">Y coordinate of the region's top left corner.</param>
            <param name="width">Width of the texture region.</param>
            <param name="height">Height of the texture region.</param>
            <returns>Created texture region.</returns>
        </member>
        <member name="M:MonoGame.Extended.TextureAtlases.TextureAtlas.CreateNinePatchRegion(System.String,System.Int32,System.Int32,System.Int32,System.Int32,MonoGame.Extended.Thickness)">
            <summary>
                Creates a new nine patch texture region and adds it to the list of the <see cref="T:MonoGame.Extended.TextureAtlases.TextureAtlas" />' regions.
            </summary>
            <param name="name">Name of the texture region.</param>
            <param name="x">X coordinate of the region's top left corner.</param>
            <param name="y">Y coordinate of the region's top left corner.</param>
            <param name="width">Width of the texture region.</param>
            <param name="height">Height of the texture region.</param>
            <param name="thickness">Thickness of the nine patch region.</param>
            <returns>Created texture region.</returns>
        </member>
        <member name="M:MonoGame.Extended.TextureAtlases.TextureAtlas.RemoveRegion(System.Int32)">
            <summary>
                Removes a texture region from the <see cref="T:MonoGame.Extended.TextureAtlases.TextureAtlas" />
            </summary>
            <param name="index">An index of the <see cref="T:MonoGame.Extended.TextureAtlases.TextureRegion2D" /> in <see cref="!:Region" /> to remove</param>
        </member>
        <member name="M:MonoGame.Extended.TextureAtlases.TextureAtlas.RemoveRegion(System.String)">
            <summary>
                Removes a texture region from the <see cref="T:MonoGame.Extended.TextureAtlases.TextureAtlas" />
            </summary>
            <param name="name">Name of the <see cref="T:MonoGame.Extended.TextureAtlases.TextureRegion2D" /> to remove</param>
        </member>
        <member name="M:MonoGame.Extended.TextureAtlases.TextureAtlas.GetRegion(System.Int32)">
            <summary>
                Gets a <see cref="T:MonoGame.Extended.TextureAtlases.TextureRegion2D" /> from the <see cref="T:MonoGame.Extended.TextureAtlases.TextureAtlas" />' list.
            </summary>
            <param name="index">An index of the <see cref="T:MonoGame.Extended.TextureAtlases.TextureRegion2D" /> in <see cref="!:Region" /> to get.</param>
            <returns>The <see cref="T:MonoGame.Extended.TextureAtlases.TextureRegion2D" />.</returns>
        </member>
        <member name="M:MonoGame.Extended.TextureAtlases.TextureAtlas.GetRegion(System.String)">
            <summary>
                Gets a <see cref="T:MonoGame.Extended.TextureAtlases.TextureRegion2D" /> from the <see cref="T:MonoGame.Extended.TextureAtlases.TextureAtlas" />' list.
            </summary>
            <param name="name">Name of the <see cref="T:MonoGame.Extended.TextureAtlases.TextureRegion2D" /> to get.</param>
            <returns>The <see cref="T:MonoGame.Extended.TextureAtlases.TextureRegion2D" />.</returns>
        </member>
        <member name="M:MonoGame.Extended.TextureAtlases.TextureAtlas.GetRegion``1(System.String)">
            <summary>
            Gets a texture region from the <see cref="T:MonoGame.Extended.TextureAtlases.TextureAtlas" /> of a specified type.
            This is can be useful if the atlas contains <see cref="T:MonoGame.Extended.TextureAtlases.NinePatchRegion2D"/>'s.
            </summary>
            <typeparam name="T">Type of the region to get</typeparam>
            <param name="name">Name of the region to get</param>
            <returns>The texture region</returns>
        </member>
        <member name="M:MonoGame.Extended.TextureAtlases.TextureAtlas.Create(System.String,Microsoft.Xna.Framework.Graphics.Texture2D,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Creates a new <see cref="T:MonoGame.Extended.TextureAtlases.TextureAtlas" /> and populates it with a grid of <see cref="T:MonoGame.Extended.TextureAtlases.TextureRegion2D" />.
            </summary>
            <param name="name">The name of this texture atlas</param>
            <param name="texture">Source <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D" /> image used to draw on screen</param>
            <param name="regionWidth">Width of the <see cref="T:MonoGame.Extended.TextureAtlases.TextureRegion2D" />.</param>
            <param name="regionHeight">Height of the <see cref="T:MonoGame.Extended.TextureAtlases.TextureRegion2D" />.</param>
            <param name="maxRegionCount">The number of <see cref="T:MonoGame.Extended.TextureAtlases.TextureRegion2D" /> to create.</param>
            <param name="margin">Minimum distance of the regions from the border of the source <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D" /> image.</param>
            <param name="spacing">Horizontal and vertical space between regions.</param>
            <returns>A created and populated <see cref="T:MonoGame.Extended.TextureAtlases.TextureAtlas" />.</returns>
        </member>
        <member name="T:MonoGame.Extended.BaseTransform`1">
            <summary>
                Represents the base class for the position, rotation, and scale of a game object in two-dimensions or
                three-dimensions.
            </summary>
            <typeparam name="TMatrix">The type of the matrix.</typeparam>
            <remarks>
                <para>
                    Every game object has a transform which is used to store and manipulate the position, rotation and scale
                    of the object. Every transform can have a parent, which allows to apply position, rotation and scale to game
                    objects hierarchically.
                </para>
                <para>
                    This class shouldn't be used directly. Instead use either of the derived classes; <see cref="T:MonoGame.Extended.Transform2D" /> or
                    Transform3D.
                </para>
            </remarks>
        </member>
        <member name="P:MonoGame.Extended.BaseTransform`1.LocalMatrix">
            <summary>
                Gets the model-to-local space <see cref="T:MonoGame.Extended.Matrix2D" />.
            </summary>
            <value>
                The model-to-local space <see cref="T:MonoGame.Extended.Matrix2D" />.
            </value>
        </member>
        <member name="P:MonoGame.Extended.BaseTransform`1.WorldMatrix">
            <summary>
                Gets the local-to-world space <see cref="T:MonoGame.Extended.Matrix2D" />.
            </summary>
            <value>
                The local-to-world space <see cref="T:MonoGame.Extended.Matrix2D" />.
            </value>
        </member>
        <member name="P:MonoGame.Extended.BaseTransform`1.Parent">
            <summary>
                Gets or sets the parent instance.
            </summary>
            <value>
                The parent instance.
            </value>
            <remarks>
                <para>
                    Setting <see cref="P:MonoGame.Extended.BaseTransform`1.Parent" /> to a non-null instance enables this instance to
                    inherit the position, rotation, and scale of the parent instance. Setting <see cref="P:MonoGame.Extended.BaseTransform`1.Parent" /> to
                    <code>null</code> disables the inheritance altogether for this instance.
                </para>
            </remarks>
        </member>
        <member name="M:MonoGame.Extended.BaseTransform`1.GetLocalMatrix(`0@)">
            <summary>
                Gets the model-to-local space <see cref="T:MonoGame.Extended.Matrix2D" />.
            </summary>
            <param name="matrix">The model-to-local space <see cref="T:MonoGame.Extended.Matrix2D" />.</param>
        </member>
        <member name="M:MonoGame.Extended.BaseTransform`1.GetWorldMatrix(`0@)">
            <summary>
                Gets the local-to-world space <see cref="T:MonoGame.Extended.Matrix2D" />.
            </summary>
            <param name="matrix">The local-to-world space <see cref="T:MonoGame.Extended.Matrix2D" />.</param>
        </member>
        <member name="T:MonoGame.Extended.Transform2D">
            <summary>
                Represents the position, rotation, and scale of a two-dimensional game object.
            </summary>
            <seealso cref="T:MonoGame.Extended.BaseTransform`1" />
            <seealso cref="T:MonoGame.Extended.IMovable" />
            <seealso cref="T:MonoGame.Extended.IRotatable" />
            <seealso cref="T:MonoGame.Extended.IScalable" />
            <remarks>
                <para>
                    Every game object has a transform which is used to store and manipulate the position, rotation and scale
                    of the object. Every transform can have a parent, which allows to apply position, rotation and scale to game
                    objects hierarchically.
                </para>
            </remarks>
        </member>
        <member name="P:MonoGame.Extended.Transform2D.WorldPosition">
            <summary>
                Gets the world position.
            </summary>
            <value>
                The world position.
            </value>
        </member>
        <member name="P:MonoGame.Extended.Transform2D.WorldScale">
            <summary>
                Gets the world scale.
            </summary>
            <value>
                The world scale.
            </value>
        </member>
        <member name="P:MonoGame.Extended.Transform2D.WorldRotation">
            <summary>
                Gets the world rotation angle in radians.
            </summary>
            <value>
                The world rotation angle in radians.
            </value>
        </member>
        <member name="P:MonoGame.Extended.Transform2D.Position">
            <summary>
                Gets or sets the local position.
            </summary>
            <value>
                The local position.
            </value>
        </member>
        <member name="P:MonoGame.Extended.Transform2D.Rotation">
            <summary>
                Gets or sets the local rotation angle in radians.
            </summary>
            <value>
                The local rotation angle in radians.
            </value>
        </member>
        <member name="P:MonoGame.Extended.Transform2D.Scale">
            <summary>
                Gets or sets the local scale.
            </summary>
            <value>
                The local scale.
            </value>
        </member>
        <member name="M:MonoGame.Extended.ViewportAdapters.BoxingViewportAdapter.#ctor(Microsoft.Xna.Framework.GameWindow,Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:MonoGame.Extended.ViewportAdapters.BoxingViewportAdapter" />.
                Note: If you're using DirectX please use the other constructor due to a bug in MonoGame.
                https://github.com/mono/MonoGame/issues/4018
            </summary>
        </member>
        <member name="M:MonoGame.Extended.ViewportAdapters.BoxingViewportAdapter.#ctor(Microsoft.Xna.Framework.GameWindow,Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:MonoGame.Extended.ViewportAdapters.BoxingViewportAdapter" />.
                Note: If you're using DirectX please use the other constructor due to a bug in MonoGame.
                https://github.com/mono/MonoGame/issues/4018
            </summary>
        </member>
        <member name="M:MonoGame.Extended.ViewportAdapters.BoxingViewportAdapter.#ctor(Microsoft.Xna.Framework.GameWindow,Microsoft.Xna.Framework.GraphicsDeviceManager,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:MonoGame.Extended.ViewportAdapters.BoxingViewportAdapter" />.
                Use this constructor only if you're using DirectX due to a bug in MonoGame.
                https://github.com/mono/MonoGame/issues/4018
                This constructor will be made obsolete and eventually removed once the bug has been fixed.
            </summary>
        </member>
        <member name="M:MonoGame.Extended.ViewportAdapters.BoxingViewportAdapter.#ctor(Microsoft.Xna.Framework.GameWindow,Microsoft.Xna.Framework.GraphicsDeviceManager,System.Int32,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:MonoGame.Extended.ViewportAdapters.BoxingViewportAdapter" />.
                Use this constructor only if you're using DirectX due to a bug in MonoGame.
                https://github.com/mono/MonoGame/issues/4018
                This constructor will be made obsolete and eventually removed once the bug has been fixed.
            </summary>
        </member>
        <member name="P:MonoGame.Extended.ViewportAdapters.BoxingViewportAdapter.HorizontalBleed">
            <summary>
                Size of horizontal bleed areas (from left and right edges) which can be safely cut off
            </summary>
        </member>
        <member name="P:MonoGame.Extended.ViewportAdapters.BoxingViewportAdapter.VerticalBleed">
            <summary>
                Size of vertical bleed areas (from top and bottom edges) which can be safely cut off
            </summary>
        </member>
    </members>
</doc>
